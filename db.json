{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/gallery/1549865117004_x68h12oa.png","path":"gallery/1549865117004_x68h12oa.png","modified":0,"renderable":0},{"_id":"source/gallery/103834884.jpg","path":"gallery/103834884.jpg","modified":0,"renderable":0},{"_id":"source/gallery/64535234_p0.png","path":"gallery/64535234_p0.png","modified":0,"renderable":0},{"_id":"source/gallery/Arknights01.jpg","path":"gallery/Arknights01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/FINAL FANTASY XIV SHADOWBRINGERS.png","path":"gallery/FINAL FANTASY XIV SHADOWBRINGERS.png","modified":0,"renderable":0},{"_id":"source/gallery/Lain.JPG","path":"gallery/Lain.JPG","modified":0,"renderable":0},{"_id":"source/gallery/Lain2.JPG","path":"gallery/Lain2.JPG","modified":0,"renderable":0},{"_id":"source/gallery/avatar.jpg","path":"gallery/avatar.jpg","modified":0,"renderable":0},{"_id":"source/gallery/kantoku-colors.jpg","path":"gallery/kantoku-colors.jpg","modified":0,"renderable":0},{"_id":"source/gallery/learning-jpa-01.jpg","path":"gallery/learning-jpa-01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/learning-jpa-02.jpg","path":"gallery/learning-jpa-02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/machi.png","path":"gallery/machi.png","modified":0,"renderable":0},{"_id":"source/gallery/sv-5th-anni.jpg","path":"gallery/sv-5th-anni.jpg","modified":0,"renderable":0},{"_id":"source/gallery/逆光剑フラガラック.jpg","path":"gallery/逆光剑フラガラック.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"b3a5b49c89ec2b1f0ed9d8a618a917b0c984d9b0","modified":1722694048428},{"_id":"source/googlef50674fb2852e90b.html","hash":"333cab635c6bc8ae68003bc11effb75699315dc3","modified":1629859644945},{"_id":"source/about/index.md","hash":"ba48bcfef27ec00dd75083a5523d8e4857df5cc9","modified":1646057972225},{"_id":"source/_posts/Demo.md","hash":"0c603da30eff27d605d0a28d8bfc38a76cd9577c","modified":1594038855577},{"_id":"source/_posts/build-thin-jar-with-external-lib-by-gradle.md","hash":"d257f54f985d0bb81e11f17091fb38c0c6a2ef8f","modified":1656654840475},{"_id":"source/_posts/DDD.md","hash":"0c2dc0a0ca52b6da3b2fb19fe555d9699ede13c9","modified":1594038347637},{"_id":"source/_posts/Nginx基础——Rewrite规则.md","hash":"929169d23b0a84fd18e2d2a5074c14372a606c45","modified":1629859644842},{"_id":"source/_posts/context-of-reactor.md","hash":"149ba3da677619e0039f87ea1bd4d019d277554f","modified":1601955153987},{"_id":"source/_data/fluid_config.yml","hash":"669889747c61c27a630d8fa23c1215ed5b996577","modified":1722875159317},{"_id":"source/_posts/graalvm-with-spring-boot.md","hash":"a16fc02e94a66334488b6da62e51f2a4f560bf69","modified":1722692276572},{"_id":"source/_posts/hello-world.md","hash":"9d68fda8b5a544f0d1c628a085ed747c31fb58c1","modified":1565784441217},{"_id":"source/_posts/interview-note-01.md","hash":"916181cd4b5391cf119b983b93571ea611a5cd81","modified":1629859644843},{"_id":"source/_posts/juc-dcl-singleton.md","hash":"520b3a27f4764b5a661ec24e974bb8343038cbc1","modified":1629859644843},{"_id":"source/_posts/lean-kotlin-01.md","hash":"59c6b57f4a614da16af647e1b7a8f544a7ec37d1","modified":1673036058720},{"_id":"source/_posts/lean-pulishOn-of-reactor.md","hash":"f8eb4627baca82c35b592e3b36f553f2a845b8fb","modified":1629859644845},{"_id":"source/_posts/learning-jpa-01.md","hash":"2a6c02f4c8fe76d9d058bb89a7c4a5cb3ba890a2","modified":1629859644846},{"_id":"source/_posts/learning-jpa-02.md","hash":"4ab160dfbaec4de5ed2e44d8920a1d30bd280eb3","modified":1629859644846},{"_id":"source/_posts/over-the-wall.md","hash":"ff7446db98802db5ff4ba5acc0666e6d580b3a06","modified":1616578498791},{"_id":"source/_posts/redis-note-01.md","hash":"a21b531cfbf2840696563a1cda3c0a5530275834","modified":1629859644847},{"_id":"source/_posts/spring-jpa-notes-01.md","hash":"a111c6850f64104cd79060cad841da80531edbcb","modified":1722866519484},{"_id":"source/_posts/uma-musume-note.md","hash":"98aa2599bd804f12559e830a748098698b823fba","modified":1629859758678},{"_id":"source/_posts/とある三秋 缒的一些摘抄.md","hash":"34d77e23f174631add01e693051c914e1837ae69","modified":1645359796173},{"_id":"source/_posts/将项目部署在docker中.md","hash":"bd9d4fd29f6f2bd8b8531dee5f72491989a9ca86","modified":1673024545662},{"_id":"source/gallery/avatar.jpg","hash":"8a1247593a0c820defd9fdc6703eb7fec4105297","modified":1594019844167},{"_id":"source/gallery/逆光剑フラガラック.jpg","hash":"41407f197e4d6a28e9bd91a30b932151e53a2774","modified":1376580814000},{"_id":"source/categories/index.md","hash":"35c20ecb006a72b20824c3e5dbee1107e3ddc6e2","modified":1565784441220},{"_id":"source/tags/index.md","hash":"8497720719f1fec3af410fa66df45b3ce92fc3ab","modified":1565784441260},{"_id":"source/_posts/DDD/CQRS.jpg","hash":"29e69cab5ca143edb2f4cccc0d018b1bd59415b1","modified":1594019844168},{"_id":"source/_posts/DDD/v2-35249fb2693f44bbe4bf48ea6755c55c_hd.jpg","hash":"fbd5a0de3112601fb2c07239ac5251b7cb2ad439","modified":1594019844173},{"_id":"source/_posts/DDD/v2-7c6a1b0c101d8f0cf5e89716bfb4d6a1_hd.jpg","hash":"707d5006a66988e3d369a466cac6cba2b49aec7d","modified":1594019844174},{"_id":"source/_posts/juc-dcl-singleton/volatile.png","hash":"36c8bcacf08e4bf680a214c789132ea14aab6049","modified":1629859644844},{"_id":"source/_posts/DDD/p29.png","hash":"5e41fc0db4e30674d15c2922caa26051c709cd5b","modified":1594019844172},{"_id":"source/_posts/DDD/p28.png","hash":"76fe1dc8927db25f31671e299aac747c81c58685","modified":1594019844171},{"_id":"source/gallery/learning-jpa-01.jpg","hash":"332ef9293971019776332518b3a47742880099db","modified":1552771957586},{"_id":"source/gallery/learning-jpa-02.jpg","hash":"0eb5a155e0e5018aee367a9d6dbf35ce420b2191","modified":1552771960418},{"_id":"source/gallery/Lain2.JPG","hash":"89bc035069a596826a2d12aae972e0af7ecf7f1f","modified":1147159760000},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1639531757923},{"_id":"source/gallery/Lain.JPG","hash":"c7b463552df19f4985894bfd55a06ae962108f1e","modified":1147158576000},{"_id":"themes/hexo-theme-fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1639531757861},{"_id":"themes/hexo-theme-fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1639531757862},{"_id":"themes/hexo-theme-fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1639531757862},{"_id":"themes/hexo-theme-fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1655991665901},{"_id":"themes/hexo-theme-fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1645359794911},{"_id":"themes/hexo-theme-fluid/README_en.md","hash":"85656f2a23cc5e31420f0118bf5541b6e9f058b6","modified":1722692275565},{"_id":"themes/hexo-theme-fluid/README.md","hash":"34e3223851da1596b9ff051f2b29c6004edca8a1","modified":1722692275564},{"_id":"themes/hexo-theme-fluid/languages/de.yml","hash":"f814263ded504cb4c50a8b66157bdd71f553be1b","modified":1722692275567},{"_id":"themes/hexo-theme-fluid/package.json","hash":"fd6756866314aaf4b15d734a83b85aa09aa0b5ed","modified":1722692275597},{"_id":"themes/hexo-theme-fluid/_config.yml","hash":"3701f2dc9ee152d11e20e8209c91d3ca5d7b1d8f","modified":1722692275566},{"_id":"themes/hexo-theme-fluid/languages/en.yml","hash":"415e3403182e1282386f28b9d61343f147519163","modified":1722692275567},{"_id":"themes/hexo-theme-fluid/languages/eo.yml","hash":"314b97a7e68093328675acfd308d839b1d772ac9","modified":1722692275568},{"_id":"themes/hexo-theme-fluid/languages/es.yml","hash":"0ad94ddf1ca868a67b5b84aed257a30572962210","modified":1722692275569},{"_id":"themes/hexo-theme-fluid/languages/ja.yml","hash":"65a90f294f6c73245e8250e87d124630ad10b389","modified":1722692275569},{"_id":"themes/hexo-theme-fluid/languages/zh-CN.yml","hash":"497b3dea5058f718da225a7a443e916da895ea10","modified":1722692275571},{"_id":"themes/hexo-theme-fluid/languages/ru.yml","hash":"998112b384b574e0e29c6ea16e4c1ebce1c15a4c","modified":1722692275570},{"_id":"themes/hexo-theme-fluid/languages/zh-HK.yml","hash":"05418d0bca261de386872be65027bf4498758788","modified":1722692275571},{"_id":"themes/hexo-theme-fluid/languages/zh-TW.yml","hash":"ded0621e63b1f8b241be21f6e9b52d4f36edbcd0","modified":1722692275572},{"_id":"themes/hexo-theme-fluid/layout/about.ejs","hash":"2f3ea36713f0fa91d8d61d39fcf9e584372de818","modified":1722692275596},{"_id":"themes/hexo-theme-fluid/layout/404.ejs","hash":"c49974dcbda02fe720498398e9778826335459c0","modified":1722692275573},{"_id":"themes/hexo-theme-fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1655991665993},{"_id":"themes/hexo-theme-fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1655991665994},{"_id":"themes/hexo-theme-fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1655991665995},{"_id":"themes/hexo-theme-fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1655991665997},{"_id":"themes/hexo-theme-fluid/layout/index.ejs","hash":"dde1f6a27c8d09c38850a691089937f181b6c035","modified":1722692275596},{"_id":"themes/hexo-theme-fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1655991665996},{"_id":"themes/hexo-theme-fluid/layout/post.ejs","hash":"c8da695dc1b01b715909ae6f1052ccaebdf9db4c","modified":1722692275597},{"_id":"themes/hexo-theme-fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1655991665998},{"_id":"themes/hexo-theme-fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1655991665997},{"_id":"themes/hexo-theme-fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1639531757891},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1722692275561},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1722692275562},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1639531757865},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1639531757866},{"_id":"themes/hexo-theme-fluid/.github/workflows/cr.yaml","hash":"fc31c7c6692424af1e08cd5e273a5a5814f9c577","modified":1722692275563},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1639531757866},{"_id":"themes/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1722692275563},{"_id":"themes/hexo-theme-fluid/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1722692275564},{"_id":"themes/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1639531757867},{"_id":"themes/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1655991666028},{"_id":"themes/hexo-theme-fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1655991666000},{"_id":"themes/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1655991666042},{"_id":"themes/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"67637461e3f94f9e9675369eb7ff015355d9ec54","modified":1722692275608},{"_id":"themes/hexo-theme-fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1639531757896},{"_id":"themes/hexo-theme-fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1655991666043},{"_id":"themes/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"14a207a7d4e329382ab5d4e1da1ef85ff043daba","modified":1722692275616},{"_id":"themes/hexo-theme-fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1655991666054},{"_id":"themes/hexo-theme-fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1655991666054},{"_id":"themes/hexo-theme-fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1639531757899},{"_id":"themes/hexo-theme-fluid/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1722692275616},{"_id":"themes/hexo-theme-fluid/scripts/helpers/utils.js","hash":"f57be245e6e7228673e1dec3a3477e731492c5c1","modified":1722692275617},{"_id":"themes/hexo-theme-fluid/scripts/generators/index-generator.js","hash":"3550976efc94500284795f13485f5a1765fc120b","modified":1722692275614},{"_id":"themes/hexo-theme-fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1639531757899},{"_id":"themes/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"0bb33314aa5cfe326ab9bb14b545e343e4db4193","modified":1722692275617},{"_id":"themes/hexo-theme-fluid/scripts/generators/local-search.js","hash":"33427308ca29f1d76336c83e704571c9de75df02","modified":1722692275614},{"_id":"themes/hexo-theme-fluid/scripts/generators/pages.js","hash":"3fb72d3c2224c32d861a6e8a85e78a8b67e6a244","modified":1722692275615},{"_id":"themes/hexo-theme-fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1639531757901},{"_id":"themes/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"1ff4ea054f2c735dfaccb0be90f1708a2a750bc8","modified":1722692275618},{"_id":"themes/hexo-theme-fluid/scripts/tags/fold.js","hash":"a93e2603021ad38714e870399767bea24e7cbe3e","modified":1722692275619},{"_id":"themes/hexo-theme-fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1639531757902},{"_id":"themes/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1639531757903},{"_id":"themes/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1639531757905},{"_id":"themes/hexo-theme-fluid/scripts/utils/crypto.js","hash":"474b00a57f43dbe7bc2876d637ece4214d016c06","modified":1722692275620},{"_id":"themes/hexo-theme-fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1639531757902},{"_id":"themes/hexo-theme-fluid/scripts/tags/note.js","hash":"e300ec4ee6c63464859ab000e987bf8dd7db4025","modified":1722692275620},{"_id":"themes/hexo-theme-fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1639531757906},{"_id":"themes/hexo-theme-fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1655991666107},{"_id":"themes/hexo-theme-fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1655991666107},{"_id":"themes/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1655991665935},{"_id":"themes/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1655991665936},{"_id":"themes/hexo-theme-fluid/layout/_partials/css.ejs","hash":"901280e6fb3194c30542751d04f27e78b42d3c6f","modified":1722692275578},{"_id":"themes/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1722692275574},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"1ce9094faec6204949cdaf604aaf9200787e4218","modified":1722692275574},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"6bb3335b5486d4bee2ed42f8bef57903066bc234","modified":1722692275578},{"_id":"themes/hexo-theme-fluid/layout/_partials/head.ejs","hash":"a0bcbbfc34efaef3b23c6b531e7f3201f2eab2dd","modified":1722692275580},{"_id":"themes/hexo-theme-fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1655991665945},{"_id":"themes/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1655991665947},{"_id":"themes/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1655991665947},{"_id":"themes/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1655991665991},{"_id":"themes/hexo-theme-fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1655991665992},{"_id":"themes/hexo-theme-fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1639531757925},{"_id":"themes/hexo-theme-fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1655991666215},{"_id":"themes/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1655991666214},{"_id":"themes/hexo-theme-fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1655991666216},{"_id":"themes/hexo-theme-fluid/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1722692275627},{"_id":"themes/hexo-theme-fluid/source/js/events.js","hash":"3efd602cdb694902d6e74c4eb1e5bd70120ac5b1","modified":1722692275628},{"_id":"themes/hexo-theme-fluid/source/js/color-schema.js","hash":"e7addcc88eb73dec4a9a8641a4bb68966a38a65d","modified":1722692275627},{"_id":"themes/hexo-theme-fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1639531757936},{"_id":"themes/hexo-theme-fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1655991666250},{"_id":"themes/hexo-theme-fluid/source/js/plugins.js","hash":"753c2cf95f2659fef80277b895f4da10c8888c72","modified":1722692275629},{"_id":"themes/hexo-theme-fluid/source/js/local-search.js","hash":"491021125d2579e841c83f36d3ab790d1eab9d1e","modified":1722692275629},{"_id":"themes/hexo-theme-fluid/source/js/umami-view.js","hash":"370ab30ab88c596d85327dbd7db3bafd49489fdd","modified":1722692275630},{"_id":"themes/hexo-theme-fluid/source/js/utils.js","hash":"9d0423db40a787f3b19968205b9ed92a848c9153","modified":1722692275631},{"_id":"themes/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1655991666247},{"_id":"themes/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1639531757926},{"_id":"themes/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1639531757934},{"_id":"themes/hexo-theme-fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1639531757940},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1655991666012},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"9b1934c61dc78622a07da554413f6ad31854576d","modified":1722692275606},{"_id":"themes/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1639531757934},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"da987411ae4a4e6896a9b8af1fce6209192af28e","modified":1722692275607},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"d103e4bf612b2445bb136712d57b81e784a313e2","modified":1722692275607},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1655991666026},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1655991665938},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1655991666027},{"_id":"themes/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1639531757895},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1655991665939},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/discuss.ejs","hash":"d400e5721af28cefecaf50b46c82dcdde4cda4a8","modified":1722692275575},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1655991665939},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1655991665940},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1655991665940},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1655991665940},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1655991665942},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"938eb60413ae8af83ffeaba4d85df88387cdd5be","modified":1722692275576},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1655991665941},{"_id":"themes/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1655991665946},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"df6bae1a93827991049f7a33f6a69681c60eab0e","modified":1722692275577},{"_id":"themes/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1655991665942},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"047bece1db5cdf96cb78a44c6420ce3e92e6a9ca","modified":1722692275579},{"_id":"themes/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1655991665944},{"_id":"themes/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"e5219b14410066bf8ab491379aca797304b4a914","modified":1722692275581},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"26905d5862b1531ebcc175af15178dabeecc81c8","modified":1722692275586},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1722692275586},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"f0cb813cd03642c9b68cff8b6669f73a61dd10f8","modified":1722692275587},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"f8fe8e58b83f627db82c0dbeb663389efc33c1c6","modified":1722692275582},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"73827074db4e0fc3d52c51a76285df87aa5e5a7f","modified":1722692275594},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1655991665989},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"1b1eb4c8e163a5d909e86da76ef778948e0e0b77","modified":1722692275595},{"_id":"themes/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1655991665990},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1722692275582},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1655991665949},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"018cab52ff696a6c78ebc01e10237a90a0c33603","modified":1722692275583},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1655991665950},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1655991665949},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/moment.ejs","hash":"acc72c3284fe906a4505132c3d9a4720d80e6fcb","modified":1722692275584},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"110e45e2d3433178f00f482adc863110f90c46d6","modified":1722692275584},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1722692275583},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1655991665951},{"_id":"themes/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"42850952e8f5858497fe774c2aff87b6563ab01e","modified":1722692275585},{"_id":"themes/hexo-theme-fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1639531757908},{"_id":"themes/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1639531757923},{"_id":"themes/hexo-theme-fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1655991666214},{"_id":"themes/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1639531757908},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1655991666204},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1639531757909},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1655991666108},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"66d5b045c0e54001d3c98c5901d72590fe08acc4","modified":1722692275622},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1655991666205},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1639531757918},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1722692275624},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/print.styl","hash":"571bd018e914bd0f7c5f89df874b5937937e5fa6","modified":1722692275623},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"bac20c8fb20276b08972df5ecc7a5850a72393f4","modified":1722692275624},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1655991666208},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1655991666207},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1655991666211},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1655991666210},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1655991666212},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1722692275625},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"6a35a450bd0a12f68fd92aac3f88b23475a98d46","modified":1722692275626},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"31c64c3fae4a0fc4747d8afeb72f7a9667c5326c","modified":1722692275626},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1639531757923},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1655991666127},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1655991666127},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1655991666129},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1655991666128},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1655991666129},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1639531757913},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1655991666130},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"88c3c2d99a097142a87eeec0c7c65a3789f25117","modified":1722692275621},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1655991666167},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1655991666199},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1655991666200},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1655991666201},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1639531757914},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1655991666201},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1639531757915},{"_id":"themes/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1655991666203},{"_id":"source/gallery/kantoku-colors.jpg","hash":"930462de406db12d63e1ef9c5d4f4744cd84c4d4","modified":1565784441249},{"_id":"source/_posts/Demo/COLORS_47646872_p0.jpg","hash":"930462de406db12d63e1ef9c5d4f4744cd84c4d4","modified":1594019844199},{"_id":"source/gallery/103834884.jpg","hash":"85af04ab8a54dfb4f8d08fff00c6174a401c0c42","modified":1689091918769},{"_id":"themes/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1655991666246},{"_id":"source/gallery/sv-5th-anni.jpg","hash":"0e8a8b2f6f423c0b1ee044fc6220dcd77f69914e","modified":1623929577430},{"_id":"source/gallery/1549865117004_x68h12oa.png","hash":"6205129b9e6fb757dbd132fd5208e1b80b0d08fc","modified":1565784441225},{"_id":"source/gallery/Arknights01.jpg","hash":"af487c5051d5a4823763a0ee55f8555c5edecff2","modified":1629859644871},{"_id":"source/gallery/machi.png","hash":"0cd041919ed475a9460a2784cda280a47552cf71","modified":1565784441258},{"_id":"source/gallery/FINAL FANTASY XIV SHADOWBRINGERS.png","hash":"f9d1313998001ab064db6769f981e08a5756041d","modified":1565784441241},{"_id":"source/gallery/64535234_p0.png","hash":"e1a39f86be632895de0674652c4eeee525da9bbd","modified":1629859644865},{"_id":"public/search.xml","hash":"310e5341f63cd6fe56e95deaae327635c27664b0","modified":1722876056438},{"_id":"public/content.json","hash":"89c1d5ac0c77284ff3f35885496b37a8fe5e4cae","modified":1722876056438},{"_id":"public/sitemap.xml","hash":"a57d38c1670774f12f09afbdf0cf8e4632dad034","modified":1722876056438},{"_id":"public/local-search.xml","hash":"748e439986a80e8fabc3e78e28fc3e5715b84d0c","modified":1722876056438},{"_id":"public/about/index.html","hash":"632d41d51cc1479b74f2ac5268010ada877bf21c","modified":1722876056438},{"_id":"public/categories/index.html","hash":"d19c4441f31249e85fab7a2388aa1406d23c95ec","modified":1722876056438},{"_id":"public/googlef50674fb2852e90b.html","hash":"b44042838af12964d82f7194db4acc10917816ad","modified":1722876056438},{"_id":"public/2024/08/03/spring-jpa-notes-01/index.html","hash":"4625acca7b8b3ff5e164ee53e55590ff26d212c6","modified":1722876056438},{"_id":"public/2021/12/17/lean-kotlin-01/index.html","hash":"ec13bbcd6ece499079ad7723c91cb5f3f24eefde","modified":1722876056438},{"_id":"public/2023/07/12/graalvm-with-spring-boot/index.html","hash":"75ea6572c4c65097286ad96cfa114c72c3521f92","modified":1722876056438},{"_id":"public/tags/index.html","hash":"1204fe71d146da307c2a9294347cc847d191e733","modified":1722876056438},{"_id":"public/2022/06/23/build-thin-jar-with-external-lib-by-gradle/index.html","hash":"3da949d7645c2a430139bb792cbcc54e14cc08aa","modified":1722876056438},{"_id":"public/2021/06/16/juc-dcl-singleton/index.html","hash":"1c1b8977403bfff0c83c4d8d262799fcc45c35e0","modified":1722876056438},{"_id":"public/2021/03/24/redis-note-01/index.html","hash":"e8c67b127a9ed76d85f269f32d25fb66898d50d5","modified":1722876056438},{"_id":"public/2021/03/10/uma-musume-note/index.html","hash":"e872dbcf0ba4d6ef823a5816e4db1ef5568b81e9","modified":1722876056438},{"_id":"public/2021/05/17/interview-note-01/index.html","hash":"c2d3dcbc096beb60971d3f298aae4d8cf9dc0da3","modified":1722876056438},{"_id":"public/2020/12/07/over-the-wall/index.html","hash":"6c5f8200877dd89a9be5bc82e4e123fef4027d31","modified":1722876056438},{"_id":"public/2020/10/06/learning-jpa-02/index.html","hash":"90f8c3c9e84c4f715d68a39a6116b6a0b649fbd8","modified":1722876056438},{"_id":"public/2020/09/08/context-of-reactor/index.html","hash":"4d012cfad1b8e9781bdf2f563de15708d60f5721","modified":1722876056438},{"_id":"public/2020/03/03/lean-pulishOn-of-reactor/index.html","hash":"2f3e5a8198a5158488c46abb0d3f5ac2d024f04d","modified":1722876056438},{"_id":"public/2020/10/06/learning-jpa-01/index.html","hash":"f4a67310254e1caf3368e5368a587c16c598f1e8","modified":1722876056438},{"_id":"public/2018/12/30/Nginx基础——Rewrite规则/index.html","hash":"8123d44d71a7694d00bfe635585c106e6efa85a2","modified":1722876056438},{"_id":"public/2019/08/11/DDD/index.html","hash":"27984c9796a0c8f9f424e8aef8d9df1c55b9f421","modified":1722876056438},{"_id":"public/2019/03/14/将项目部署在docker中/index.html","hash":"03e85030de2b54d449a286f8bba331e8ba134d2b","modified":1722876056438},{"_id":"public/2017/05/20/とある三秋 缒的一些摘抄/index.html","hash":"1ca3cd54fc72b0595a624b7e3ace472e22156e8f","modified":1722876056438},{"_id":"public/2017/04/20/Demo/index.html","hash":"dfc8680011d834430b10ba0bd1d448f8b2f76a02","modified":1722876056438},{"_id":"public/2017/03/20/hello-world/index.html","hash":"651fab8b0e0d4ee61f9865e312caa5350a32df58","modified":1722876056438},{"_id":"public/archives/index.html","hash":"1db4cd53013303f1005c3ebb9b25fab2bc52661f","modified":1722876056438},{"_id":"public/archives/2017/index.html","hash":"fd4931db8f9e9c9910c48da05bbe69279ba87bcc","modified":1722876056438},{"_id":"public/archives/2017/03/index.html","hash":"ef46c383eee0fdd77065daf49335b608ca21d115","modified":1722876056438},{"_id":"public/archives/page/2/index.html","hash":"3e9fc744412b4cffec14139f27e0b816682a4197","modified":1722876056438},{"_id":"public/archives/2017/04/index.html","hash":"86b2a4aa51b5fd044aefc94d75f1e5cea98fefa7","modified":1722876056438},{"_id":"public/archives/2017/05/index.html","hash":"24e2175559f650c3c530887a71c84ea79a238558","modified":1722876056438},{"_id":"public/archives/2018/index.html","hash":"8be239ab519b4749a5cf2c9ec4786fd30d512bfa","modified":1722876056438},{"_id":"public/archives/2019/index.html","hash":"6114e2f9b0e9a0ca1de9825368b397dd89189fc9","modified":1722876056438},{"_id":"public/archives/2018/12/index.html","hash":"741d0b468c029f7d4af8c5c04bf38e141d535680","modified":1722876056438},{"_id":"public/archives/2019/03/index.html","hash":"2ccb3f04a5ec8587491667938b4083f655a3337b","modified":1722876056438},{"_id":"public/archives/2019/08/index.html","hash":"1edd24bca66aa8ff97ab9a48aa1f596a75512f93","modified":1722876056438},{"_id":"public/archives/2020/index.html","hash":"375b1397516d04f333ae3bc7b6c2f63798269f73","modified":1722876056438},{"_id":"public/archives/2020/10/index.html","hash":"e3e59335a2c3d353de12095f75f4e677f05d0610","modified":1722876056438},{"_id":"public/archives/2020/09/index.html","hash":"1c1d3ea0a51ec34f189026c8dcd96e961c7b2bd1","modified":1722876056438},{"_id":"public/archives/2020/12/index.html","hash":"2bc01da4fcf59412a3fbcd13cb09166d80f8cee8","modified":1722876056438},{"_id":"public/archives/2020/03/index.html","hash":"7573028da3b67965209d522450c91d90a653e305","modified":1722876056438},{"_id":"public/archives/2021/index.html","hash":"657f6d65d36ed81a890095f524b1c74f0810add3","modified":1722876056438},{"_id":"public/archives/2021/03/index.html","hash":"27c5232f7080f73d8060792e685872b6de3f095e","modified":1722876056438},{"_id":"public/archives/2021/05/index.html","hash":"d837ff3776b3812a9b291e9e7e6594603a52c202","modified":1722876056438},{"_id":"public/archives/2021/12/index.html","hash":"815f341191e953ddce4d022b97d398bad9b4db7a","modified":1722876056438},{"_id":"public/archives/2022/index.html","hash":"d74cd9967de575f2947b87edaeb7b406c157fe1d","modified":1722876056438},{"_id":"public/archives/2022/06/index.html","hash":"0a1485d056ecd05ea2c97cc64dfbd13cf63a0c5b","modified":1722876056438},{"_id":"public/archives/2021/06/index.html","hash":"2bd94c64ce3f0e3fc72a7c78f3c49fe121ca086a","modified":1722876056438},{"_id":"public/archives/2023/index.html","hash":"f1cb4b8d71a3b12d3944073dcdb001f917bd8289","modified":1722876056438},{"_id":"public/archives/2023/07/index.html","hash":"3d1f26d01aef3010020183ff45f18c299dc801f9","modified":1722876056438},{"_id":"public/archives/2024/index.html","hash":"db7f8aa2e6774de6b883abf11d77b5aadc0d214b","modified":1722876056438},{"_id":"public/categories/Java/index.html","hash":"26e4b34a3046d8c791e6804aa7e485e573496f3c","modified":1722876056438},{"_id":"public/archives/2024/08/index.html","hash":"b1df33ec84ecb9bb0504d171dba687102bc1f3fc","modified":1722876056438},{"_id":"public/categories/ACG/index.html","hash":"43af9af422b1d76ad64ee6162338782df99d57a1","modified":1722876056438},{"_id":"public/categories/编程/index.html","hash":"06cfcbfb056ba49ed61e1ca4b2dd652bb29603c0","modified":1722876056438},{"_id":"public/categories/折腾记录/index.html","hash":"bca67dedd18e93a3f520edc26d25462c38927b1d","modified":1722876056438},{"_id":"public/categories/Java并发编程/index.html","hash":"94b5ceb930f545d4a5c023a5c15ff70174621ea5","modified":1722876056438},{"_id":"public/categories/Kotlin/index.html","hash":"72e7f2c1458b142eb5eadc80e157b9b8629218d2","modified":1722876056438},{"_id":"public/categories/Game/index.html","hash":"90a881adb6cf6d79444d6eaef8362f47046e7443","modified":1722876056438},{"_id":"public/categories/Java/Reactor/index.html","hash":"6f2713cd8167b9663d38a8fcb33c4866068b4edd","modified":1722876056438},{"_id":"public/categories/docker/index.html","hash":"309833d0e687cfd77c0061ed97b50bb9f1a80682","modified":1722876056438},{"_id":"public/index.html","hash":"aa4ec6abd8fb09a40153562b4c7e97b9c5450a83","modified":1722876056438},{"_id":"public/page/2/index.html","hash":"f33bb6769b1bc941c57964fd39f344aa85a6b628","modified":1722876056438},{"_id":"public/tags/CQRS/index.html","hash":"a548c0076268dbe9f866b31b6025fcb0d9dfdcbe","modified":1722876056438},{"_id":"public/tags/Event-Sourcing/index.html","hash":"8534c760bca7d0e0d70370775fb740b8dd588968","modified":1722876056438},{"_id":"public/tags/DDD/index.html","hash":"629fce3b3163baf764882587225eaac7a5e3626d","modified":1722876056438},{"_id":"public/tags/Java/index.html","hash":"016abdbd74e26e5bf48092b19a1af038e6b4cbe3","modified":1722876056438},{"_id":"public/tags/监督/index.html","hash":"6156fdfb0b062c4cb4bea967da201106e9c1c29b","modified":1722876056438},{"_id":"public/tags/格子裙/index.html","hash":"387532f5c39230abf04e0a4365afc5fb8e12c5ac","modified":1722876056438},{"_id":"public/tags/Kotlin/index.html","hash":"5b73180edb65c716dbe661c0016615b69f303426","modified":1722876056438},{"_id":"public/tags/放学五年目/index.html","hash":"7ba97360c37f7779b49c30a40be2b78dd80e8b0b","modified":1722876056438},{"_id":"public/tags/Gradle/index.html","hash":"f96165418beba3f732cfb45ee39a1d875bdaa041","modified":1722876056438},{"_id":"public/tags/Nginx/index.html","hash":"c34c82452350680fa571245263828f19fc4e2d84","modified":1722876056438},{"_id":"public/tags/转载/index.html","hash":"dd682997256782218d143ed7fc7be50e694a4f59","modified":1722876056438},{"_id":"public/tags/Reactor/index.html","hash":"1ba3f1d50a2969c087104af35dc4a68605455b9b","modified":1722876056438},{"_id":"public/tags/Spring/index.html","hash":"3ce9467c5a510ce8851c27ca5523eb6e1cf4b53f","modified":1722876056438},{"_id":"public/tags/Webflux/index.html","hash":"a729c65f035be343ea9f1daa415cbdd6f670a210","modified":1722876056438},{"_id":"public/tags/GraalVM/index.html","hash":"8bcdd8f8db40aae1a2189750cea02c20e0ad579b","modified":1722876056438},{"_id":"public/tags/tags/index.html","hash":"c0db6da731db68f466c3936bde6a110d0a23773d","modified":1722876056438},{"_id":"public/tags/MQ/index.html","hash":"adbf246b897b9d69c6d603277eaf6059013f3969","modified":1722876056438},{"_id":"public/tags/Micro-Service/index.html","hash":"e1d64dc083d6cf8d0e5d4b80473357d1a170cf00","modified":1722876056438},{"_id":"public/tags/J-U-C/index.html","hash":"e87d3b229ada464798bd4e2eadd776ddf6e7ec19","modified":1722876056438},{"_id":"public/tags/Redis/index.html","hash":"d971b2fc270aa7c21f2e2f6ae9f7bb76098ac7ec","modified":1722876056438},{"_id":"public/tags/协程/index.html","hash":"ba056fb2e1652ca5942b0aafeedf8706ba894e3e","modified":1722876056438},{"_id":"public/tags/JPA/index.html","hash":"2c509b1a51270ce4ef2c11f621e73b7f7d08994f","modified":1722876056438},{"_id":"public/tags/三秋-缒/index.html","hash":"e4f160996b03354af210359f1c2cdb293085b492","modified":1722876056438},{"_id":"public/tags/ORM/index.html","hash":"2e33e8f7c0f665c487674dd0f5e7be68add62bcb","modified":1722876056438},{"_id":"public/tags/Hibernate/index.html","hash":"88e40a0ced51b3532af39fc8007abe82d1250e22","modified":1722876056438},{"_id":"public/tags/摘抄/index.html","hash":"0d49a3a80f72cc54ee14ae2fb877bf9edcec7576","modified":1722876056438},{"_id":"public/tags/小说/index.html","hash":"8576f15780239696b50bc7f041c362ec76ca74e4","modified":1722876056438},{"_id":"public/tags/ウマ娘/index.html","hash":"118cdd80885fb91ecc17f0a37cce7ea0c8ba69f1","modified":1722876056438},{"_id":"public/tags/ops/index.html","hash":"dcb2a0daec8ab8ca3c1dbc59a7c4ed9a75c84328","modified":1722876056438},{"_id":"public/404.html","hash":"7b317b453047f53ddbc8c065c4018aa2ef02bfc5","modified":1722876056438},{"_id":"public/tags/docker/index.html","hash":"032065c94cece3037cbcccd49e92176d1399dc98","modified":1722876056438},{"_id":"public/links/index.html","hash":"f5dc80294740e1bc92249348ac78665e7b013596","modified":1722876056438},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1722876056438},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1722876056438},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1722876056438},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1722876056438},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1722876056438},{"_id":"public/CNAME","hash":"b3a5b49c89ec2b1f0ed9d8a618a917b0c984d9b0","modified":1722876056438},{"_id":"public/gallery/avatar.jpg","hash":"8a1247593a0c820defd9fdc6703eb7fec4105297","modified":1722876056438},{"_id":"public/gallery/逆光剑フラガラック.jpg","hash":"41407f197e4d6a28e9bd91a30b932151e53a2774","modified":1722876056438},{"_id":"public/2019/08/11/DDD/CQRS.jpg","hash":"29e69cab5ca143edb2f4cccc0d018b1bd59415b1","modified":1722876056438},{"_id":"public/2019/08/11/DDD/v2-35249fb2693f44bbe4bf48ea6755c55c_hd.jpg","hash":"fbd5a0de3112601fb2c07239ac5251b7cb2ad439","modified":1722876056438},{"_id":"public/2021/06/16/juc-dcl-singleton/volatile.png","hash":"36c8bcacf08e4bf680a214c789132ea14aab6049","modified":1722876056438},{"_id":"public/2019/08/11/DDD/v2-7c6a1b0c101d8f0cf5e89716bfb4d6a1_hd.jpg","hash":"707d5006a66988e3d369a466cac6cba2b49aec7d","modified":1722876056438},{"_id":"public/2019/08/11/DDD/p29.png","hash":"5e41fc0db4e30674d15c2922caa26051c709cd5b","modified":1722876056438},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1722876056438},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1722876056438},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1722876056438},{"_id":"public/css/main.css","hash":"e192abba34691c6d0698a1d61e3f95807e98a26e","modified":1722876056438},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1722876056438},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1722876056438},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1722876056438},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1722876056438},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1722876056438},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1722876056438},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1722876056438},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1722876056438},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1722876056438},{"_id":"public/2019/08/11/DDD/p28.png","hash":"76fe1dc8927db25f31671e299aac747c81c58685","modified":1722876056438},{"_id":"public/gallery/learning-jpa-01.jpg","hash":"332ef9293971019776332518b3a47742880099db","modified":1722876056438},{"_id":"public/gallery/learning-jpa-02.jpg","hash":"0eb5a155e0e5018aee367a9d6dbf35ce420b2191","modified":1722876056438},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1722876056438},{"_id":"public/gallery/Lain2.JPG","hash":"89bc035069a596826a2d12aae972e0af7ecf7f1f","modified":1722876056438},{"_id":"public/gallery/Lain.JPG","hash":"c7b463552df19f4985894bfd55a06ae962108f1e","modified":1722876056438},{"_id":"public/gallery/kantoku-colors.jpg","hash":"930462de406db12d63e1ef9c5d4f4744cd84c4d4","modified":1722876056438},{"_id":"public/2017/04/20/Demo/COLORS_47646872_p0.jpg","hash":"930462de406db12d63e1ef9c5d4f4744cd84c4d4","modified":1722876056438},{"_id":"public/gallery/103834884.jpg","hash":"85af04ab8a54dfb4f8d08fff00c6174a401c0c42","modified":1722876056438},{"_id":"public/gallery/sv-5th-anni.jpg","hash":"0e8a8b2f6f423c0b1ee044fc6220dcd77f69914e","modified":1722876056438},{"_id":"public/gallery/1549865117004_x68h12oa.png","hash":"6205129b9e6fb757dbd132fd5208e1b80b0d08fc","modified":1722876056438},{"_id":"public/gallery/Arknights01.jpg","hash":"af487c5051d5a4823763a0ee55f8555c5edecff2","modified":1722876056438},{"_id":"public/gallery/machi.png","hash":"0cd041919ed475a9460a2784cda280a47552cf71","modified":1722876056438},{"_id":"public/gallery/FINAL FANTASY XIV SHADOWBRINGERS.png","hash":"f9d1313998001ab064db6769f981e08a5756041d","modified":1722876056438},{"_id":"public/gallery/64535234_p0.png","hash":"e1a39f86be632895de0674652c4eeee525da9bbd","modified":1722876056438}],"Category":[{"name":"Java","_id":"clzh7x5w30004q4qle7533pqk"},{"name":"ACG","_id":"clzh7x5w6000bq4ql0lnth9ra"},{"name":"编程","_id":"clzh7x5wa000kq4ql1mlchuah"},{"name":"折腾记录","_id":"clzh7x5wb000qq4qlggsl4nqp"},{"name":"Reactor","parent":"clzh7x5w30004q4qle7533pqk","_id":"clzh7x5wc000xq4ql3275766l"},{"name":"Java并发编程","_id":"clzh7x5we0019q4qlf31z5rfz"},{"name":"Kotlin","_id":"clzh7x5we001eq4ql1ox3a5rs"},{"name":"Game","_id":"clzh7x5wn003cq4qlgrf7eqzq"},{"name":"docker","_id":"clzh7x5wn003eq4qlggs3ftj0"}],"Data":[{"_id":"fluid_config","data":{"favicon":"/gallery/avatar.jpg","apple_touch_icon":"/gallery/avatar.jpg","title_join_string":" - ","force_https":false,"code":{"copy_btn":true,"highlight":{"enable":true,"lib":"highlightjs","highlightjs":{"bg_color":true},"prismjs":{"style":"default","preprocess":true}}},"fun_features":{"typing":{"enable":false,"typeSpeed":40,"cursorChar":"_","loop":false},"anchorjs":{"enable":true,"element":"h1,h2,h3,h4,h5,h6","placement":"right","visible":"hover","icon":""},"mouse_click":{"enable":false,"style":"values"}},"dark_mode":{"enable":true,"default":"auto"},"color":{"body_bg_color":"#d8e9ef","body_bg_color_dark":"#181c27","navbar_bg_color":"#4ea1d3","navbar_bg_color_dark":"#1f3144","navbar_text_color":"white","navbar_text_color_dark":"#d0d0d0","text_color":"#3c4858","text_color_dark":"#c4c6c9","sec_text_color":"#454552","sec_text_color_dark":"#a7a9ad","post_text_color":"#2c3e50","post_text_color_dark":"#c4c6c9","post_heading_color":"#1a202c","post_heading_color_dark":"#c4c6c9","post_link_color":"#4EA1D3","post_link_color_dark":"#1589e9","link_hover_color":"#e85a71","link_hover_color_dark":"#30a9de","link_hover_bg_color":"#f8f9fa","link_hover_bg_color_dark":"#364151","board_color":"#fff","board_color_dark":"#252d38"},"font":{"font_size":"16px","font_family":null,"code_font_size":"85%"},"custom_js":null,"custom_css":null,"custom_html":"","web_analytics":{"enable":true,"baidu":null,"google":"UA-177901991-1","gtag":"UA-177901991-1","tencent":{"sid":null,"cid":null},"woyaola":null,"cnzz":null,"leancloud":{"app_id":null,"app_key":null,"server_url":null}},"lazyload":{"enable":true,"onlypost":false},"daovoice":{"enable":false,"appid":""},"aplayer":{"enable":false,"autoplay":false,"loop":"all","order":"random","theme":"#b7daff","songs":[{"name":"name","artist":"artist","url":"/songs/test.mp3","cover":"/img/cover.jpg"},{"name":"name","artist":"artist","url":"https://...url.mp3","cover":"https://...cover.jpg"}]},"version":{"check":false},"navbar":{"blog_title":"Kurenai's World","ground_glass":{"enable":false,"px":3,"alpha":0.7},"menu":[{"key":"home","link":"/","icon":"iconfont icon-home-fill"},{"key":"archive","link":"/archives/","icon":"iconfont icon-archive-fill"},{"key":"category","link":"/categories/","icon":"iconfont icon-category-fill"},{"key":"tag","link":"/tags/","icon":"iconfont icon-tags-fill"},{"key":"Github","link":"https://github.com/KurenaiRyu","icon":"iconfont icon-github-fill"},{"key":"B站","link":"https://space.bilibili.com/696122","icon":"iconfont icon-bilibili-fill"},{"key":"about","link":"/about/","icon":"iconfont icon-user-fill"}]},"search":{"enable":true,"path":"/local-search.xml","generate_path":"/local-search.xml","field":"post","content":true},"scroll_down_arrow":{"enable":true,"banner_height_limit":90,"scroll_after_turning_page":true},"banner:parallax":true,"footer":{"statistics":{"enable":false,"source":"busuanzi","pv_format":"总访问量 {} 次","uv_format":"总访客数 {} 人"},"beian":{"enable":false,"icp_text":"京ICP证123456号","police_text":"京公网安备12345678号","police_code":12345678,"police_icon":"/img/police_beian.png"}},"scroll_top_arrow":{"enable":true},"index":{"banner_img":"/gallery/machi.png","banner_img_height":100,"banner_mask_alpha":0.3,"post_default_img":"","slogan":{"enable":true,"text":"无星夜的咏叹调"},"auto_excerpt":{"enable":true},"post_url_target":"_self","post_meta":{"date":true,"category":true,"tag":true}},"page":{"banner_img":"/gallery/machi.png","banner_img_height":60,"banner_mask_alpha":0.3},"post":{"banner_img":"/gallery/machi.png","banner_img_height":70,"banner_mask_alpha":0.3,"meta":{"author":{"enable":false},"date":{"enable":true,"format":"LL a"},"wordcount":{"enable":true,"format":"{} 字"},"min2read":{"enable":true,"format":"{} 分钟","words":70},"views":{"enable":false,"source":"busuanzi","format":"{} 次"}},"updated":{"enable":true,"content":"本文最后更新于：","relative":true},"toc":{"enable":true,"headingSelector":"h1,h2,h3,h4,h5,h6","collapseDepth":3},"copyright":{"enable":true,"content":"本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-sa/4.0/deed.zh\" rel=\"nofollow noopener\">CC BY-SA 4.0 协议</a> ，转载请注明出处！"},"prev_next":{"enable":true},"custom":{"enable":false,"content":"<img src=\"https://octodex.github.com/images/jetpacktocat.png\" class=\"rounded mx-auto d-block mt-5\" style=\"width:150px; height:150px;\">"},"image_zoom":{"enable":true},"footnote":{"enable":true,"header":""},"math":{"enable":false,"specific":false,"engine":"mathjax"},"mermaid":{"enable":false,"specific":false,"options":{"theme":"default"}},"comments":{"enable":true,"type":"utterances"}},"utterances":{"repo":"KurenaiRyu/commit-utterances","issue_term":"title","label":"✨💬✨","theme":"github-light","theme_dark":"github-dark","crossorigin":"anonymous"},"disqus":{"shortname":null,"disqusjs":false,"apikey":null},"gitalk":{"clientID":null,"clientSecret":null,"repo":null,"owner":null,"admin":["name"],"id":"location.pathname","language":"zh-CN","labels":["Gitalk"],"perPage":10,"pagerDirection":"last","distractionFreeMode":false,"createIssueManually":true},"valine":{"appid":null,"appkey":null,"placeholder":"说点什么","path":"window.location.pathname","avatar":"retro","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-CN","highlight":false,"recordIP":false,"serverURLs":null},"changyan":{"appid":"","appkey":""},"livere":{"uid":""},"remark42":{"host":"https://remark.haoyizebo.com","site_id":"haoyizebo","max_shown_comments":10,"locale":"zh"},"archive":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null},"category":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"post_limit":10,"order_by":"-length","collapse_depth":0},"tag":{"banner_img":"/img/default.png","banner_img_height":80,"banner_mask_alpha":0.3,"subtitle":null,"tagcloud":{"min_font":15,"max_font":30,"unit":"px","start_color":"#BBBBEE","end_color":"#337ab7"}},"about":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"avatar":"/gallery/avatar.jpg","name":"Kurenai","introduce":"IDOL M@STER","icons":[{"class":"iconfont icon-github-fill","link":"https://github.com/KurenaiRyu","tip":"GitHub"},{"class":"iconfont icon-bilibili-fill","link":"https://space.bilibili.com/696122","tip":"Blibli"}]},"page404":{"banner_img":"/img/default.png","banner_img_height":85,"banner_mask_alpha":0.3,"subtitle":"Page not found"},"links":{"banner_img":"/img/default.png","banner_img_height":60,"banner_mask_alpha":0.3,"subtitle":null,"items":[{"title":"Fluid Docs","intro":"主题使用指南","link":"https://hexo.fluid-dev.com/docs/","image":"/img/favicon.png"},{"title":"Fluid Repo","intro":"主题 GitHub 仓库","link":"https://github.com/fluid-dev/hexo-theme-fluid","image":"/img/favicon.png"},{"title":"Fluid Example","intro":"主题操作示例","link":"https://hexo.fluid-dev.com/docs/example/","image":"/img/favicon.png"}]}}}],"Page":[{"title":"about","date":"2020-07-06T09:40:18.000Z","layout":"about","_content":"<img  style=\"background-color: transparent;float: right;\" src=\"https://github-readme-stats.vercel.app/api?username=KurenaiRyu&show_icons=true&hide_border=true&icon_color=586069&title_color=a0a9af\" alt=\"\">\n\n## I'm a/an ...\n- Windows user\n- Android user\n- Office worker\n- ACGN lover\n- Java programmer\n  <img style=\"background-color: transparent;float: right;\" src=\"https://count.getloli.com/get/@kurenai.moe?theme=rule34\" alt=\"\">\n\n## I’m currently learning ...\n\n<img style=\"background-color: transparent;float: right;\" src=\"https://bgm.tv/chart/img/161589\" alt=\"\">\n\n- Japanese\n- [Netty](https://github.com/netty/netty)\n- Everything\n\n## PGP\nPrimary UID: Kurenai \\<kurenai233@yahoo.com\\>\nFingerprint: DC5E 371D 93BE DB5D CA96  0AB6 98FA 0519 E92E D1B9\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-07-06 17:40:18\nlayout: about\n---\n<img  style=\"background-color: transparent;float: right;\" src=\"https://github-readme-stats.vercel.app/api?username=KurenaiRyu&show_icons=true&hide_border=true&icon_color=586069&title_color=a0a9af\" alt=\"\">\n\n## I'm a/an ...\n- Windows user\n- Android user\n- Office worker\n- ACGN lover\n- Java programmer\n  <img style=\"background-color: transparent;float: right;\" src=\"https://count.getloli.com/get/@kurenai.moe?theme=rule34\" alt=\"\">\n\n## I’m currently learning ...\n\n<img style=\"background-color: transparent;float: right;\" src=\"https://bgm.tv/chart/img/161589\" alt=\"\">\n\n- Japanese\n- [Netty](https://github.com/netty/netty)\n- Everything\n\n## PGP\nPrimary UID: Kurenai \\<kurenai233@yahoo.com\\>\nFingerprint: DC5E 371D 93BE DB5D CA96  0AB6 98FA 0519 E92E D1B9\n","updated":"2022-02-28T14:19:32.225Z","path":"about/index.html","comments":1,"_id":"clzh7x5vx0000q4ql4o80frm2","content":"<img style=\"background-color: transparent;float: right;\" src=\"https://github-readme-stats.vercel.app/api?username=KurenaiRyu&show_icons=true&hide_border=true&icon_color=586069&title_color=a0a9af\" alt>\n\n<h2 id=\"I’m-a-an-…\"><a href=\"#I’m-a-an-…\" class=\"headerlink\" title=\"I’m a/an …\"></a>I’m a/an …</h2><ul>\n<li>Windows user</li>\n<li>Android user</li>\n<li>Office worker</li>\n<li>ACGN lover</li>\n<li>Java programmer<img style=\"background-color: transparent;float: right;\" src=\"https://count.getloli.com/get/@kurenai.moe?theme=rule34\" alt></li>\n</ul>\n<h2 id=\"I’m-currently-learning-…\"><a href=\"#I’m-currently-learning-…\" class=\"headerlink\" title=\"I’m currently learning …\"></a>I’m currently learning …</h2><img style=\"background-color: transparent;float: right;\" src=\"https://bgm.tv/chart/img/161589\" alt>\n\n<ul>\n<li>Japanese</li>\n<li><a href=\"https://github.com/netty/netty\">Netty</a></li>\n<li>Everything</li>\n</ul>\n<h2 id=\"PGP\"><a href=\"#PGP\" class=\"headerlink\" title=\"PGP\"></a>PGP</h2><p>Primary UID: Kurenai &lt;<a href=\"mailto:&#107;&#117;&#x72;&#x65;&#x6e;&#97;&#x69;&#x32;&#51;&#x33;&#64;&#x79;&#x61;&#x68;&#x6f;&#111;&#46;&#99;&#x6f;&#x6d;\">&#107;&#117;&#x72;&#x65;&#x6e;&#97;&#x69;&#x32;&#51;&#x33;&#64;&#x79;&#x61;&#x68;&#x6f;&#111;&#46;&#99;&#x6f;&#x6d;</a>&gt;<br>Fingerprint: DC5E 371D 93BE DB5D CA96  0AB6 98FA 0519 E92E D1B9</p>\n","excerpt":"","more":"<img style=\"background-color: transparent;float: right;\" src=\"https://github-readme-stats.vercel.app/api?username=KurenaiRyu&show_icons=true&hide_border=true&icon_color=586069&title_color=a0a9af\" alt>\n\n<h2 id=\"I’m-a-an-…\"><a href=\"#I’m-a-an-…\" class=\"headerlink\" title=\"I’m a/an …\"></a>I’m a/an …</h2><ul>\n<li>Windows user</li>\n<li>Android user</li>\n<li>Office worker</li>\n<li>ACGN lover</li>\n<li>Java programmer<img style=\"background-color: transparent;float: right;\" src=\"https://count.getloli.com/get/@kurenai.moe?theme=rule34\" alt></li>\n</ul>\n<h2 id=\"I’m-currently-learning-…\"><a href=\"#I’m-currently-learning-…\" class=\"headerlink\" title=\"I’m currently learning …\"></a>I’m currently learning …</h2><img style=\"background-color: transparent;float: right;\" src=\"https://bgm.tv/chart/img/161589\" alt>\n\n<ul>\n<li>Japanese</li>\n<li><a href=\"https://github.com/netty/netty\">Netty</a></li>\n<li>Everything</li>\n</ul>\n<h2 id=\"PGP\"><a href=\"#PGP\" class=\"headerlink\" title=\"PGP\"></a>PGP</h2><p>Primary UID: Kurenai &lt;<a href=\"mailto:&#107;&#117;&#x72;&#x65;&#x6e;&#97;&#x69;&#x32;&#51;&#x33;&#64;&#x79;&#x61;&#x68;&#x6f;&#111;&#46;&#99;&#x6f;&#x6d;\">&#107;&#117;&#x72;&#x65;&#x6e;&#97;&#x69;&#x32;&#51;&#x33;&#64;&#x79;&#x61;&#x68;&#x6f;&#111;&#46;&#99;&#x6f;&#x6d;</a>&gt;<br>Fingerprint: DC5E 371D 93BE DB5D CA96  0AB6 98FA 0519 E92E D1B9</p>\n"},{"_content":"google-site-verification: googlef50674fb2852e90b.html","source":"googlef50674fb2852e90b.html","raw":"google-site-verification: googlef50674fb2852e90b.html","date":"2021-08-25T02:47:24.945Z","updated":"2021-08-25T02:47:24.945Z","path":"googlef50674fb2852e90b.html","title":"","comments":1,"layout":"page","_id":"clzh7x5w10002q4ql1zq7gshe","content":"google-site-verification: googlef50674fb2852e90b.html","excerpt":"","more":"google-site-verification: googlef50674fb2852e90b.html"},{"title":"categories","date":"2017-02-25T13:18:30.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-25 21:18:30\ntype: \"categories\"\n---\n","updated":"2019-08-14T12:07:21.220Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clzh7x5w40006q4ql1n4fbcdj","content":"","excerpt":"","more":""},{"title":"tags","date":"2017-02-25T12:45:46.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-02-25 20:45:46\ntype: \"tags\"\n---\n","updated":"2019-08-14T12:07:21.260Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clzh7x5w50008q4ql7iuogw61","content":"","excerpt":"","more":""}],"Post":[{"title":"Re：从零开始的领域驱动设计","date":"2019-08-10T16:00:00.000Z","comments":1,"toc":true,"_content":"领域驱动设计(Domain-driven design)，缩写为DDD。以领域设计为驱动，构建整一个系统。\n\n这个设计思想是在微服务开始流行时逐渐变得火爆的，因为其设计理念非常适合分布式的微服务拆分。\n<!--more-->\n\n> 我声明一点，本文章其实都是东拼西凑的，里面所表达的仅仅是个人的理解（我没有读完ddd那本书）\n\n# 通用语言(Ubiquitous Language)\n通用语言其实就是把模型通过大家都能够理解的语言表达出来。\n\n通常我们在开发业务的过程中都是先去调研，了解其业务的具体细节，并商讨大致的程序设计，然后经过开发人员转化成为代码，在这个过程中交流是单向性的，直到下一次需要展示或者有理解出现错误时才会与客户或者是业务人员再次交流。\n\n而业务人员那边通常也只能通过表面的程序看问题，无法理解其实际运作是否符合业务人员所想，这可能将导致程序在错误的方向上越走越远\n\n领域驱动设计是需要建立一个通用语言的，这需要领域专家(即对这些业务整体非常熟悉的人)与开发人员一同参与\n\n我们需要把程序设计上的事情通过一个通用的语言表述出去使领域专家能够理解我们是如何通过程序设计业务的，而领域专家也同样需要把那些专业名词，业务场景用通用语言描述出来\n\n当我们有了通用语言后，我们就能够在建立领域对象的时候听取专家的意见，同时能够让专家理解领域对象是否符合他们的预期  \n\n而形成通用语言是不容易的，因为其答案并不唯一，不同的人会有不同的理解，从而导致不同的答案。但我们可以试着从UML或是伪代码着手\n\n\n[航运例子](http://note.youdao.com/noteshare?id=3834bfbae566164a48b0df825fc8134d&sub=B24036AF24534B79875E2C0B5D4C886F)\n\n# 层结构(Layered Architecture)\n![Layered Architecture](p29.png)\n- User Interface  \n负责向用户展现信息，并且会解析用户行为，即常说的展现层。\n- Application Layer  \n应用层没有任何的业务逻辑代码，它很简单，它主要为程序提供任务处理。\n- Domain Layer  \n这一层包含有关领域的信息，是业务的核心，领域模型的状态都直接或间接（持久化至数据库）存储在这一层。\n- Infrastructure Layer  \n为其他层提供底层依赖操作。\n\n# 模型关系图(Model-Driven Design)\n![Model-Driven Design](p28.png)\n## 服务(Services)\n当我们在分析某一领域时，一直在尝试如何将信息转化为领域模型，但并非所有的点我们都能用Model来涵盖。对象应当有属性，状态和行为，但有时领域中有一些行为是无法映射到具体的对象中的，我们也不能强行将其放入在某一个模型对象中，而将其单独作为一个方法又没有地方，此时就需要服务\n\n## 工厂(Factories)  \n在大型系统中，实体和聚合通常是很复杂的，这就导致了很难去通过构造器来创建对象。工厂就决解了这个问题，它把创建对象的细节封装起来，巧妙的实现了依赖反转。当然对聚合也适用（当建立了聚合根时，其他对象可以自动创建）\n\n## 仓库(Repository)  \n仓库封装了获取对象的逻辑，领域对象无须和底层数据库交互，它只需要从仓库中获取对象即可。仓库可以存储对象的引用，当一个对象被创建后，它可能会被存储到仓库中，那么下次就可以从仓库取。如果用户请求的数据没在仓库中，则会从数据库里取，这就减少了底层交互的次数\n\n## 边界上下文(Bounded Context)\n简单来说就是定义该领域模型的适用范围以及使用场景。\n\n可以这样理解：\n- 边界(Bounded)\n即有边界的，表示领域模型有边界；这个边界定义了模型的适用范围，以便让负责该模型的团队知道什么该在模型中实现，什么不该；\n\n- 上下文(Context)\n即领域模型的产生是在某个上下文中产生的；上下文是一个和环境相关的概念。比如一次头脑风暴会议大家达成了一个模型，那这次会议的讨论就是该模型的上下文；比如某本书中谈到了某个东西，那这个东西的上下文就是那本书，那个东西要有意义的前提离不开那本书这个上下文；所以，上下文是模型有意义的前提；\n\n## 实体(Entity) 和 值对象(ValueObject)    \n一言蔽之，实体大致可以理解为我们传统开发的实体，但是他具有自己的行为，而不是POJO(只具有简单的getter,setter)；值对象是指描述一个实体某个属性的对象。\n当然，这些都是需要在上面所说的BoundedContext被指定的前提下讨论。\n\n举个例子：\n在电商系统我们现在分成两个模块，一个商品模块，一个订单模块\n订单对象中有收货地址(address)\n```java\nclass Order {\n    int id;\n    String address; \n}\n```\n我们把address扩展开来\n```java\nclass Order {\n    int id;\n    Address address; \n}\n\nclass Address {\n    String province;//省\n    String city;//市\n    String street;//街道\n}\n```\n现在Address是一个对象了，但是我们不会认为他是一个实体，因为在这个订单模块中它只是描述了订单中的收货地址而已，仅仅只是order上的一个值，几个内部的值所组合出的抽象，你完全可以把它理解为是一个Map:\n```java\nclass Order {\n    int id;\n    Map<String, String> address;\n    \n    //address Map{\"province\":\"\",\"city\":\"\",\"street\":\"\"} \n}\n```\n\n这跟java中String对象非常类似，String对象是不会进行修改的，如果你将新的一串字符串重新赋值给一个String对象，实际上等于new了一个String，地址是变化了的，不再是同一个对象。\n\n所以ValueObject有这样几个特点:\n- 没有标识(唯一标识)\n- 不可变(只读)\n- 不具备生命周期\n    \n## 聚合(Aggregates) 和 聚合(Aggregate Root)  \n**聚合**可以看作是多个实体之间的组合，而每个聚合都有一个根实体，叫**聚合根**。\n\n在DDD当中，聚合外部想要访问聚合内的信息，必须通过**聚合根**进行访问。\n\n- 如何识别聚合和聚合根？\n首先一个边界上下文(Bounded Context)可能包含多个聚合，每个聚合都有一个聚合根。\n    1. 找出哪些实体可能是聚合根\n    2. 逐个分析每个聚合根的边界，即该聚合根应该聚合哪些实体或值对象\n    3. 划分边界上下文\n\n- 如何确定聚合边界？\n边界的确定法则是根据不变性约束规则（Invariant）:\n    - 聚合边界内必须具有哪些信息，如果没有这些信息就不能称为一个有效的聚合\n    - 聚合内的某些对象的状态必须满足某个业务规则 \n\n- 如何找到聚合根？\n如果存在一个业务操作是完全面向某个实体，那么这个实体就可能是一个聚合根\n\n### 例子分析\n>Order（一 个订单）必须有对应的客户信息，否则就不能称为一个有效的Order  \n同理，Order对OrderLineItem有不变性约束，Order也必须至少有一个OrderLineItem(一条订单明细)，否则就不能称为一个有效的Order  \n另外，Order中的任何OrderLineItem的数量都不能为0，否则认为该OrderLineItem是无效的，同时可以推理出Order也可能是无效的。因为如果允许一个OrderLineItem的数量为0的话，就意味着可能会出现所有OrderLineItem的数量都为0，这就导致整个Order的总价为0，这是没有任何意义的，是不允许的，从而导致Order无效  \n所以，必须要求 Order中所有的OrderLineItem的数量都不能为0  \n那么现在可以确定的是Order必须包含一些OrderLineItem，那么应该是通 过引用的方式还是ID关联的方式来表达这种包含关系呢？  \n这就需要引出另外一个问题，那就是先要分析出是OrderLineItem是否是一个独立的聚合根。  \n回答了这个问题，那么根据上面的规则就知道应该用对象引用还是用ID关联了。那么OrderLineItem是否是一个独立的聚合根呢？因为聚合根意 味着是某个聚合的根，而聚合有代表着某个上下文边界，而一个上下文边界又代表着某个独立的业务场景，这个业务场景操作的唯一对象总是该上下文边界内的聚合 根。想到这里，我们就可以想想，有没有什么场景是会绕开订单直接对某个订单明细进行操作的。也就是在这种情况下，我们 是以OrderLineItem为主体，完全是在面向OrderLineItem在做业务操作。有这种业务场景吗？没有，我们对 OrderLineItem的所有的操作都是以Order为出发点，我们总是会面向整个Order在做业务操作，比如向Order中增加明细，修改 Order的某个明细对应的商品的购买数量，从Order中移除某个明细，等等类似操作，我们从来不会从OrderlineItem为出发点去执行一些业 务操作；另外，从生命周期的角度去理解，那么OrderLineItem离开Order没有任何存在的意义，也就是说OrderLineItem的生命周 期是从属于Order的。所以，我们可以很确信的回答，OrderLineItem是一个实体。\n\n# Event Souring(事件溯源)\nEvent Souring是Martin Fowler提出的一种架构模式，其特点是：\n- 整个系统由事件进行驱动\n- 事件是一等公民，系统的基础数据是事件，事件需要被储存在数据库中\n- 业务数据只是由事件产生的视图，不一定需要存储在数据库\n\n这里展示的例子是一个银行账户经历的几个事件：创建 -> 存款300 -> 存款100 -> 取出200\n![Event Souring](v2-7c6a1b0c101d8f0cf5e89716bfb4d6a1_hd.jpg)\n\n在这样的设计下，每个对象都需要经历一系列的事件才会转化成现在的状态，当我们只需要进行查询的时候，这些操作未免显得太过累赘，所以我们可以把对象的最终状态存入一个视图数据库，当需要查询的时候直接查询这个数据库即可\n![Event Souring](v2-35249fb2693f44bbe4bf48ea6755c55c_hd.jpg)\n\n# CQRS(命令查询责任分离)\nCQRS简单理解就是读写分离，但它的实现可能相对其定义要复杂些，并且通常都是会和Event Souring一起被提及  \n![CQRS + Event Souring](CQRS.jpg)\n\n参考资料：\n- 《领域驱动设计：软件核心复杂性应对之道》  \n- [深入浅出Event Sourcing和CQRS](https://zhuanlan.zhihu.com/p/38968012)\n- [Re：从零开始的领域驱动设计](https://www.cnkirito.moe/Re-DDD/)\n- [一个DDD指导下的实体类设计案例](https://www.cnkirito.moe/DDD-practice/)\n- [DDD领域驱动设计基本理论知识总结](https://www.cnblogs.com/netfocus/archive/2011/10/10/2204949.html)\n- [多研究些架构，少谈些框架](http://newtech.club/2017/06/09/%E5%A4%9A%E7%A0%94%E7%A9%B6%E4%BA%9B%E6%9E%B6%E6%9E%84%EF%BC%8C%E5%B0%91%E8%B0%88%E4%BA%9B%E6%A1%86%E6%9E%B6%EF%BC%881%EF%BC%89-%E8%AE%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/)\n\n\n","source":"_posts/DDD.md","raw":"---\ntitle: Re：从零开始的领域驱动设计\ndate: 2019/8/11\ncategories: \n    - Java\ntags: \n    - DDD\n    - CQRS\n    - Event Sourcing\n    - Java\ncomments: true \ntoc: true\n---\n领域驱动设计(Domain-driven design)，缩写为DDD。以领域设计为驱动，构建整一个系统。\n\n这个设计思想是在微服务开始流行时逐渐变得火爆的，因为其设计理念非常适合分布式的微服务拆分。\n<!--more-->\n\n> 我声明一点，本文章其实都是东拼西凑的，里面所表达的仅仅是个人的理解（我没有读完ddd那本书）\n\n# 通用语言(Ubiquitous Language)\n通用语言其实就是把模型通过大家都能够理解的语言表达出来。\n\n通常我们在开发业务的过程中都是先去调研，了解其业务的具体细节，并商讨大致的程序设计，然后经过开发人员转化成为代码，在这个过程中交流是单向性的，直到下一次需要展示或者有理解出现错误时才会与客户或者是业务人员再次交流。\n\n而业务人员那边通常也只能通过表面的程序看问题，无法理解其实际运作是否符合业务人员所想，这可能将导致程序在错误的方向上越走越远\n\n领域驱动设计是需要建立一个通用语言的，这需要领域专家(即对这些业务整体非常熟悉的人)与开发人员一同参与\n\n我们需要把程序设计上的事情通过一个通用的语言表述出去使领域专家能够理解我们是如何通过程序设计业务的，而领域专家也同样需要把那些专业名词，业务场景用通用语言描述出来\n\n当我们有了通用语言后，我们就能够在建立领域对象的时候听取专家的意见，同时能够让专家理解领域对象是否符合他们的预期  \n\n而形成通用语言是不容易的，因为其答案并不唯一，不同的人会有不同的理解，从而导致不同的答案。但我们可以试着从UML或是伪代码着手\n\n\n[航运例子](http://note.youdao.com/noteshare?id=3834bfbae566164a48b0df825fc8134d&sub=B24036AF24534B79875E2C0B5D4C886F)\n\n# 层结构(Layered Architecture)\n![Layered Architecture](p29.png)\n- User Interface  \n负责向用户展现信息，并且会解析用户行为，即常说的展现层。\n- Application Layer  \n应用层没有任何的业务逻辑代码，它很简单，它主要为程序提供任务处理。\n- Domain Layer  \n这一层包含有关领域的信息，是业务的核心，领域模型的状态都直接或间接（持久化至数据库）存储在这一层。\n- Infrastructure Layer  \n为其他层提供底层依赖操作。\n\n# 模型关系图(Model-Driven Design)\n![Model-Driven Design](p28.png)\n## 服务(Services)\n当我们在分析某一领域时，一直在尝试如何将信息转化为领域模型，但并非所有的点我们都能用Model来涵盖。对象应当有属性，状态和行为，但有时领域中有一些行为是无法映射到具体的对象中的，我们也不能强行将其放入在某一个模型对象中，而将其单独作为一个方法又没有地方，此时就需要服务\n\n## 工厂(Factories)  \n在大型系统中，实体和聚合通常是很复杂的，这就导致了很难去通过构造器来创建对象。工厂就决解了这个问题，它把创建对象的细节封装起来，巧妙的实现了依赖反转。当然对聚合也适用（当建立了聚合根时，其他对象可以自动创建）\n\n## 仓库(Repository)  \n仓库封装了获取对象的逻辑，领域对象无须和底层数据库交互，它只需要从仓库中获取对象即可。仓库可以存储对象的引用，当一个对象被创建后，它可能会被存储到仓库中，那么下次就可以从仓库取。如果用户请求的数据没在仓库中，则会从数据库里取，这就减少了底层交互的次数\n\n## 边界上下文(Bounded Context)\n简单来说就是定义该领域模型的适用范围以及使用场景。\n\n可以这样理解：\n- 边界(Bounded)\n即有边界的，表示领域模型有边界；这个边界定义了模型的适用范围，以便让负责该模型的团队知道什么该在模型中实现，什么不该；\n\n- 上下文(Context)\n即领域模型的产生是在某个上下文中产生的；上下文是一个和环境相关的概念。比如一次头脑风暴会议大家达成了一个模型，那这次会议的讨论就是该模型的上下文；比如某本书中谈到了某个东西，那这个东西的上下文就是那本书，那个东西要有意义的前提离不开那本书这个上下文；所以，上下文是模型有意义的前提；\n\n## 实体(Entity) 和 值对象(ValueObject)    \n一言蔽之，实体大致可以理解为我们传统开发的实体，但是他具有自己的行为，而不是POJO(只具有简单的getter,setter)；值对象是指描述一个实体某个属性的对象。\n当然，这些都是需要在上面所说的BoundedContext被指定的前提下讨论。\n\n举个例子：\n在电商系统我们现在分成两个模块，一个商品模块，一个订单模块\n订单对象中有收货地址(address)\n```java\nclass Order {\n    int id;\n    String address; \n}\n```\n我们把address扩展开来\n```java\nclass Order {\n    int id;\n    Address address; \n}\n\nclass Address {\n    String province;//省\n    String city;//市\n    String street;//街道\n}\n```\n现在Address是一个对象了，但是我们不会认为他是一个实体，因为在这个订单模块中它只是描述了订单中的收货地址而已，仅仅只是order上的一个值，几个内部的值所组合出的抽象，你完全可以把它理解为是一个Map:\n```java\nclass Order {\n    int id;\n    Map<String, String> address;\n    \n    //address Map{\"province\":\"\",\"city\":\"\",\"street\":\"\"} \n}\n```\n\n这跟java中String对象非常类似，String对象是不会进行修改的，如果你将新的一串字符串重新赋值给一个String对象，实际上等于new了一个String，地址是变化了的，不再是同一个对象。\n\n所以ValueObject有这样几个特点:\n- 没有标识(唯一标识)\n- 不可变(只读)\n- 不具备生命周期\n    \n## 聚合(Aggregates) 和 聚合(Aggregate Root)  \n**聚合**可以看作是多个实体之间的组合，而每个聚合都有一个根实体，叫**聚合根**。\n\n在DDD当中，聚合外部想要访问聚合内的信息，必须通过**聚合根**进行访问。\n\n- 如何识别聚合和聚合根？\n首先一个边界上下文(Bounded Context)可能包含多个聚合，每个聚合都有一个聚合根。\n    1. 找出哪些实体可能是聚合根\n    2. 逐个分析每个聚合根的边界，即该聚合根应该聚合哪些实体或值对象\n    3. 划分边界上下文\n\n- 如何确定聚合边界？\n边界的确定法则是根据不变性约束规则（Invariant）:\n    - 聚合边界内必须具有哪些信息，如果没有这些信息就不能称为一个有效的聚合\n    - 聚合内的某些对象的状态必须满足某个业务规则 \n\n- 如何找到聚合根？\n如果存在一个业务操作是完全面向某个实体，那么这个实体就可能是一个聚合根\n\n### 例子分析\n>Order（一 个订单）必须有对应的客户信息，否则就不能称为一个有效的Order  \n同理，Order对OrderLineItem有不变性约束，Order也必须至少有一个OrderLineItem(一条订单明细)，否则就不能称为一个有效的Order  \n另外，Order中的任何OrderLineItem的数量都不能为0，否则认为该OrderLineItem是无效的，同时可以推理出Order也可能是无效的。因为如果允许一个OrderLineItem的数量为0的话，就意味着可能会出现所有OrderLineItem的数量都为0，这就导致整个Order的总价为0，这是没有任何意义的，是不允许的，从而导致Order无效  \n所以，必须要求 Order中所有的OrderLineItem的数量都不能为0  \n那么现在可以确定的是Order必须包含一些OrderLineItem，那么应该是通 过引用的方式还是ID关联的方式来表达这种包含关系呢？  \n这就需要引出另外一个问题，那就是先要分析出是OrderLineItem是否是一个独立的聚合根。  \n回答了这个问题，那么根据上面的规则就知道应该用对象引用还是用ID关联了。那么OrderLineItem是否是一个独立的聚合根呢？因为聚合根意 味着是某个聚合的根，而聚合有代表着某个上下文边界，而一个上下文边界又代表着某个独立的业务场景，这个业务场景操作的唯一对象总是该上下文边界内的聚合 根。想到这里，我们就可以想想，有没有什么场景是会绕开订单直接对某个订单明细进行操作的。也就是在这种情况下，我们 是以OrderLineItem为主体，完全是在面向OrderLineItem在做业务操作。有这种业务场景吗？没有，我们对 OrderLineItem的所有的操作都是以Order为出发点，我们总是会面向整个Order在做业务操作，比如向Order中增加明细，修改 Order的某个明细对应的商品的购买数量，从Order中移除某个明细，等等类似操作，我们从来不会从OrderlineItem为出发点去执行一些业 务操作；另外，从生命周期的角度去理解，那么OrderLineItem离开Order没有任何存在的意义，也就是说OrderLineItem的生命周 期是从属于Order的。所以，我们可以很确信的回答，OrderLineItem是一个实体。\n\n# Event Souring(事件溯源)\nEvent Souring是Martin Fowler提出的一种架构模式，其特点是：\n- 整个系统由事件进行驱动\n- 事件是一等公民，系统的基础数据是事件，事件需要被储存在数据库中\n- 业务数据只是由事件产生的视图，不一定需要存储在数据库\n\n这里展示的例子是一个银行账户经历的几个事件：创建 -> 存款300 -> 存款100 -> 取出200\n![Event Souring](v2-7c6a1b0c101d8f0cf5e89716bfb4d6a1_hd.jpg)\n\n在这样的设计下，每个对象都需要经历一系列的事件才会转化成现在的状态，当我们只需要进行查询的时候，这些操作未免显得太过累赘，所以我们可以把对象的最终状态存入一个视图数据库，当需要查询的时候直接查询这个数据库即可\n![Event Souring](v2-35249fb2693f44bbe4bf48ea6755c55c_hd.jpg)\n\n# CQRS(命令查询责任分离)\nCQRS简单理解就是读写分离，但它的实现可能相对其定义要复杂些，并且通常都是会和Event Souring一起被提及  \n![CQRS + Event Souring](CQRS.jpg)\n\n参考资料：\n- 《领域驱动设计：软件核心复杂性应对之道》  \n- [深入浅出Event Sourcing和CQRS](https://zhuanlan.zhihu.com/p/38968012)\n- [Re：从零开始的领域驱动设计](https://www.cnkirito.moe/Re-DDD/)\n- [一个DDD指导下的实体类设计案例](https://www.cnkirito.moe/DDD-practice/)\n- [DDD领域驱动设计基本理论知识总结](https://www.cnblogs.com/netfocus/archive/2011/10/10/2204949.html)\n- [多研究些架构，少谈些框架](http://newtech.club/2017/06/09/%E5%A4%9A%E7%A0%94%E7%A9%B6%E4%BA%9B%E6%9E%B6%E6%9E%84%EF%BC%8C%E5%B0%91%E8%B0%88%E4%BA%9B%E6%A1%86%E6%9E%B6%EF%BC%881%EF%BC%89-%E8%AE%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/)\n\n\n","slug":"DDD","published":1,"updated":"2020-07-06T12:25:47.637Z","layout":"post","photos":[],"_id":"clzh7x5vz0001q4ql3muehf58","content":"<p>领域驱动设计(Domain-driven design)，缩写为DDD。以领域设计为驱动，构建整一个系统。</p>\n<p>这个设计思想是在微服务开始流行时逐渐变得火爆的，因为其设计理念非常适合分布式的微服务拆分。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>我声明一点，本文章其实都是东拼西凑的，里面所表达的仅仅是个人的理解（我没有读完ddd那本书）</p>\n</blockquote>\n<h1 id=\"通用语言-Ubiquitous-Language\"><a href=\"#通用语言-Ubiquitous-Language\" class=\"headerlink\" title=\"通用语言(Ubiquitous Language)\"></a>通用语言(Ubiquitous Language)</h1><p>通用语言其实就是把模型通过大家都能够理解的语言表达出来。</p>\n<p>通常我们在开发业务的过程中都是先去调研，了解其业务的具体细节，并商讨大致的程序设计，然后经过开发人员转化成为代码，在这个过程中交流是单向性的，直到下一次需要展示或者有理解出现错误时才会与客户或者是业务人员再次交流。</p>\n<p>而业务人员那边通常也只能通过表面的程序看问题，无法理解其实际运作是否符合业务人员所想，这可能将导致程序在错误的方向上越走越远</p>\n<p>领域驱动设计是需要建立一个通用语言的，这需要领域专家(即对这些业务整体非常熟悉的人)与开发人员一同参与</p>\n<p>我们需要把程序设计上的事情通过一个通用的语言表述出去使领域专家能够理解我们是如何通过程序设计业务的，而领域专家也同样需要把那些专业名词，业务场景用通用语言描述出来</p>\n<p>当我们有了通用语言后，我们就能够在建立领域对象的时候听取专家的意见，同时能够让专家理解领域对象是否符合他们的预期  </p>\n<p>而形成通用语言是不容易的，因为其答案并不唯一，不同的人会有不同的理解，从而导致不同的答案。但我们可以试着从UML或是伪代码着手</p>\n<p><a href=\"http://note.youdao.com/noteshare?id=3834bfbae566164a48b0df825fc8134d&sub=B24036AF24534B79875E2C0B5D4C886F\">航运例子</a></p>\n<h1 id=\"层结构-Layered-Architecture\"><a href=\"#层结构-Layered-Architecture\" class=\"headerlink\" title=\"层结构(Layered Architecture)\"></a>层结构(Layered Architecture)</h1><p><img src=\"/.moe//p29.png\" alt=\"Layered Architecture\"></p>\n<ul>\n<li>User Interface<br>负责向用户展现信息，并且会解析用户行为，即常说的展现层。</li>\n<li>Application Layer<br>应用层没有任何的业务逻辑代码，它很简单，它主要为程序提供任务处理。</li>\n<li>Domain Layer<br>这一层包含有关领域的信息，是业务的核心，领域模型的状态都直接或间接（持久化至数据库）存储在这一层。</li>\n<li>Infrastructure Layer<br>为其他层提供底层依赖操作。</li>\n</ul>\n<h1 id=\"模型关系图-Model-Driven-Design\"><a href=\"#模型关系图-Model-Driven-Design\" class=\"headerlink\" title=\"模型关系图(Model-Driven Design)\"></a>模型关系图(Model-Driven Design)</h1><p><img src=\"/.moe//p28.png\" alt=\"Model-Driven Design\"></p>\n<h2 id=\"服务-Services\"><a href=\"#服务-Services\" class=\"headerlink\" title=\"服务(Services)\"></a>服务(Services)</h2><p>当我们在分析某一领域时，一直在尝试如何将信息转化为领域模型，但并非所有的点我们都能用Model来涵盖。对象应当有属性，状态和行为，但有时领域中有一些行为是无法映射到具体的对象中的，我们也不能强行将其放入在某一个模型对象中，而将其单独作为一个方法又没有地方，此时就需要服务</p>\n<h2 id=\"工厂-Factories\"><a href=\"#工厂-Factories\" class=\"headerlink\" title=\"工厂(Factories)\"></a>工厂(Factories)</h2><p>在大型系统中，实体和聚合通常是很复杂的，这就导致了很难去通过构造器来创建对象。工厂就决解了这个问题，它把创建对象的细节封装起来，巧妙的实现了依赖反转。当然对聚合也适用（当建立了聚合根时，其他对象可以自动创建）</p>\n<h2 id=\"仓库-Repository\"><a href=\"#仓库-Repository\" class=\"headerlink\" title=\"仓库(Repository)\"></a>仓库(Repository)</h2><p>仓库封装了获取对象的逻辑，领域对象无须和底层数据库交互，它只需要从仓库中获取对象即可。仓库可以存储对象的引用，当一个对象被创建后，它可能会被存储到仓库中，那么下次就可以从仓库取。如果用户请求的数据没在仓库中，则会从数据库里取，这就减少了底层交互的次数</p>\n<h2 id=\"边界上下文-Bounded-Context\"><a href=\"#边界上下文-Bounded-Context\" class=\"headerlink\" title=\"边界上下文(Bounded Context)\"></a>边界上下文(Bounded Context)</h2><p>简单来说就是定义该领域模型的适用范围以及使用场景。</p>\n<p>可以这样理解：</p>\n<ul>\n<li><p>边界(Bounded)<br>即有边界的，表示领域模型有边界；这个边界定义了模型的适用范围，以便让负责该模型的团队知道什么该在模型中实现，什么不该；</p>\n</li>\n<li><p>上下文(Context)<br>即领域模型的产生是在某个上下文中产生的；上下文是一个和环境相关的概念。比如一次头脑风暴会议大家达成了一个模型，那这次会议的讨论就是该模型的上下文；比如某本书中谈到了某个东西，那这个东西的上下文就是那本书，那个东西要有意义的前提离不开那本书这个上下文；所以，上下文是模型有意义的前提；</p>\n</li>\n</ul>\n<h2 id=\"实体-Entity-和-值对象-ValueObject\"><a href=\"#实体-Entity-和-值对象-ValueObject\" class=\"headerlink\" title=\"实体(Entity) 和 值对象(ValueObject)\"></a>实体(Entity) 和 值对象(ValueObject)</h2><p>一言蔽之，实体大致可以理解为我们传统开发的实体，但是他具有自己的行为，而不是POJO(只具有简单的getter,setter)；值对象是指描述一个实体某个属性的对象。<br>当然，这些都是需要在上面所说的BoundedContext被指定的前提下讨论。</p>\n<p>举个例子：<br>在电商系统我们现在分成两个模块，一个商品模块，一个订单模块<br>订单对象中有收货地址(address)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Order</span> &#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    String address; <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们把address扩展开来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Order</span> &#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    Address address; <br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Address</span> &#123;<br>    String province;<span class=\"hljs-comment\">//省</span><br>    String city;<span class=\"hljs-comment\">//市</span><br>    String street;<span class=\"hljs-comment\">//街道</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>现在Address是一个对象了，但是我们不会认为他是一个实体，因为在这个订单模块中它只是描述了订单中的收货地址而已，仅仅只是order上的一个值，几个内部的值所组合出的抽象，你完全可以把它理解为是一个Map:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Order</span> &#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    Map&lt;String, String&gt; address;<br>    <br>    <span class=\"hljs-comment\">//address Map&#123;&quot;province&quot;:&quot;&quot;,&quot;city&quot;:&quot;&quot;,&quot;street&quot;:&quot;&quot;&#125; </span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这跟java中String对象非常类似，String对象是不会进行修改的，如果你将新的一串字符串重新赋值给一个String对象，实际上等于new了一个String，地址是变化了的，不再是同一个对象。</p>\n<p>所以ValueObject有这样几个特点:</p>\n<ul>\n<li>没有标识(唯一标识)</li>\n<li>不可变(只读)</li>\n<li>不具备生命周期</li>\n</ul>\n<h2 id=\"聚合-Aggregates-和-聚合-Aggregate-Root\"><a href=\"#聚合-Aggregates-和-聚合-Aggregate-Root\" class=\"headerlink\" title=\"聚合(Aggregates) 和 聚合(Aggregate Root)\"></a>聚合(Aggregates) 和 聚合(Aggregate Root)</h2><p><strong>聚合</strong>可以看作是多个实体之间的组合，而每个聚合都有一个根实体，叫<strong>聚合根</strong>。</p>\n<p>在DDD当中，聚合外部想要访问聚合内的信息，必须通过<strong>聚合根</strong>进行访问。</p>\n<ul>\n<li><p>如何识别聚合和聚合根？<br>首先一个边界上下文(Bounded Context)可能包含多个聚合，每个聚合都有一个聚合根。</p>\n<ol>\n<li>找出哪些实体可能是聚合根</li>\n<li>逐个分析每个聚合根的边界，即该聚合根应该聚合哪些实体或值对象</li>\n<li>划分边界上下文</li>\n</ol>\n</li>\n<li><p>如何确定聚合边界？<br>边界的确定法则是根据不变性约束规则（Invariant）:</p>\n<ul>\n<li>聚合边界内必须具有哪些信息，如果没有这些信息就不能称为一个有效的聚合</li>\n<li>聚合内的某些对象的状态必须满足某个业务规则 </li>\n</ul>\n</li>\n<li><p>如何找到聚合根？<br>如果存在一个业务操作是完全面向某个实体，那么这个实体就可能是一个聚合根</p>\n</li>\n</ul>\n<h3 id=\"例子分析\"><a href=\"#例子分析\" class=\"headerlink\" title=\"例子分析\"></a>例子分析</h3><blockquote>\n<p>Order（一 个订单）必须有对应的客户信息，否则就不能称为一个有效的Order<br>同理，Order对OrderLineItem有不变性约束，Order也必须至少有一个OrderLineItem(一条订单明细)，否则就不能称为一个有效的Order<br>另外，Order中的任何OrderLineItem的数量都不能为0，否则认为该OrderLineItem是无效的，同时可以推理出Order也可能是无效的。因为如果允许一个OrderLineItem的数量为0的话，就意味着可能会出现所有OrderLineItem的数量都为0，这就导致整个Order的总价为0，这是没有任何意义的，是不允许的，从而导致Order无效<br>所以，必须要求 Order中所有的OrderLineItem的数量都不能为0<br>那么现在可以确定的是Order必须包含一些OrderLineItem，那么应该是通 过引用的方式还是ID关联的方式来表达这种包含关系呢？<br>这就需要引出另外一个问题，那就是先要分析出是OrderLineItem是否是一个独立的聚合根。<br>回答了这个问题，那么根据上面的规则就知道应该用对象引用还是用ID关联了。那么OrderLineItem是否是一个独立的聚合根呢？因为聚合根意 味着是某个聚合的根，而聚合有代表着某个上下文边界，而一个上下文边界又代表着某个独立的业务场景，这个业务场景操作的唯一对象总是该上下文边界内的聚合 根。想到这里，我们就可以想想，有没有什么场景是会绕开订单直接对某个订单明细进行操作的。也就是在这种情况下，我们 是以OrderLineItem为主体，完全是在面向OrderLineItem在做业务操作。有这种业务场景吗？没有，我们对 OrderLineItem的所有的操作都是以Order为出发点，我们总是会面向整个Order在做业务操作，比如向Order中增加明细，修改 Order的某个明细对应的商品的购买数量，从Order中移除某个明细，等等类似操作，我们从来不会从OrderlineItem为出发点去执行一些业 务操作；另外，从生命周期的角度去理解，那么OrderLineItem离开Order没有任何存在的意义，也就是说OrderLineItem的生命周 期是从属于Order的。所以，我们可以很确信的回答，OrderLineItem是一个实体。</p>\n</blockquote>\n<h1 id=\"Event-Souring-事件溯源\"><a href=\"#Event-Souring-事件溯源\" class=\"headerlink\" title=\"Event Souring(事件溯源)\"></a>Event Souring(事件溯源)</h1><p>Event Souring是Martin Fowler提出的一种架构模式，其特点是：</p>\n<ul>\n<li>整个系统由事件进行驱动</li>\n<li>事件是一等公民，系统的基础数据是事件，事件需要被储存在数据库中</li>\n<li>业务数据只是由事件产生的视图，不一定需要存储在数据库</li>\n</ul>\n<p>这里展示的例子是一个银行账户经历的几个事件：创建 -&gt; 存款300 -&gt; 存款100 -&gt; 取出200<br><img src=\"/.moe//v2-7c6a1b0c101d8f0cf5e89716bfb4d6a1_hd.jpg\" alt=\"Event Souring\"></p>\n<p>在这样的设计下，每个对象都需要经历一系列的事件才会转化成现在的状态，当我们只需要进行查询的时候，这些操作未免显得太过累赘，所以我们可以把对象的最终状态存入一个视图数据库，当需要查询的时候直接查询这个数据库即可<br><img src=\"/.moe//v2-35249fb2693f44bbe4bf48ea6755c55c_hd.jpg\" alt=\"Event Souring\"></p>\n<h1 id=\"CQRS-命令查询责任分离\"><a href=\"#CQRS-命令查询责任分离\" class=\"headerlink\" title=\"CQRS(命令查询责任分离)\"></a>CQRS(命令查询责任分离)</h1><p>CQRS简单理解就是读写分离，但它的实现可能相对其定义要复杂些，并且通常都是会和Event Souring一起被提及<br><img src=\"/.moe//CQRS.jpg\" alt=\"CQRS + Event Souring\"></p>\n<p>参考资料：</p>\n<ul>\n<li>《领域驱动设计：软件核心复杂性应对之道》  </li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/38968012\">深入浅出Event Sourcing和CQRS</a></li>\n<li><a href=\"https://www.cnkirito.moe/Re-DDD/\">Re：从零开始的领域驱动设计</a></li>\n<li><a href=\"https://www.cnkirito.moe/DDD-practice/\">一个DDD指导下的实体类设计案例</a></li>\n<li><a href=\"https://www.cnblogs.com/netfocus/archive/2011/10/10/2204949.html\">DDD领域驱动设计基本理论知识总结</a></li>\n<li><a href=\"http://newtech.club/2017/06/09/%E5%A4%9A%E7%A0%94%E7%A9%B6%E4%BA%9B%E6%9E%B6%E6%9E%84%EF%BC%8C%E5%B0%91%E8%B0%88%E4%BA%9B%E6%A1%86%E6%9E%B6%EF%BC%881%EF%BC%89-%E8%AE%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/\">多研究些架构，少谈些框架</a></li>\n</ul>\n","excerpt":"<p>领域驱动设计(Domain-driven design)，缩写为DDD。以领域设计为驱动，构建整一个系统。</p>\n<p>这个设计思想是在微服务开始流行时逐渐变得火爆的，因为其设计理念非常适合分布式的微服务拆分。</p>","more":"<blockquote>\n<p>我声明一点，本文章其实都是东拼西凑的，里面所表达的仅仅是个人的理解（我没有读完ddd那本书）</p>\n</blockquote>\n<h1 id=\"通用语言-Ubiquitous-Language\"><a href=\"#通用语言-Ubiquitous-Language\" class=\"headerlink\" title=\"通用语言(Ubiquitous Language)\"></a>通用语言(Ubiquitous Language)</h1><p>通用语言其实就是把模型通过大家都能够理解的语言表达出来。</p>\n<p>通常我们在开发业务的过程中都是先去调研，了解其业务的具体细节，并商讨大致的程序设计，然后经过开发人员转化成为代码，在这个过程中交流是单向性的，直到下一次需要展示或者有理解出现错误时才会与客户或者是业务人员再次交流。</p>\n<p>而业务人员那边通常也只能通过表面的程序看问题，无法理解其实际运作是否符合业务人员所想，这可能将导致程序在错误的方向上越走越远</p>\n<p>领域驱动设计是需要建立一个通用语言的，这需要领域专家(即对这些业务整体非常熟悉的人)与开发人员一同参与</p>\n<p>我们需要把程序设计上的事情通过一个通用的语言表述出去使领域专家能够理解我们是如何通过程序设计业务的，而领域专家也同样需要把那些专业名词，业务场景用通用语言描述出来</p>\n<p>当我们有了通用语言后，我们就能够在建立领域对象的时候听取专家的意见，同时能够让专家理解领域对象是否符合他们的预期  </p>\n<p>而形成通用语言是不容易的，因为其答案并不唯一，不同的人会有不同的理解，从而导致不同的答案。但我们可以试着从UML或是伪代码着手</p>\n<p><a href=\"http://note.youdao.com/noteshare?id=3834bfbae566164a48b0df825fc8134d&sub=B24036AF24534B79875E2C0B5D4C886F\">航运例子</a></p>\n<h1 id=\"层结构-Layered-Architecture\"><a href=\"#层结构-Layered-Architecture\" class=\"headerlink\" title=\"层结构(Layered Architecture)\"></a>层结构(Layered Architecture)</h1><p><img src=\"/.moe//p29.png\" alt=\"Layered Architecture\"></p>\n<ul>\n<li>User Interface<br>负责向用户展现信息，并且会解析用户行为，即常说的展现层。</li>\n<li>Application Layer<br>应用层没有任何的业务逻辑代码，它很简单，它主要为程序提供任务处理。</li>\n<li>Domain Layer<br>这一层包含有关领域的信息，是业务的核心，领域模型的状态都直接或间接（持久化至数据库）存储在这一层。</li>\n<li>Infrastructure Layer<br>为其他层提供底层依赖操作。</li>\n</ul>\n<h1 id=\"模型关系图-Model-Driven-Design\"><a href=\"#模型关系图-Model-Driven-Design\" class=\"headerlink\" title=\"模型关系图(Model-Driven Design)\"></a>模型关系图(Model-Driven Design)</h1><p><img src=\"/.moe//p28.png\" alt=\"Model-Driven Design\"></p>\n<h2 id=\"服务-Services\"><a href=\"#服务-Services\" class=\"headerlink\" title=\"服务(Services)\"></a>服务(Services)</h2><p>当我们在分析某一领域时，一直在尝试如何将信息转化为领域模型，但并非所有的点我们都能用Model来涵盖。对象应当有属性，状态和行为，但有时领域中有一些行为是无法映射到具体的对象中的，我们也不能强行将其放入在某一个模型对象中，而将其单独作为一个方法又没有地方，此时就需要服务</p>\n<h2 id=\"工厂-Factories\"><a href=\"#工厂-Factories\" class=\"headerlink\" title=\"工厂(Factories)\"></a>工厂(Factories)</h2><p>在大型系统中，实体和聚合通常是很复杂的，这就导致了很难去通过构造器来创建对象。工厂就决解了这个问题，它把创建对象的细节封装起来，巧妙的实现了依赖反转。当然对聚合也适用（当建立了聚合根时，其他对象可以自动创建）</p>\n<h2 id=\"仓库-Repository\"><a href=\"#仓库-Repository\" class=\"headerlink\" title=\"仓库(Repository)\"></a>仓库(Repository)</h2><p>仓库封装了获取对象的逻辑，领域对象无须和底层数据库交互，它只需要从仓库中获取对象即可。仓库可以存储对象的引用，当一个对象被创建后，它可能会被存储到仓库中，那么下次就可以从仓库取。如果用户请求的数据没在仓库中，则会从数据库里取，这就减少了底层交互的次数</p>\n<h2 id=\"边界上下文-Bounded-Context\"><a href=\"#边界上下文-Bounded-Context\" class=\"headerlink\" title=\"边界上下文(Bounded Context)\"></a>边界上下文(Bounded Context)</h2><p>简单来说就是定义该领域模型的适用范围以及使用场景。</p>\n<p>可以这样理解：</p>\n<ul>\n<li><p>边界(Bounded)<br>即有边界的，表示领域模型有边界；这个边界定义了模型的适用范围，以便让负责该模型的团队知道什么该在模型中实现，什么不该；</p>\n</li>\n<li><p>上下文(Context)<br>即领域模型的产生是在某个上下文中产生的；上下文是一个和环境相关的概念。比如一次头脑风暴会议大家达成了一个模型，那这次会议的讨论就是该模型的上下文；比如某本书中谈到了某个东西，那这个东西的上下文就是那本书，那个东西要有意义的前提离不开那本书这个上下文；所以，上下文是模型有意义的前提；</p>\n</li>\n</ul>\n<h2 id=\"实体-Entity-和-值对象-ValueObject\"><a href=\"#实体-Entity-和-值对象-ValueObject\" class=\"headerlink\" title=\"实体(Entity) 和 值对象(ValueObject)\"></a>实体(Entity) 和 值对象(ValueObject)</h2><p>一言蔽之，实体大致可以理解为我们传统开发的实体，但是他具有自己的行为，而不是POJO(只具有简单的getter,setter)；值对象是指描述一个实体某个属性的对象。<br>当然，这些都是需要在上面所说的BoundedContext被指定的前提下讨论。</p>\n<p>举个例子：<br>在电商系统我们现在分成两个模块，一个商品模块，一个订单模块<br>订单对象中有收货地址(address)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Order</span> &#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    String address; <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们把address扩展开来</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Order</span> &#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    Address address; <br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Address</span> &#123;<br>    String province;<span class=\"hljs-comment\">//省</span><br>    String city;<span class=\"hljs-comment\">//市</span><br>    String street;<span class=\"hljs-comment\">//街道</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>现在Address是一个对象了，但是我们不会认为他是一个实体，因为在这个订单模块中它只是描述了订单中的收货地址而已，仅仅只是order上的一个值，几个内部的值所组合出的抽象，你完全可以把它理解为是一个Map:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Order</span> &#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    Map&lt;String, String&gt; address;<br>    <br>    <span class=\"hljs-comment\">//address Map&#123;&quot;province&quot;:&quot;&quot;,&quot;city&quot;:&quot;&quot;,&quot;street&quot;:&quot;&quot;&#125; </span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这跟java中String对象非常类似，String对象是不会进行修改的，如果你将新的一串字符串重新赋值给一个String对象，实际上等于new了一个String，地址是变化了的，不再是同一个对象。</p>\n<p>所以ValueObject有这样几个特点:</p>\n<ul>\n<li>没有标识(唯一标识)</li>\n<li>不可变(只读)</li>\n<li>不具备生命周期</li>\n</ul>\n<h2 id=\"聚合-Aggregates-和-聚合-Aggregate-Root\"><a href=\"#聚合-Aggregates-和-聚合-Aggregate-Root\" class=\"headerlink\" title=\"聚合(Aggregates) 和 聚合(Aggregate Root)\"></a>聚合(Aggregates) 和 聚合(Aggregate Root)</h2><p><strong>聚合</strong>可以看作是多个实体之间的组合，而每个聚合都有一个根实体，叫<strong>聚合根</strong>。</p>\n<p>在DDD当中，聚合外部想要访问聚合内的信息，必须通过<strong>聚合根</strong>进行访问。</p>\n<ul>\n<li><p>如何识别聚合和聚合根？<br>首先一个边界上下文(Bounded Context)可能包含多个聚合，每个聚合都有一个聚合根。</p>\n<ol>\n<li>找出哪些实体可能是聚合根</li>\n<li>逐个分析每个聚合根的边界，即该聚合根应该聚合哪些实体或值对象</li>\n<li>划分边界上下文</li>\n</ol>\n</li>\n<li><p>如何确定聚合边界？<br>边界的确定法则是根据不变性约束规则（Invariant）:</p>\n<ul>\n<li>聚合边界内必须具有哪些信息，如果没有这些信息就不能称为一个有效的聚合</li>\n<li>聚合内的某些对象的状态必须满足某个业务规则 </li>\n</ul>\n</li>\n<li><p>如何找到聚合根？<br>如果存在一个业务操作是完全面向某个实体，那么这个实体就可能是一个聚合根</p>\n</li>\n</ul>\n<h3 id=\"例子分析\"><a href=\"#例子分析\" class=\"headerlink\" title=\"例子分析\"></a>例子分析</h3><blockquote>\n<p>Order（一 个订单）必须有对应的客户信息，否则就不能称为一个有效的Order<br>同理，Order对OrderLineItem有不变性约束，Order也必须至少有一个OrderLineItem(一条订单明细)，否则就不能称为一个有效的Order<br>另外，Order中的任何OrderLineItem的数量都不能为0，否则认为该OrderLineItem是无效的，同时可以推理出Order也可能是无效的。因为如果允许一个OrderLineItem的数量为0的话，就意味着可能会出现所有OrderLineItem的数量都为0，这就导致整个Order的总价为0，这是没有任何意义的，是不允许的，从而导致Order无效<br>所以，必须要求 Order中所有的OrderLineItem的数量都不能为0<br>那么现在可以确定的是Order必须包含一些OrderLineItem，那么应该是通 过引用的方式还是ID关联的方式来表达这种包含关系呢？<br>这就需要引出另外一个问题，那就是先要分析出是OrderLineItem是否是一个独立的聚合根。<br>回答了这个问题，那么根据上面的规则就知道应该用对象引用还是用ID关联了。那么OrderLineItem是否是一个独立的聚合根呢？因为聚合根意 味着是某个聚合的根，而聚合有代表着某个上下文边界，而一个上下文边界又代表着某个独立的业务场景，这个业务场景操作的唯一对象总是该上下文边界内的聚合 根。想到这里，我们就可以想想，有没有什么场景是会绕开订单直接对某个订单明细进行操作的。也就是在这种情况下，我们 是以OrderLineItem为主体，完全是在面向OrderLineItem在做业务操作。有这种业务场景吗？没有，我们对 OrderLineItem的所有的操作都是以Order为出发点，我们总是会面向整个Order在做业务操作，比如向Order中增加明细，修改 Order的某个明细对应的商品的购买数量，从Order中移除某个明细，等等类似操作，我们从来不会从OrderlineItem为出发点去执行一些业 务操作；另外，从生命周期的角度去理解，那么OrderLineItem离开Order没有任何存在的意义，也就是说OrderLineItem的生命周 期是从属于Order的。所以，我们可以很确信的回答，OrderLineItem是一个实体。</p>\n</blockquote>\n<h1 id=\"Event-Souring-事件溯源\"><a href=\"#Event-Souring-事件溯源\" class=\"headerlink\" title=\"Event Souring(事件溯源)\"></a>Event Souring(事件溯源)</h1><p>Event Souring是Martin Fowler提出的一种架构模式，其特点是：</p>\n<ul>\n<li>整个系统由事件进行驱动</li>\n<li>事件是一等公民，系统的基础数据是事件，事件需要被储存在数据库中</li>\n<li>业务数据只是由事件产生的视图，不一定需要存储在数据库</li>\n</ul>\n<p>这里展示的例子是一个银行账户经历的几个事件：创建 -&gt; 存款300 -&gt; 存款100 -&gt; 取出200<br><img src=\"/.moe//v2-7c6a1b0c101d8f0cf5e89716bfb4d6a1_hd.jpg\" alt=\"Event Souring\"></p>\n<p>在这样的设计下，每个对象都需要经历一系列的事件才会转化成现在的状态，当我们只需要进行查询的时候，这些操作未免显得太过累赘，所以我们可以把对象的最终状态存入一个视图数据库，当需要查询的时候直接查询这个数据库即可<br><img src=\"/.moe//v2-35249fb2693f44bbe4bf48ea6755c55c_hd.jpg\" alt=\"Event Souring\"></p>\n<h1 id=\"CQRS-命令查询责任分离\"><a href=\"#CQRS-命令查询责任分离\" class=\"headerlink\" title=\"CQRS(命令查询责任分离)\"></a>CQRS(命令查询责任分离)</h1><p>CQRS简单理解就是读写分离，但它的实现可能相对其定义要复杂些，并且通常都是会和Event Souring一起被提及<br><img src=\"/.moe//CQRS.jpg\" alt=\"CQRS + Event Souring\"></p>\n<p>参考资料：</p>\n<ul>\n<li>《领域驱动设计：软件核心复杂性应对之道》  </li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/38968012\">深入浅出Event Sourcing和CQRS</a></li>\n<li><a href=\"https://www.cnkirito.moe/Re-DDD/\">Re：从零开始的领域驱动设计</a></li>\n<li><a href=\"https://www.cnkirito.moe/DDD-practice/\">一个DDD指导下的实体类设计案例</a></li>\n<li><a href=\"https://www.cnblogs.com/netfocus/archive/2011/10/10/2204949.html\">DDD领域驱动设计基本理论知识总结</a></li>\n<li><a href=\"http://newtech.club/2017/06/09/%E5%A4%9A%E7%A0%94%E7%A9%B6%E4%BA%9B%E6%9E%B6%E6%9E%84%EF%BC%8C%E5%B0%91%E8%B0%88%E4%BA%9B%E6%A1%86%E6%9E%B6%EF%BC%881%EF%BC%89-%E8%AE%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/\">多研究些架构，少谈些框架</a></li>\n</ul>"},{"title":"Test","date":"2017-04-19T16:00:00.000Z","comments":1,"index_img":"/gallery/kantoku-colors.jpg","banner_img":"/gallery/kantoku-colors.jpg","_content":"test test！！\n\n<!--more-->\n## ACG\n\n### 格子裙赛高！\n\n\n\n![123](/COLORS_47646872_p0.jpg) \n\n[カントク - COLORS(id=47646872)](http://www.pixiv.net/member_illust.php?mode=medium&illust_id=47646872)\n\n","source":"_posts/Demo.md","raw":"---\ntitle: Test\ndate: 2017/4/20\ncategories: \n    - ACG\ntags: \n    - 监督\n    - 格子裙\n    - 放学五年目\ncomments: true \nindex_img: /gallery/kantoku-colors.jpg\nbanner_img: /gallery/kantoku-colors.jpg\n---\ntest test！！\n\n<!--more-->\n## ACG\n\n### 格子裙赛高！\n\n\n\n![123](/COLORS_47646872_p0.jpg) \n\n[カントク - COLORS(id=47646872)](http://www.pixiv.net/member_illust.php?mode=medium&illust_id=47646872)\n\n","slug":"Demo","published":1,"updated":"2020-07-06T12:34:15.577Z","layout":"post","photos":[],"_id":"clzh7x5w20003q4ql9hg72sz3","content":"<p>test test！！</p>\n<span id=\"more\"></span>\n<h2 id=\"ACG\"><a href=\"#ACG\" class=\"headerlink\" title=\"ACG\"></a>ACG</h2><h3 id=\"格子裙赛高！\"><a href=\"#格子裙赛高！\" class=\"headerlink\" title=\"格子裙赛高！\"></a>格子裙赛高！</h3><p><img src=\"/.moe//COLORS_47646872_p0.jpg\" alt=\"123\"> </p>\n<p><a href=\"http://www.pixiv.net/member_illust.php?mode=medium&illust_id=47646872\">カントク - COLORS(id=47646872)</a></p>\n","excerpt":"<p>test test！！</p>","more":"<h2 id=\"ACG\"><a href=\"#ACG\" class=\"headerlink\" title=\"ACG\"></a>ACG</h2><h3 id=\"格子裙赛高！\"><a href=\"#格子裙赛高！\" class=\"headerlink\" title=\"格子裙赛高！\"></a>格子裙赛高！</h3><p><img src=\"/.moe//COLORS_47646872_p0.jpg\" alt=\"123\"> </p>\n<p><a href=\"http://www.pixiv.net/member_illust.php?mode=medium&illust_id=47646872\">カントク - COLORS(id=47646872)</a></p>"},{"title":"用Gradle构建lib分离的jar包","date":"2022-06-23T13:52:00.000Z","comments":1,"index_img":"/gallery/sv-5th-anni.jpg","banner_img":"/gallery/sv-5th-anni.jpg","_content":"如果平时比较多使用docker部署，那么为了节省部署的时间，一般会把一些不太变化的东西放在比较前面写作为一层，分层处理后可以利用编译的缓存快速构建出镜像。\n\n因此，如果一个jar包是分离lib的话就可以做灵活的分层处理了。\n<!--more-->\n> 封面：Shadowverse 5周年贺图，角色是~~我女儿~~雪华。BTW，这个角色的cv是刚出道的时候非常呆萌非常贪吃的[もちょ](https://www.bilibili.com/video/BV194411M7mt)。\n---\n## 0x01\n最近由于接触了一下Quarkus，发现其打包jar的方式非常棒，分离了lib，最终推送docker镜像时利用缓存只需要1M不到的数据量，虽然我以前是知道maven有类似的插件的，但是由于最近我完全入坑gradle了，也尝试过找类似的插件但都未果，此次因为尝到了甜头，以及我不想要绑定quarkus框架所以又去找了一下解决方案。\n\n## 0x02\n首先Jar包内是有一个`META-INF/MANIFEST.MF`这样的文件，里面我只挑能够达成jar包跟lib分离目的的参数：\n- Main-Class  \n    这是指定程序入口的参数，一般就是main方法所在的class，Kotlin的class需要加上Kt的后缀才正确。\n    这个一般打成jar运行是基础配置，不然无法运行。\n- Class-Path  \n    这个就是需要加载的lib的配置了，需要对每个lib包都做声明，空格分割。\n\n下一步是对Gradle的jar任务做修改，让其排除所有的*.jar文件，并自定义一个删除以及拷贝lib的任务让其依赖。这需要了解一下Gradle如何自定义一个task以及jar任务如何修改。\n\n## 0x03\n了解完上面说的两点，就可以直接上代码了：\n```kotlin\ntasks.register<Delete>(\"clearLib\") { //清除lib\n    delete(\"$buildDir/libs/lib\")\n}\n\ntasks.register<Copy>(\"copyLib\") { //拷贝lib\n    from(configurations.runtimeClasspath) //从运行时目录\n    into(\"$buildDir/libs/lib\")  //到打包目录\n}\n\ntasks.jar {\n    dependsOn(\"clearLib\") //依赖清除和拷贝lib任务\n    dependsOn(\"copyLib\")\n    exclude(\"**/*.jar\") //打包时排除jar文件（不打包成fat jar）\n    manifest {\n        attributes[\"Manifest-Version\"] = \"1.0\"\n        attributes[\"Multi-Release\"] = \"true\"\n        attributes[\"Main-Class\"] = \"moe.kurenai.bot.BgmApplicationKt\" //main方法所在的class，我这个例子是用的Kotlin所以带有Kt后缀\n        attributes[\"Class-Path\"] = configurations.runtimeClasspath.get().files.map { \"lib/${it.name}\" }.joinToString(\" \")  //构建出 lib/包名 的字符串并用空格分隔\n    }\n}\n```\n\n最终效果\n```\nManifest-Version: 1.0\nMulti-Release: true\nMain-Class: moe.kurenai.bot.BgmApplicationKt\nClass-Path: lib/bangumi-sdk-0.0.1-SNAPSHOT.jar lib/td-light-sdk-0.0.1-SN\n APSHOT.jar lib/kotlinx-coroutines-core-jvm-1.6.1.jar lib/kotlin-stdlib-\n jdk8-1.6.21.jar lib/simple-cache-1.2.0-SNAPSHOT.jar lib/redisson-3.17.1\n .jar lib/reflections-0.10.2.jar lib/log4j-core-2.17.1.jar lib/log4j-api\n -2.17.1.jar lib/disruptor-3.4.4.jar lib/jackson-module-kotlin-2.13.1.ja\n r lib/jackson-dataformat-yaml-2.13.1.jar lib/kotlin-stdlib-jdk7-1.6.21.\n jar lib/kotlin-reflect-1.6.21.jar lib/kotlin-stdlib-1.6.21.jar lib/jack\n son-datatype-jdk8-2.13.1.jar lib/jackson-datatype-jsr310-2.13.1.jar lib\n /jackson-databind-2.13.1.jar lib/lettuce-core-6.1.6.RELEASE.jar lib/rea\n ctor-core-3.4.17.jar lib/jackson-core-2.13.1.jar lib/jackson-annotation\n s-2.13.1.jar lib/commons-lang3-3.12.0.jar lib/commons-pool2-2.10.0.jar \n lib/commons-codec-1.3.jar lib/kryo-5.3.0.jar lib/netty-resolver-dns-4.1\n .74.Final.jar lib/netty-handler-4.1.74.Final.jar lib/netty-codec-dns-4.\n 1.74.Final.jar lib/netty-codec-4.1.74.Final.jar lib/netty-transport-4.1\n .74.Final.jar lib/netty-buffer-4.1.74.Final.jar lib/netty-resolver-4.1.\n 74.Final.jar lib/netty-common-4.1.74.Final.jar lib/cache-api-1.1.1.jar \n lib/rxjava-3.0.12.jar lib/reactive-streams-1.0.3.jar lib/jboss-marshall\n ing-river-2.0.11.Final.jar lib/jboss-marshalling-2.0.11.Final.jar lib/s\n lf4j-api-1.7.36.jar lib/byte-buddy-1.11.0.jar lib/jodd-bean-5.1.6.jar l\n ib/javassist-3.28.0-GA.jar lib/jsr305-3.0.2.jar lib/kotlin-stdlib-commo\n n-1.6.21.jar lib/annotations-13.0.jar lib/reflectasm-1.11.9.jar lib/obj\n enesis-3.2.jar lib/minlog-1.3.1.jar lib/snakeyaml-1.28.jar lib/netty-tc\n native-classes-2.0.48.Final.jar lib/jodd-core-5.1.6.jar\n```\n\n## 0x03\n上面只是比较简单的示例，你还可以对你不经常变动的包分到另一个目录当中去（例如`bangumi-sdk-0.0.1-SNAPSHOT.jar`这个包是我自己写的sdk，会经常变动），这样更加能够利用好缓存构建docker镜像，实际上quarkus是分了4个文件夹。","source":"_posts/build-thin-jar-with-external-lib-by-gradle.md","raw":"---\ntitle: 用Gradle构建lib分离的jar包\ndate: 2022-06-23 21:52:00\ncategories:\n    - Java\ntags:\n    - Java\n    - Kotlin\n    - Gradle\ncomments: true\nindex_img: /gallery/sv-5th-anni.jpg\nbanner_img: /gallery/sv-5th-anni.jpg\n\n---\n如果平时比较多使用docker部署，那么为了节省部署的时间，一般会把一些不太变化的东西放在比较前面写作为一层，分层处理后可以利用编译的缓存快速构建出镜像。\n\n因此，如果一个jar包是分离lib的话就可以做灵活的分层处理了。\n<!--more-->\n> 封面：Shadowverse 5周年贺图，角色是~~我女儿~~雪华。BTW，这个角色的cv是刚出道的时候非常呆萌非常贪吃的[もちょ](https://www.bilibili.com/video/BV194411M7mt)。\n---\n## 0x01\n最近由于接触了一下Quarkus，发现其打包jar的方式非常棒，分离了lib，最终推送docker镜像时利用缓存只需要1M不到的数据量，虽然我以前是知道maven有类似的插件的，但是由于最近我完全入坑gradle了，也尝试过找类似的插件但都未果，此次因为尝到了甜头，以及我不想要绑定quarkus框架所以又去找了一下解决方案。\n\n## 0x02\n首先Jar包内是有一个`META-INF/MANIFEST.MF`这样的文件，里面我只挑能够达成jar包跟lib分离目的的参数：\n- Main-Class  \n    这是指定程序入口的参数，一般就是main方法所在的class，Kotlin的class需要加上Kt的后缀才正确。\n    这个一般打成jar运行是基础配置，不然无法运行。\n- Class-Path  \n    这个就是需要加载的lib的配置了，需要对每个lib包都做声明，空格分割。\n\n下一步是对Gradle的jar任务做修改，让其排除所有的*.jar文件，并自定义一个删除以及拷贝lib的任务让其依赖。这需要了解一下Gradle如何自定义一个task以及jar任务如何修改。\n\n## 0x03\n了解完上面说的两点，就可以直接上代码了：\n```kotlin\ntasks.register<Delete>(\"clearLib\") { //清除lib\n    delete(\"$buildDir/libs/lib\")\n}\n\ntasks.register<Copy>(\"copyLib\") { //拷贝lib\n    from(configurations.runtimeClasspath) //从运行时目录\n    into(\"$buildDir/libs/lib\")  //到打包目录\n}\n\ntasks.jar {\n    dependsOn(\"clearLib\") //依赖清除和拷贝lib任务\n    dependsOn(\"copyLib\")\n    exclude(\"**/*.jar\") //打包时排除jar文件（不打包成fat jar）\n    manifest {\n        attributes[\"Manifest-Version\"] = \"1.0\"\n        attributes[\"Multi-Release\"] = \"true\"\n        attributes[\"Main-Class\"] = \"moe.kurenai.bot.BgmApplicationKt\" //main方法所在的class，我这个例子是用的Kotlin所以带有Kt后缀\n        attributes[\"Class-Path\"] = configurations.runtimeClasspath.get().files.map { \"lib/${it.name}\" }.joinToString(\" \")  //构建出 lib/包名 的字符串并用空格分隔\n    }\n}\n```\n\n最终效果\n```\nManifest-Version: 1.0\nMulti-Release: true\nMain-Class: moe.kurenai.bot.BgmApplicationKt\nClass-Path: lib/bangumi-sdk-0.0.1-SNAPSHOT.jar lib/td-light-sdk-0.0.1-SN\n APSHOT.jar lib/kotlinx-coroutines-core-jvm-1.6.1.jar lib/kotlin-stdlib-\n jdk8-1.6.21.jar lib/simple-cache-1.2.0-SNAPSHOT.jar lib/redisson-3.17.1\n .jar lib/reflections-0.10.2.jar lib/log4j-core-2.17.1.jar lib/log4j-api\n -2.17.1.jar lib/disruptor-3.4.4.jar lib/jackson-module-kotlin-2.13.1.ja\n r lib/jackson-dataformat-yaml-2.13.1.jar lib/kotlin-stdlib-jdk7-1.6.21.\n jar lib/kotlin-reflect-1.6.21.jar lib/kotlin-stdlib-1.6.21.jar lib/jack\n son-datatype-jdk8-2.13.1.jar lib/jackson-datatype-jsr310-2.13.1.jar lib\n /jackson-databind-2.13.1.jar lib/lettuce-core-6.1.6.RELEASE.jar lib/rea\n ctor-core-3.4.17.jar lib/jackson-core-2.13.1.jar lib/jackson-annotation\n s-2.13.1.jar lib/commons-lang3-3.12.0.jar lib/commons-pool2-2.10.0.jar \n lib/commons-codec-1.3.jar lib/kryo-5.3.0.jar lib/netty-resolver-dns-4.1\n .74.Final.jar lib/netty-handler-4.1.74.Final.jar lib/netty-codec-dns-4.\n 1.74.Final.jar lib/netty-codec-4.1.74.Final.jar lib/netty-transport-4.1\n .74.Final.jar lib/netty-buffer-4.1.74.Final.jar lib/netty-resolver-4.1.\n 74.Final.jar lib/netty-common-4.1.74.Final.jar lib/cache-api-1.1.1.jar \n lib/rxjava-3.0.12.jar lib/reactive-streams-1.0.3.jar lib/jboss-marshall\n ing-river-2.0.11.Final.jar lib/jboss-marshalling-2.0.11.Final.jar lib/s\n lf4j-api-1.7.36.jar lib/byte-buddy-1.11.0.jar lib/jodd-bean-5.1.6.jar l\n ib/javassist-3.28.0-GA.jar lib/jsr305-3.0.2.jar lib/kotlin-stdlib-commo\n n-1.6.21.jar lib/annotations-13.0.jar lib/reflectasm-1.11.9.jar lib/obj\n enesis-3.2.jar lib/minlog-1.3.1.jar lib/snakeyaml-1.28.jar lib/netty-tc\n native-classes-2.0.48.Final.jar lib/jodd-core-5.1.6.jar\n```\n\n## 0x03\n上面只是比较简单的示例，你还可以对你不经常变动的包分到另一个目录当中去（例如`bangumi-sdk-0.0.1-SNAPSHOT.jar`这个包是我自己写的sdk，会经常变动），这样更加能够利用好缓存构建docker镜像，实际上quarkus是分了4个文件夹。","slug":"build-thin-jar-with-external-lib-by-gradle","published":1,"updated":"2022-07-01T05:54:00.475Z","layout":"post","photos":[],"_id":"clzh7x5w40007q4qlg0sufybo","content":"<p>如果平时比较多使用docker部署，那么为了节省部署的时间，一般会把一些不太变化的东西放在比较前面写作为一层，分层处理后可以利用编译的缓存快速构建出镜像。</p>\n<p>因此，如果一个jar包是分离lib的话就可以做灵活的分层处理了。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>封面：Shadowverse 5周年贺图，角色是<del>我女儿</del>雪华。BTW，这个角色的cv是刚出道的时候非常呆萌非常贪吃的<a href=\"https://www.bilibili.com/video/BV194411M7mt\">もちょ</a>。</p>\n</blockquote>\n<hr>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p>最近由于接触了一下Quarkus，发现其打包jar的方式非常棒，分离了lib，最终推送docker镜像时利用缓存只需要1M不到的数据量，虽然我以前是知道maven有类似的插件的，但是由于最近我完全入坑gradle了，也尝试过找类似的插件但都未果，此次因为尝到了甜头，以及我不想要绑定quarkus框架所以又去找了一下解决方案。</p>\n<h2 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h2><p>首先Jar包内是有一个<code>META-INF/MANIFEST.MF</code>这样的文件，里面我只挑能够达成jar包跟lib分离目的的参数：</p>\n<ul>\n<li>Main-Class<br>  这是指定程序入口的参数，一般就是main方法所在的class，Kotlin的class需要加上Kt的后缀才正确。<br>  这个一般打成jar运行是基础配置，不然无法运行。</li>\n<li>Class-Path<br>  这个就是需要加载的lib的配置了，需要对每个lib包都做声明，空格分割。</li>\n</ul>\n<p>下一步是对Gradle的jar任务做修改，让其排除所有的*.jar文件，并自定义一个删除以及拷贝lib的任务让其依赖。这需要了解一下Gradle如何自定义一个task以及jar任务如何修改。</p>\n<h2 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2><p>了解完上面说的两点，就可以直接上代码了：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">tasks.register&lt;Delete&gt;(<span class=\"hljs-string\">&quot;clearLib&quot;</span>) &#123; <span class=\"hljs-comment\">//清除lib</span><br>    delete(<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$buildDir</span>/libs/lib&quot;</span>)<br>&#125;<br><br>tasks.register&lt;Copy&gt;(<span class=\"hljs-string\">&quot;copyLib&quot;</span>) &#123; <span class=\"hljs-comment\">//拷贝lib</span><br>    from(configurations.runtimeClasspath) <span class=\"hljs-comment\">//从运行时目录</span><br>    into(<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$buildDir</span>/libs/lib&quot;</span>)  <span class=\"hljs-comment\">//到打包目录</span><br>&#125;<br><br>tasks.jar &#123;<br>    dependsOn(<span class=\"hljs-string\">&quot;clearLib&quot;</span>) <span class=\"hljs-comment\">//依赖清除和拷贝lib任务</span><br>    dependsOn(<span class=\"hljs-string\">&quot;copyLib&quot;</span>)<br>    exclude(<span class=\"hljs-string\">&quot;**/*.jar&quot;</span>) <span class=\"hljs-comment\">//打包时排除jar文件（不打包成fat jar）</span><br>    manifest &#123;<br>        attributes[<span class=\"hljs-string\">&quot;Manifest-Version&quot;</span>] = <span class=\"hljs-string\">&quot;1.0&quot;</span><br>        attributes[<span class=\"hljs-string\">&quot;Multi-Release&quot;</span>] = <span class=\"hljs-string\">&quot;true&quot;</span><br>        attributes[<span class=\"hljs-string\">&quot;Main-Class&quot;</span>] = <span class=\"hljs-string\">&quot;moe.kurenai.bot.BgmApplicationKt&quot;</span> <span class=\"hljs-comment\">//main方法所在的class，我这个例子是用的Kotlin所以带有Kt后缀</span><br>        attributes[<span class=\"hljs-string\">&quot;Class-Path&quot;</span>] = configurations.runtimeClasspath.<span class=\"hljs-keyword\">get</span>().files.map &#123; <span class=\"hljs-string\">&quot;lib/<span class=\"hljs-subst\">$&#123;it.name&#125;</span>&quot;</span> &#125;.joinToString(<span class=\"hljs-string\">&quot; &quot;</span>)  <span class=\"hljs-comment\">//构建出 lib/包名 的字符串并用空格分隔</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>最终效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Manifest-Version: 1.0<br>Multi-Release: <span class=\"hljs-literal\">true</span><br>Main-Class: moe.kurenai.bot.BgmApplicationKt<br>Class-Path: lib/bangumi-sdk-0.0.1-SNAPSHOT.jar lib/td-light-sdk-0.0.1-SN<br> APSHOT.jar lib/kotlinx-coroutines-core-jvm-1.6.1.jar lib/kotlin-stdlib-<br> jdk8-1.6.21.jar lib/simple-cache-1.2.0-SNAPSHOT.jar lib/redisson-3.17.1<br> .jar lib/reflections-0.10.2.jar lib/log4j-core-2.17.1.jar lib/log4j-api<br> -2.17.1.jar lib/disruptor-3.4.4.jar lib/jackson-module-kotlin-2.13.1.ja<br> r lib/jackson-dataformat-yaml-2.13.1.jar lib/kotlin-stdlib-jdk7-1.6.21.<br> jar lib/kotlin-reflect-1.6.21.jar lib/kotlin-stdlib-1.6.21.jar lib/jack<br> son-datatype-jdk8-2.13.1.jar lib/jackson-datatype-jsr310-2.13.1.jar lib<br> /jackson-databind-2.13.1.jar lib/lettuce-core-6.1.6.RELEASE.jar lib/rea<br> ctor-core-3.4.17.jar lib/jackson-core-2.13.1.jar lib/jackson-annotation<br> s-2.13.1.jar lib/commons-lang3-3.12.0.jar lib/commons-pool2-2.10.0.jar <br> lib/commons-codec-1.3.jar lib/kryo-5.3.0.jar lib/netty-resolver-dns-4.1<br> .74.Final.jar lib/netty-handler-4.1.74.Final.jar lib/netty-codec-dns-4.<br> 1.74.Final.jar lib/netty-codec-4.1.74.Final.jar lib/netty-transport-4.1<br> .74.Final.jar lib/netty-buffer-4.1.74.Final.jar lib/netty-resolver-4.1.<br> 74.Final.jar lib/netty-common-4.1.74.Final.jar lib/cache-api-1.1.1.jar <br> lib/rxjava-3.0.12.jar lib/reactive-streams-1.0.3.jar lib/jboss-marshall<br> ing-river-2.0.11.Final.jar lib/jboss-marshalling-2.0.11.Final.jar lib/s<br> lf4j-api-1.7.36.jar lib/byte-buddy-1.11.0.jar lib/jodd-bean-5.1.6.jar l<br> ib/javassist-3.28.0-GA.jar lib/jsr305-3.0.2.jar lib/kotlin-stdlib-commo<br> n-1.6.21.jar lib/annotations-13.0.jar lib/reflectasm-1.11.9.jar lib/obj<br> enesis-3.2.jar lib/minlog-1.3.1.jar lib/snakeyaml-1.28.jar lib/netty-tc<br> native-classes-2.0.48.Final.jar lib/jodd-core-5.1.6.jar<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"0x03-1\"><a href=\"#0x03-1\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2><p>上面只是比较简单的示例，你还可以对你不经常变动的包分到另一个目录当中去（例如<code>bangumi-sdk-0.0.1-SNAPSHOT.jar</code>这个包是我自己写的sdk，会经常变动），这样更加能够利用好缓存构建docker镜像，实际上quarkus是分了4个文件夹。</p>\n","excerpt":"<p>如果平时比较多使用docker部署，那么为了节省部署的时间，一般会把一些不太变化的东西放在比较前面写作为一层，分层处理后可以利用编译的缓存快速构建出镜像。</p>\n<p>因此，如果一个jar包是分离lib的话就可以做灵活的分层处理了。</p>","more":"<blockquote>\n<p>封面：Shadowverse 5周年贺图，角色是<del>我女儿</del>雪华。BTW，这个角色的cv是刚出道的时候非常呆萌非常贪吃的<a href=\"https://www.bilibili.com/video/BV194411M7mt\">もちょ</a>。</p>\n</blockquote>\n<hr>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p>最近由于接触了一下Quarkus，发现其打包jar的方式非常棒，分离了lib，最终推送docker镜像时利用缓存只需要1M不到的数据量，虽然我以前是知道maven有类似的插件的，但是由于最近我完全入坑gradle了，也尝试过找类似的插件但都未果，此次因为尝到了甜头，以及我不想要绑定quarkus框架所以又去找了一下解决方案。</p>\n<h2 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h2><p>首先Jar包内是有一个<code>META-INF/MANIFEST.MF</code>这样的文件，里面我只挑能够达成jar包跟lib分离目的的参数：</p>\n<ul>\n<li>Main-Class<br>  这是指定程序入口的参数，一般就是main方法所在的class，Kotlin的class需要加上Kt的后缀才正确。<br>  这个一般打成jar运行是基础配置，不然无法运行。</li>\n<li>Class-Path<br>  这个就是需要加载的lib的配置了，需要对每个lib包都做声明，空格分割。</li>\n</ul>\n<p>下一步是对Gradle的jar任务做修改，让其排除所有的*.jar文件，并自定义一个删除以及拷贝lib的任务让其依赖。这需要了解一下Gradle如何自定义一个task以及jar任务如何修改。</p>\n<h2 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2><p>了解完上面说的两点，就可以直接上代码了：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">tasks.register&lt;Delete&gt;(<span class=\"hljs-string\">&quot;clearLib&quot;</span>) &#123; <span class=\"hljs-comment\">//清除lib</span><br>    delete(<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$buildDir</span>/libs/lib&quot;</span>)<br>&#125;<br><br>tasks.register&lt;Copy&gt;(<span class=\"hljs-string\">&quot;copyLib&quot;</span>) &#123; <span class=\"hljs-comment\">//拷贝lib</span><br>    from(configurations.runtimeClasspath) <span class=\"hljs-comment\">//从运行时目录</span><br>    into(<span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$buildDir</span>/libs/lib&quot;</span>)  <span class=\"hljs-comment\">//到打包目录</span><br>&#125;<br><br>tasks.jar &#123;<br>    dependsOn(<span class=\"hljs-string\">&quot;clearLib&quot;</span>) <span class=\"hljs-comment\">//依赖清除和拷贝lib任务</span><br>    dependsOn(<span class=\"hljs-string\">&quot;copyLib&quot;</span>)<br>    exclude(<span class=\"hljs-string\">&quot;**/*.jar&quot;</span>) <span class=\"hljs-comment\">//打包时排除jar文件（不打包成fat jar）</span><br>    manifest &#123;<br>        attributes[<span class=\"hljs-string\">&quot;Manifest-Version&quot;</span>] = <span class=\"hljs-string\">&quot;1.0&quot;</span><br>        attributes[<span class=\"hljs-string\">&quot;Multi-Release&quot;</span>] = <span class=\"hljs-string\">&quot;true&quot;</span><br>        attributes[<span class=\"hljs-string\">&quot;Main-Class&quot;</span>] = <span class=\"hljs-string\">&quot;moe.kurenai.bot.BgmApplicationKt&quot;</span> <span class=\"hljs-comment\">//main方法所在的class，我这个例子是用的Kotlin所以带有Kt后缀</span><br>        attributes[<span class=\"hljs-string\">&quot;Class-Path&quot;</span>] = configurations.runtimeClasspath.<span class=\"hljs-keyword\">get</span>().files.map &#123; <span class=\"hljs-string\">&quot;lib/<span class=\"hljs-subst\">$&#123;it.name&#125;</span>&quot;</span> &#125;.joinToString(<span class=\"hljs-string\">&quot; &quot;</span>)  <span class=\"hljs-comment\">//构建出 lib/包名 的字符串并用空格分隔</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>最终效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">Manifest-Version: 1.0<br>Multi-Release: <span class=\"hljs-literal\">true</span><br>Main-Class: moe.kurenai.bot.BgmApplicationKt<br>Class-Path: lib/bangumi-sdk-0.0.1-SNAPSHOT.jar lib/td-light-sdk-0.0.1-SN<br> APSHOT.jar lib/kotlinx-coroutines-core-jvm-1.6.1.jar lib/kotlin-stdlib-<br> jdk8-1.6.21.jar lib/simple-cache-1.2.0-SNAPSHOT.jar lib/redisson-3.17.1<br> .jar lib/reflections-0.10.2.jar lib/log4j-core-2.17.1.jar lib/log4j-api<br> -2.17.1.jar lib/disruptor-3.4.4.jar lib/jackson-module-kotlin-2.13.1.ja<br> r lib/jackson-dataformat-yaml-2.13.1.jar lib/kotlin-stdlib-jdk7-1.6.21.<br> jar lib/kotlin-reflect-1.6.21.jar lib/kotlin-stdlib-1.6.21.jar lib/jack<br> son-datatype-jdk8-2.13.1.jar lib/jackson-datatype-jsr310-2.13.1.jar lib<br> /jackson-databind-2.13.1.jar lib/lettuce-core-6.1.6.RELEASE.jar lib/rea<br> ctor-core-3.4.17.jar lib/jackson-core-2.13.1.jar lib/jackson-annotation<br> s-2.13.1.jar lib/commons-lang3-3.12.0.jar lib/commons-pool2-2.10.0.jar <br> lib/commons-codec-1.3.jar lib/kryo-5.3.0.jar lib/netty-resolver-dns-4.1<br> .74.Final.jar lib/netty-handler-4.1.74.Final.jar lib/netty-codec-dns-4.<br> 1.74.Final.jar lib/netty-codec-4.1.74.Final.jar lib/netty-transport-4.1<br> .74.Final.jar lib/netty-buffer-4.1.74.Final.jar lib/netty-resolver-4.1.<br> 74.Final.jar lib/netty-common-4.1.74.Final.jar lib/cache-api-1.1.1.jar <br> lib/rxjava-3.0.12.jar lib/reactive-streams-1.0.3.jar lib/jboss-marshall<br> ing-river-2.0.11.Final.jar lib/jboss-marshalling-2.0.11.Final.jar lib/s<br> lf4j-api-1.7.36.jar lib/byte-buddy-1.11.0.jar lib/jodd-bean-5.1.6.jar l<br> ib/javassist-3.28.0-GA.jar lib/jsr305-3.0.2.jar lib/kotlin-stdlib-commo<br> n-1.6.21.jar lib/annotations-13.0.jar lib/reflectasm-1.11.9.jar lib/obj<br> enesis-3.2.jar lib/minlog-1.3.1.jar lib/snakeyaml-1.28.jar lib/netty-tc<br> native-classes-2.0.48.Final.jar lib/jodd-core-5.1.6.jar<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"0x03-1\"><a href=\"#0x03-1\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2><p>上面只是比较简单的示例，你还可以对你不经常变动的包分到另一个目录当中去（例如<code>bangumi-sdk-0.0.1-SNAPSHOT.jar</code>这个包是我自己写的sdk，会经常变动），这样更加能够利用好缓存构建docker镜像，实际上quarkus是分了4个文件夹。</p>"},{"title":"Nginx基础——Rewrite规则","date":"2018-12-30T07:13:00.000Z","comments":1,"thumbnail":"/gallery/machi.png","_content":"&emsp;&emsp;rewrite是nginx一个特别重要的指令，该指令可以使用正则表达式改写URI。可以指定一个或多个rewrite指令，按顺序匹配。\n\n<!--more-->\n## 正则匹配规则\n{% blockquote %}\n~  区分大小写匹配  \n~* 不区分大小写匹配  \n!~ 和 !~* 区分大小写不匹配及不区分大小写不匹配  \n{% endblockquote %}\n\n## 文件及目录匹配\n\n{% blockquote %}\n-f和!-f 判断是否存在文件  \n-d和!-d 判断是否存在目录  \n-e和!-e 判断是否存在文件或目录  \n-x和!-x 判断文件是否可执行\n{% endblockquote %}\n\n## rewrite基本语法\n\n{% codeblock %}\nset  \nif  \nreturn\nbreak\nrewrite\n{% endcodeblock %}\n\n### break指令  \n{% blockquote %}\n使用范围：server，location，if;  \n{% endblockquote %} \n\n中断当前相同作用域的其他nginx配置。 \n\n### if指令  \n{% blockquote %}\n使用范围：server，location  \n{% endblockquote %} \n\n检查一个条件是否符合。If指令不支持嵌套，不支持多个条件&&和||处理。\n\n### return指令\n{% blockquote %}\n格式：return code ;  \n使用范围：server，location，if;\n{% endblockquote %} \n\n结束规则的执行并返回状态码给客户端。\n\n### set指令\n{% blockquote %}\n使用环境：server，location，if  \n{% endblockquote %} \n\n定义一个变量，并给变量赋值。变量的值可以为文本、变量或者变量的组合。\n{% codeblock lang:bash %}\nset $var \"hello world\"\n{% endcodeblock %}\n\n## rewrite指令格式\n    rewrite regex replacement [flag]\nflag标志位有四种：\n{% blockquote %}\nbreak：停止rewrite检测,也就是说当含有break flag的rewrite语句被执行时,该语句就是rewrite的最终结果。   \nlast：停止rewrite检测,但是跟break有本质的不同,last的语句不一定是最终结果。  \nredirect：返回302临时重定向，一般用于重定向到完整的URL(包含http:部分)   \npermanent：返回301永久重定向，一般用于重定向到完整的URL(包含http:部分) \n{% endblockquote %} \n\n## 应用实例\n当访问的文件和目录不存在时，重定向到某个php文件\n\n{% codeblock %}\nif( !-e $request_filename )\n{\n    rewrite ^/(.*)$ index.php last;\n}\n{% endcodeblock %}\n    \n目录对换 /123456/xxxx ====> /xxxx?id=123456\n\n{% codeblock %}\nrewrite ^/(\\d+)/(.+)/  /$2?id=$1 last;\n{% endcodeblock %}\n    \n如果客户端使用的是IE浏览器，则重定向到/ie目录下\n\n{% codeblock %}\nif( $http_user_agent ~ MSIE)\n{\n    rewrite ^(.*)$ /ie/$1 break;\n}\n{% endcodeblock %}\n    \n禁止访问以/data开头的文件\n\n{% codeblock %}\nlocation ~ ^/data\n{\n    deny all;\n}\n{% endcodeblock %}\n    \n禁止访问以.sh，.flv，.mp3为文件后缀名的文件\n\n{% codeblock %}\nlocation ~ .*\\.(sh|flv|mp3)$\n{\n    return 403;\n}\n{% endcodeblock %}\n    \n设置某些类型文件的浏览器缓存时间\n\n{% codeblock %}\nlocation ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n{\n    expires 30d;\n}\n{% endcodeblock %}\n    \n文件反盗链并设置过期时间\n\n{% codeblock %}\nlocation ~*^.+\\.(jpg|jpeg|gif|png|swf|rar|zip|css|js)$ \n{\n    valid_referers none blocked *.linuxidc.com*.linuxidc.net localhost 208.97.167.194;\n    if ($invalid_referer) {\n        rewrite ^/ http://img.linuxidc.net/leech.gif;\n        return 412;\n        break;\n    }\n    access_log  off;\n    root /opt/lampp/htdocs/web;\n    expires 3d;\n    break;\n}\n{% endcodeblock %}\n    \n将多级目录下的文件转成一个文件，增强seo效果\n  \n{% codeblock %}  \n/job-123-456-789.html 指向/job/123/456/789.html\n\nrewrite^/job-([0-9]+)-([0-9]+)-([0-9]+)\\.html$ /job/$1/$2/jobshow_$3.html last;\n{% endcodeblock %}\n    \n域名跳转\n\n{% codeblock %}\nserver\n{\n    listen 80;\n    server_name jump.linuxidc.com;\n    index index.html index.htm index.php;\n    root /opt/lampp/htdocs/www;\n    rewrite ^/ http://www.linuxidc.com/;\n    access_log off;\n}\n{% endcodeblock %}\n    \n多域名转向\n\n{% codeblock %}\nserver_name www.linuxidc.comwww.linuxidc.net;\nindex index.html index.htm index.php;\nroot  /opt/lampp/htdocs;\nif ($host ~ \"linuxidc\\.net\") {\n    rewrite ^(.*) http://www.linuxidc.com$1permanent;\n}\n{% endcodeblock %}\n","source":"_posts/Nginx基础——Rewrite规则.md","raw":"---\ntitle: Nginx基础——Rewrite规则\ndate: 2018/12/30 15:13:00\ncategories: \n    - 编程\ntags: \n    - Nginx\n    - 转载\ncomments: true\nthumbnail: /gallery/machi.png\n---\n&emsp;&emsp;rewrite是nginx一个特别重要的指令，该指令可以使用正则表达式改写URI。可以指定一个或多个rewrite指令，按顺序匹配。\n\n<!--more-->\n## 正则匹配规则\n{% blockquote %}\n~  区分大小写匹配  \n~* 不区分大小写匹配  \n!~ 和 !~* 区分大小写不匹配及不区分大小写不匹配  \n{% endblockquote %}\n\n## 文件及目录匹配\n\n{% blockquote %}\n-f和!-f 判断是否存在文件  \n-d和!-d 判断是否存在目录  \n-e和!-e 判断是否存在文件或目录  \n-x和!-x 判断文件是否可执行\n{% endblockquote %}\n\n## rewrite基本语法\n\n{% codeblock %}\nset  \nif  \nreturn\nbreak\nrewrite\n{% endcodeblock %}\n\n### break指令  \n{% blockquote %}\n使用范围：server，location，if;  \n{% endblockquote %} \n\n中断当前相同作用域的其他nginx配置。 \n\n### if指令  \n{% blockquote %}\n使用范围：server，location  \n{% endblockquote %} \n\n检查一个条件是否符合。If指令不支持嵌套，不支持多个条件&&和||处理。\n\n### return指令\n{% blockquote %}\n格式：return code ;  \n使用范围：server，location，if;\n{% endblockquote %} \n\n结束规则的执行并返回状态码给客户端。\n\n### set指令\n{% blockquote %}\n使用环境：server，location，if  \n{% endblockquote %} \n\n定义一个变量，并给变量赋值。变量的值可以为文本、变量或者变量的组合。\n{% codeblock lang:bash %}\nset $var \"hello world\"\n{% endcodeblock %}\n\n## rewrite指令格式\n    rewrite regex replacement [flag]\nflag标志位有四种：\n{% blockquote %}\nbreak：停止rewrite检测,也就是说当含有break flag的rewrite语句被执行时,该语句就是rewrite的最终结果。   \nlast：停止rewrite检测,但是跟break有本质的不同,last的语句不一定是最终结果。  \nredirect：返回302临时重定向，一般用于重定向到完整的URL(包含http:部分)   \npermanent：返回301永久重定向，一般用于重定向到完整的URL(包含http:部分) \n{% endblockquote %} \n\n## 应用实例\n当访问的文件和目录不存在时，重定向到某个php文件\n\n{% codeblock %}\nif( !-e $request_filename )\n{\n    rewrite ^/(.*)$ index.php last;\n}\n{% endcodeblock %}\n    \n目录对换 /123456/xxxx ====> /xxxx?id=123456\n\n{% codeblock %}\nrewrite ^/(\\d+)/(.+)/  /$2?id=$1 last;\n{% endcodeblock %}\n    \n如果客户端使用的是IE浏览器，则重定向到/ie目录下\n\n{% codeblock %}\nif( $http_user_agent ~ MSIE)\n{\n    rewrite ^(.*)$ /ie/$1 break;\n}\n{% endcodeblock %}\n    \n禁止访问以/data开头的文件\n\n{% codeblock %}\nlocation ~ ^/data\n{\n    deny all;\n}\n{% endcodeblock %}\n    \n禁止访问以.sh，.flv，.mp3为文件后缀名的文件\n\n{% codeblock %}\nlocation ~ .*\\.(sh|flv|mp3)$\n{\n    return 403;\n}\n{% endcodeblock %}\n    \n设置某些类型文件的浏览器缓存时间\n\n{% codeblock %}\nlocation ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n{\n    expires 30d;\n}\n{% endcodeblock %}\n    \n文件反盗链并设置过期时间\n\n{% codeblock %}\nlocation ~*^.+\\.(jpg|jpeg|gif|png|swf|rar|zip|css|js)$ \n{\n    valid_referers none blocked *.linuxidc.com*.linuxidc.net localhost 208.97.167.194;\n    if ($invalid_referer) {\n        rewrite ^/ http://img.linuxidc.net/leech.gif;\n        return 412;\n        break;\n    }\n    access_log  off;\n    root /opt/lampp/htdocs/web;\n    expires 3d;\n    break;\n}\n{% endcodeblock %}\n    \n将多级目录下的文件转成一个文件，增强seo效果\n  \n{% codeblock %}  \n/job-123-456-789.html 指向/job/123/456/789.html\n\nrewrite^/job-([0-9]+)-([0-9]+)-([0-9]+)\\.html$ /job/$1/$2/jobshow_$3.html last;\n{% endcodeblock %}\n    \n域名跳转\n\n{% codeblock %}\nserver\n{\n    listen 80;\n    server_name jump.linuxidc.com;\n    index index.html index.htm index.php;\n    root /opt/lampp/htdocs/www;\n    rewrite ^/ http://www.linuxidc.com/;\n    access_log off;\n}\n{% endcodeblock %}\n    \n多域名转向\n\n{% codeblock %}\nserver_name www.linuxidc.comwww.linuxidc.net;\nindex index.html index.htm index.php;\nroot  /opt/lampp/htdocs;\nif ($host ~ \"linuxidc\\.net\") {\n    rewrite ^(.*) http://www.linuxidc.com$1permanent;\n}\n{% endcodeblock %}\n","slug":"Nginx基础——Rewrite规则","published":1,"updated":"2021-08-25T02:47:24.842Z","layout":"post","photos":[],"_id":"clzh7x5w50009q4qldvcs8gna","content":"<p>&emsp;&emsp;rewrite是nginx一个特别重要的指令，该指令可以使用正则表达式改写URI。可以指定一个或多个rewrite指令，按顺序匹配。</p>\n<span id=\"more\"></span>\n<h2 id=\"正则匹配规则\"><a href=\"#正则匹配规则\" class=\"headerlink\" title=\"正则匹配规则\"></a>正则匹配规则</h2><blockquote><p>~  区分大小写匹配<br><del>* 不区分大小写匹配<br>!</del> 和 !~* 区分大小写不匹配及不区分大小写不匹配  </p>\n</blockquote>\n\n<h2 id=\"文件及目录匹配\"><a href=\"#文件及目录匹配\" class=\"headerlink\" title=\"文件及目录匹配\"></a>文件及目录匹配</h2><blockquote><p>-f和!-f 判断是否存在文件<br>-d和!-d 判断是否存在目录<br>-e和!-e 判断是否存在文件或目录<br>-x和!-x 判断文件是否可执行</p>\n</blockquote>\n\n<h2 id=\"rewrite基本语法\"><a href=\"#rewrite基本语法\" class=\"headerlink\" title=\"rewrite基本语法\"></a>rewrite基本语法</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">set</span>  <br><span class=\"hljs-keyword\">if</span>  <br><span class=\"hljs-keyword\">return</span><br><span class=\"hljs-keyword\">break</span><br>rewrite<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"break指令\"><a href=\"#break指令\" class=\"headerlink\" title=\"break指令\"></a>break指令</h3><blockquote><p>使用范围：server，location，if;  </p>\n</blockquote> \n\n<p>中断当前相同作用域的其他nginx配置。 </p>\n<h3 id=\"if指令\"><a href=\"#if指令\" class=\"headerlink\" title=\"if指令\"></a>if指令</h3><blockquote><p>使用范围：server，location  </p>\n</blockquote> \n\n<p>检查一个条件是否符合。If指令不支持嵌套，不支持多个条件&amp;&amp;和||处理。</p>\n<h3 id=\"return指令\"><a href=\"#return指令\" class=\"headerlink\" title=\"return指令\"></a>return指令</h3><blockquote><p>格式：return code ;<br>使用范围：server，location，if;</p>\n</blockquote> \n\n<p>结束规则的执行并返回状态码给客户端。</p>\n<h3 id=\"set指令\"><a href=\"#set指令\" class=\"headerlink\" title=\"set指令\"></a>set指令</h3><blockquote><p>使用环境：server，location，if  </p>\n</blockquote> \n\n<p>定义一个变量，并给变量赋值。变量的值可以为文本、变量或者变量的组合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">set</span> <span class=\"hljs-variable\">$var</span> <span class=\"hljs-string\">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"rewrite指令格式\"><a href=\"#rewrite指令格式\" class=\"headerlink\" title=\"rewrite指令格式\"></a>rewrite指令格式</h2><pre><code class=\"hljs\">rewrite regex replacement [flag]\n</code></pre>\n<p>flag标志位有四种：</p>\n<blockquote><p>break：停止rewrite检测,也就是说当含有break flag的rewrite语句被执行时,该语句就是rewrite的最终结果。<br>last：停止rewrite检测,但是跟break有本质的不同,last的语句不一定是最终结果。<br>redirect：返回302临时重定向，一般用于重定向到完整的URL(包含http:部分)<br>permanent：返回301永久重定向，一般用于重定向到完整的URL(包含http:部分) </p>\n</blockquote> \n\n<h2 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h2><p>当访问的文件和目录不存在时，重定向到某个php文件</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-keyword\">if</span>( !-e <span class=\"hljs-variable\">$request_filename</span> )<br>&#123;<br>    rewrite ^/(.*)<span class=\"hljs-variable\">$ </span>index.php last;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>目录对换 /123456/xxxx ====&gt; /xxxx?id=123456</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^/(\\d+)/(.+)/</span>  /<span class=\"hljs-variable\">$2</span>?id=<span class=\"hljs-variable\">$1</span> <span class=\"hljs-literal\">last</span>;<br></code></pre></td></tr></table></figure>\n<p>如果客户端使用的是IE浏览器，则重定向到/ie目录下</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-keyword\">if</span>( <span class=\"hljs-variable\">$http_user_agent</span> ~ MSIE)<br>&#123;<br>    rewrite ^(.*)$ <span class=\"hljs-regexp\">/ie/</span><span class=\"hljs-variable\">$1</span> <span class=\"hljs-keyword\">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>禁止访问以/data开头的文件</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-keyword\">location</span> <span class=\"hljs-title\">~ ^/data</span><br>&#123;<br>    <span class=\"hljs-keyword\">deny</span> all;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>禁止访问以.sh，.flv，.mp3为文件后缀名的文件</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coq\">location ~ .*\\.(sh|<span class=\"hljs-type\">flv</span>|<span class=\"hljs-type\">mp3</span>)$<br>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">403</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>设置某些类型文件的浏览器缓存时间</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coq\">location ~ .*\\.(gif|<span class=\"hljs-type\">jpg</span>|<span class=\"hljs-type\">jpeg</span>|<span class=\"hljs-type\">png</span>|<span class=\"hljs-type\">bmp</span>|<span class=\"hljs-type\">swf</span>)$<br>&#123;<br>    expires <span class=\"hljs-number\">30</span>d;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>文件反盗链并设置过期时间</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coq\">location ~*^.+\\.(jpg|<span class=\"hljs-type\">jpeg</span>|<span class=\"hljs-type\">gif</span>|<span class=\"hljs-type\">png</span>|<span class=\"hljs-type\">swf</span>|<span class=\"hljs-type\">rar</span>|<span class=\"hljs-type\">zip</span>|<span class=\"hljs-type\">css</span>|<span class=\"hljs-type\">js</span>)$ <br>&#123;<br>    valid_referers none blocked *.linuxidc.com*.linuxidc.net localhost <span class=\"hljs-number\">208.97</span><span class=\"hljs-number\">.167</span><span class=\"hljs-number\">.194</span>;<br>    <span class=\"hljs-keyword\">if</span> ($invalid_referer) &#123;<br>        <span class=\"hljs-built_in\">rewrite</span> ^/ http://img.linuxidc.net/leech.gif;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">412</span>;<br>        break;<br>    &#125;<br>    access_log  off;<br>    root /opt/lampp/htdocs/web;<br>    expires <span class=\"hljs-number\">3</span>d;<br>    break;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>将多级目录下的文件转成一个文件，增强seo效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">  <br>/job-123-456-789.html 指向/job/123/456/789.html<br><br>rewrite^/job-([0-9]+)-([0-9]+)-([0-9]+)\\.html$ /job/<span class=\"hljs-variable\">$1</span>/<span class=\"hljs-variable\">$2</span>/jobshow_<span class=\"hljs-variable\">$3</span>.html last;<br></code></pre></td></tr></table></figure>\n<p>域名跳转</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span><br>&#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>    <span class=\"hljs-attribute\">server_name</span> jump.linuxidc.com;<br>    <span class=\"hljs-attribute\">index</span> index.html index.htm index.php;<br>    <span class=\"hljs-attribute\">root</span> /opt/lampp/htdocs/www;<br>    <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^/</span> http://www.linuxidc.com/;<br>    <span class=\"hljs-attribute\">access_log</span> <span class=\"hljs-literal\">off</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>多域名转向</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">server_name</span> www.linuxidc.comwww.linuxidc.net;<br><span class=\"hljs-attribute\">index</span> index.html index.htm index.php;<br><span class=\"hljs-attribute\">root</span>  /opt/lampp/htdocs;<br><span class=\"hljs-attribute\">if</span> (<span class=\"hljs-variable\">$host</span> <span class=\"hljs-regexp\">~ &quot;linuxidc\\.net&quot;)</span> &#123;<br>    <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^(.*)</span> http://www.linuxidc.com<span class=\"hljs-variable\">$1</span>permanent;<br>&#125;<br></code></pre></td></tr></table></figure>\n","excerpt":"<p>&emsp;&emsp;rewrite是nginx一个特别重要的指令，该指令可以使用正则表达式改写URI。可以指定一个或多个rewrite指令，按顺序匹配。</p>","more":"<h2 id=\"正则匹配规则\"><a href=\"#正则匹配规则\" class=\"headerlink\" title=\"正则匹配规则\"></a>正则匹配规则</h2><blockquote><p>~  区分大小写匹配<br><del>* 不区分大小写匹配<br>!</del> 和 !~* 区分大小写不匹配及不区分大小写不匹配  </p>\n</blockquote>\n\n<h2 id=\"文件及目录匹配\"><a href=\"#文件及目录匹配\" class=\"headerlink\" title=\"文件及目录匹配\"></a>文件及目录匹配</h2><blockquote><p>-f和!-f 判断是否存在文件<br>-d和!-d 判断是否存在目录<br>-e和!-e 判断是否存在文件或目录<br>-x和!-x 判断文件是否可执行</p>\n</blockquote>\n\n<h2 id=\"rewrite基本语法\"><a href=\"#rewrite基本语法\" class=\"headerlink\" title=\"rewrite基本语法\"></a>rewrite基本语法</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">set</span>  <br><span class=\"hljs-keyword\">if</span>  <br><span class=\"hljs-keyword\">return</span><br><span class=\"hljs-keyword\">break</span><br>rewrite<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"break指令\"><a href=\"#break指令\" class=\"headerlink\" title=\"break指令\"></a>break指令</h3><blockquote><p>使用范围：server，location，if;  </p>\n</blockquote> \n\n<p>中断当前相同作用域的其他nginx配置。 </p>\n<h3 id=\"if指令\"><a href=\"#if指令\" class=\"headerlink\" title=\"if指令\"></a>if指令</h3><blockquote><p>使用范围：server，location  </p>\n</blockquote> \n\n<p>检查一个条件是否符合。If指令不支持嵌套，不支持多个条件&amp;&amp;和||处理。</p>\n<h3 id=\"return指令\"><a href=\"#return指令\" class=\"headerlink\" title=\"return指令\"></a>return指令</h3><blockquote><p>格式：return code ;<br>使用范围：server，location，if;</p>\n</blockquote> \n\n<p>结束规则的执行并返回状态码给客户端。</p>\n<h3 id=\"set指令\"><a href=\"#set指令\" class=\"headerlink\" title=\"set指令\"></a>set指令</h3><blockquote><p>使用环境：server，location，if  </p>\n</blockquote> \n\n<p>定义一个变量，并给变量赋值。变量的值可以为文本、变量或者变量的组合。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">set</span> <span class=\"hljs-variable\">$var</span> <span class=\"hljs-string\">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"rewrite指令格式\"><a href=\"#rewrite指令格式\" class=\"headerlink\" title=\"rewrite指令格式\"></a>rewrite指令格式</h2><pre><code>rewrite regex replacement [flag]\n</code></pre>\n<p>flag标志位有四种：</p>\n<blockquote><p>break：停止rewrite检测,也就是说当含有break flag的rewrite语句被执行时,该语句就是rewrite的最终结果。<br>last：停止rewrite检测,但是跟break有本质的不同,last的语句不一定是最终结果。<br>redirect：返回302临时重定向，一般用于重定向到完整的URL(包含http:部分)<br>permanent：返回301永久重定向，一般用于重定向到完整的URL(包含http:部分) </p>\n</blockquote> \n\n<h2 id=\"应用实例\"><a href=\"#应用实例\" class=\"headerlink\" title=\"应用实例\"></a>应用实例</h2><p>当访问的文件和目录不存在时，重定向到某个php文件</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-keyword\">if</span>( !-e <span class=\"hljs-variable\">$request_filename</span> )<br>&#123;<br>    rewrite ^/(.*)<span class=\"hljs-variable\">$ </span>index.php last;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>目录对换 /123456/xxxx ====&gt; /xxxx?id=123456</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^/(\\d+)/(.+)/</span>  /<span class=\"hljs-variable\">$2</span>?id=<span class=\"hljs-variable\">$1</span> <span class=\"hljs-literal\">last</span>;<br></code></pre></td></tr></table></figure>\n<p>如果客户端使用的是IE浏览器，则重定向到/ie目录下</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-keyword\">if</span>( <span class=\"hljs-variable\">$http_user_agent</span> ~ MSIE)<br>&#123;<br>    rewrite ^(.*)$ <span class=\"hljs-regexp\">/ie/</span><span class=\"hljs-variable\">$1</span> <span class=\"hljs-keyword\">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>禁止访问以/data开头的文件</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-keyword\">location</span> <span class=\"hljs-title\">~ ^/data</span><br>&#123;<br>    <span class=\"hljs-keyword\">deny</span> all;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>禁止访问以.sh，.flv，.mp3为文件后缀名的文件</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coq\">location ~ .*\\.(sh|<span class=\"hljs-type\">flv</span>|<span class=\"hljs-type\">mp3</span>)$<br>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">403</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>设置某些类型文件的浏览器缓存时间</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coq\">location ~ .*\\.(gif|<span class=\"hljs-type\">jpg</span>|<span class=\"hljs-type\">jpeg</span>|<span class=\"hljs-type\">png</span>|<span class=\"hljs-type\">bmp</span>|<span class=\"hljs-type\">swf</span>)$<br>&#123;<br>    expires <span class=\"hljs-number\">30</span>d;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>文件反盗链并设置过期时间</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coq\">location ~*^.+\\.(jpg|<span class=\"hljs-type\">jpeg</span>|<span class=\"hljs-type\">gif</span>|<span class=\"hljs-type\">png</span>|<span class=\"hljs-type\">swf</span>|<span class=\"hljs-type\">rar</span>|<span class=\"hljs-type\">zip</span>|<span class=\"hljs-type\">css</span>|<span class=\"hljs-type\">js</span>)$ <br>&#123;<br>    valid_referers none blocked *.linuxidc.com*.linuxidc.net localhost <span class=\"hljs-number\">208.97</span><span class=\"hljs-number\">.167</span><span class=\"hljs-number\">.194</span>;<br>    <span class=\"hljs-keyword\">if</span> ($invalid_referer) &#123;<br>        <span class=\"hljs-built_in\">rewrite</span> ^/ http://img.linuxidc.net/leech.gif;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">412</span>;<br>        break;<br>    &#125;<br>    access_log  off;<br>    root /opt/lampp/htdocs/web;<br>    expires <span class=\"hljs-number\">3</span>d;<br>    break;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>将多级目录下的文件转成一个文件，增强seo效果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">  <br>/job-123-456-789.html 指向/job/123/456/789.html<br><br>rewrite^/job-([0-9]+)-([0-9]+)-([0-9]+)\\.html$ /job/<span class=\"hljs-variable\">$1</span>/<span class=\"hljs-variable\">$2</span>/jobshow_<span class=\"hljs-variable\">$3</span>.html last;<br></code></pre></td></tr></table></figure>\n<p>域名跳转</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span><br>&#123;<br>    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;<br>    <span class=\"hljs-attribute\">server_name</span> jump.linuxidc.com;<br>    <span class=\"hljs-attribute\">index</span> index.html index.htm index.php;<br>    <span class=\"hljs-attribute\">root</span> /opt/lampp/htdocs/www;<br>    <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^/</span> http://www.linuxidc.com/;<br>    <span class=\"hljs-attribute\">access_log</span> <span class=\"hljs-literal\">off</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>多域名转向</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">server_name</span> www.linuxidc.comwww.linuxidc.net;<br><span class=\"hljs-attribute\">index</span> index.html index.htm index.php;<br><span class=\"hljs-attribute\">root</span>  /opt/lampp/htdocs;<br><span class=\"hljs-attribute\">if</span> (<span class=\"hljs-variable\">$host</span> <span class=\"hljs-regexp\">~ &quot;linuxidc\\.net&quot;)</span> &#123;<br>    <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^(.*)</span> http://www.linuxidc.com<span class=\"hljs-variable\">$1</span>permanent;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"GraalVM With Spring","date":"2023-07-11T16:21:00.000Z","comments":1,"index_img":"/gallery/103834884.jpg","banner_img":"/gallery/103834884.jpg","_content":"最初看见 GraalVM 的时候我就想到 **Make jvm great again!** ！！  \n实际上我也在之前尝试过几次，但都是不理想或者失败了。这次我看到 Spring Boot 3 对 GraalVM 的支持更加完善了，就又想跑过来试试了，毕竟写 Kotlin 编译成 Native 还是太香了！（~~Kotlin 香，Native 香，香两次，简直香麻了~~）\n同样这次也都还是做一些折腾的记录。\n<!--more-->\n> 封面：画师是~~我岳父~~[おにねこ](https://www.pixiv.net/users/3952)，[封面链接](https://www.pixiv.net/artworks/103834884)。\n> 就说这位画师非常适合黑色哥特萝莉，201x年初时其实脸跟一些细节都让人感觉比较潦草，但是非常个人风格，背景也很好。现在整体都相较要好很多，细节要更加多。\n---\n## 前言\nGraalVM 与传统在 JVM 中运行的 JIT 编译不同，他是 AOT 编译。由于去掉了 JVM 后一些运行时的动态分析就会失效，如反射，代理，JNI，SPI 等等，而这里面一些资源也要显式声明，所以你需要大量的去告诉编译器这个类实际上运行时是谁，让它去分析这个类、资源的信息，最后才能够在运行时找到。\n\n这几乎就是转 GraalVM 的全部工作了，但不得不说这些工作量还是很大的。最初时大多项目都没有提供支持，导致你需要自己等待编译，然后运行报错看提示再去告诉编译器需要分析什么东西。\n\n如今，大多常用的包都有给出一些反射、代理或者资源的配置了，所以我又准备尝试了。\n\n## 环境准备\n### Windows\nWindows 环境非常恶劣，起初我几乎放弃了。\n就算是现在我也不能说我真的就了解怎么搭建环境了。\n~~所以珍惜生命远离 Windows~~\n\nOk，其实现在 GraalVM 的官网上面已经放出了一篇[教程](https://medium.com/graalvm/using-graalvm-and-native-image-on-windows-10-9954dc071311)，只需要安装好 vs 当中的一些组件即可\n\n**重点**：找到`x64 Native Tools Command Prompt for VS 2022`这个快捷方式，打开进入cmd，可以看到有个x64的输出，这个环境就算准备好了，2022可以是别的，但是前缀应该就是这些，x86是不支持的，交叉编译不知道。\n\n最后配置一下环境变量 `GRAALVM_HOME` 跟 `JAVA_HOME` 就好了了，这是为了 gradle 的 graalvm 的插件（`org.graalvm.buildtools.native`）做准备。\n\n### 其他\n其他大概就不太需要说明了，只要装上 GraalVM 的 sdk 就行了。\n\n## GraalVM 配置\nGraalVM 的配置是放在 `resource/META-INF/native-image/` 下面，我不太记得非 spring 项目下是不是默认读取这个目录下的配置了，这块现在[这个](https://github.com/oracle/graalvm-reachability-metadata)仓库有维护一些配置，可以直接拿过来用，主要是 copy 里面的 `reflect-config.json`, `proxy-config.json`，`jni-config.json`，`resource-config.json`\n\n## Spring 配置\n依赖什么的这个也没有什么特别说的，直接在[start.spring.io](https://start.spring.io/)上面选好依赖，查看它配置文件怎么写就好了。\n\n## RuntimeHintsRegistrar\n因为自己手写 json 不太可能的（~~手写是不可能手写的，这辈子都不可能~~），毕竟太多了不是人干的活，所以 GraalVM 有一个 agent 可以分析一下运行时情况。但是也不一定能够分析全，例如运行时并没有跑某几段代码等，所以我们就需要`RuntimeHintsRegistrar`来代码生成。\n\n这个类貌似GraalVM也有提供，但是因为用的 Spring，GraalVM 提供的就没有去研究了。\n\n```kotlin\n// hints 和 classLoader 都是实现这个类的`registerHints`方法传入的参数\n\n// 私有类无法访问时\nhints.reflection().registerTypeIfPresent(classLoader, \"com.github.benmanes.caffeine.cache.PSWMW\", MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\n// 一般情况，后面的 MemberCategory 类型就是要注册的东西，可以是全部方法、字段或者是 public 的方法、字段等等\nhints.reflection().registerType(ConstructorDetector::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.DECLARED_CLASSES)\n\n// 拥有内部类的时候\nAtomicLongFieldUpdater::class.java.declaredClasses.forEach {\n    hints.reflection().registerTypeIfPresent(classLoader, it.name, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.DECLARED_CLASSES)\n}\n// 一些基础类型的注册\nhints.jni().registerType(java.lang.Boolean::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.lang.Integer::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.lang.Long::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.lang.Double::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.lang.String::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.util.Arrays::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(Array::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(IntArray::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(LongArray::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(DoubleArray::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(BooleanArray::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\n\n// jni内部类的注册\nTdApi::class.nestedClasses.forEach { clazz ->\n    if (clazz.isSubclassOf(TdApi.Function::class).not()) {\n        hints.jni().registerTypeIfPresent(classLoader, \"${clazz.name}[]\")\n    }\n//            clazz.java.declaredMethods.forEach {\n//                hints.jni().registerMethod(it, ExecutableMode.INVOKE)\n//            }\n//            clazz.java.fields.forEach {\n//                hints.jni().registerField(it)\n//            }\n    hints.reflection().registerType(clazz.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\n    hints.jni().registerType(clazz.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\n}\n\n// 资源的注册\nhints.resources().registerPattern(\"META-INF/tdlightjni/*\")\n```\n\n写完这个类后，找个`@Configuration`的类或者程序入口类添加`@ImportRuntimeHints(YourHintsRegirar::class)`，这样他就会编译的时候在`build/generated/aotResources`下生成对应的配置文件，可以打开检查一下生成有没有问题。\n\n## 编译\nOk，万事俱备了，就剩下编译了。\n\n> Windows编译必须要在刚刚说到的`x64 Native Tools Command Prompt for VS 2022`当中执行命令。\n\n执行`gradle nativeCompile`等待编译完成。\n\n编译完成会在`build/native/nativeCompile`目录下找到可执行文件，执行即可。\n\n## 结语\n这东西我 5600X 几乎需要花 3min+ 编译，当你不太确定或者一些库用了大量反射或者大量个人库但是没有相关配置的时候，你可能需要给他写大量的配置文件，重复 N 次编译，所以如果可以，还是在配置比较高的情况下玩，不然一天很快过去的www\n","source":"_posts/graalvm-with-spring-boot.md","raw":"---\ntitle: GraalVM With Spring\ndate: 2023-07-12 0:21:00\ncategories:\n    - 折腾记录\ntags:\n    - GraalVM\ncomments: true\nindex_img: /gallery/103834884.jpg\nbanner_img: /gallery/103834884.jpg\n\n---\n最初看见 GraalVM 的时候我就想到 **Make jvm great again!** ！！  \n实际上我也在之前尝试过几次，但都是不理想或者失败了。这次我看到 Spring Boot 3 对 GraalVM 的支持更加完善了，就又想跑过来试试了，毕竟写 Kotlin 编译成 Native 还是太香了！（~~Kotlin 香，Native 香，香两次，简直香麻了~~）\n同样这次也都还是做一些折腾的记录。\n<!--more-->\n> 封面：画师是~~我岳父~~[おにねこ](https://www.pixiv.net/users/3952)，[封面链接](https://www.pixiv.net/artworks/103834884)。\n> 就说这位画师非常适合黑色哥特萝莉，201x年初时其实脸跟一些细节都让人感觉比较潦草，但是非常个人风格，背景也很好。现在整体都相较要好很多，细节要更加多。\n---\n## 前言\nGraalVM 与传统在 JVM 中运行的 JIT 编译不同，他是 AOT 编译。由于去掉了 JVM 后一些运行时的动态分析就会失效，如反射，代理，JNI，SPI 等等，而这里面一些资源也要显式声明，所以你需要大量的去告诉编译器这个类实际上运行时是谁，让它去分析这个类、资源的信息，最后才能够在运行时找到。\n\n这几乎就是转 GraalVM 的全部工作了，但不得不说这些工作量还是很大的。最初时大多项目都没有提供支持，导致你需要自己等待编译，然后运行报错看提示再去告诉编译器需要分析什么东西。\n\n如今，大多常用的包都有给出一些反射、代理或者资源的配置了，所以我又准备尝试了。\n\n## 环境准备\n### Windows\nWindows 环境非常恶劣，起初我几乎放弃了。\n就算是现在我也不能说我真的就了解怎么搭建环境了。\n~~所以珍惜生命远离 Windows~~\n\nOk，其实现在 GraalVM 的官网上面已经放出了一篇[教程](https://medium.com/graalvm/using-graalvm-and-native-image-on-windows-10-9954dc071311)，只需要安装好 vs 当中的一些组件即可\n\n**重点**：找到`x64 Native Tools Command Prompt for VS 2022`这个快捷方式，打开进入cmd，可以看到有个x64的输出，这个环境就算准备好了，2022可以是别的，但是前缀应该就是这些，x86是不支持的，交叉编译不知道。\n\n最后配置一下环境变量 `GRAALVM_HOME` 跟 `JAVA_HOME` 就好了了，这是为了 gradle 的 graalvm 的插件（`org.graalvm.buildtools.native`）做准备。\n\n### 其他\n其他大概就不太需要说明了，只要装上 GraalVM 的 sdk 就行了。\n\n## GraalVM 配置\nGraalVM 的配置是放在 `resource/META-INF/native-image/` 下面，我不太记得非 spring 项目下是不是默认读取这个目录下的配置了，这块现在[这个](https://github.com/oracle/graalvm-reachability-metadata)仓库有维护一些配置，可以直接拿过来用，主要是 copy 里面的 `reflect-config.json`, `proxy-config.json`，`jni-config.json`，`resource-config.json`\n\n## Spring 配置\n依赖什么的这个也没有什么特别说的，直接在[start.spring.io](https://start.spring.io/)上面选好依赖，查看它配置文件怎么写就好了。\n\n## RuntimeHintsRegistrar\n因为自己手写 json 不太可能的（~~手写是不可能手写的，这辈子都不可能~~），毕竟太多了不是人干的活，所以 GraalVM 有一个 agent 可以分析一下运行时情况。但是也不一定能够分析全，例如运行时并没有跑某几段代码等，所以我们就需要`RuntimeHintsRegistrar`来代码生成。\n\n这个类貌似GraalVM也有提供，但是因为用的 Spring，GraalVM 提供的就没有去研究了。\n\n```kotlin\n// hints 和 classLoader 都是实现这个类的`registerHints`方法传入的参数\n\n// 私有类无法访问时\nhints.reflection().registerTypeIfPresent(classLoader, \"com.github.benmanes.caffeine.cache.PSWMW\", MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)\n\n// 一般情况，后面的 MemberCategory 类型就是要注册的东西，可以是全部方法、字段或者是 public 的方法、字段等等\nhints.reflection().registerType(ConstructorDetector::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.DECLARED_CLASSES)\n\n// 拥有内部类的时候\nAtomicLongFieldUpdater::class.java.declaredClasses.forEach {\n    hints.reflection().registerTypeIfPresent(classLoader, it.name, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.DECLARED_CLASSES)\n}\n// 一些基础类型的注册\nhints.jni().registerType(java.lang.Boolean::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.lang.Integer::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.lang.Long::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.lang.Double::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.lang.String::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(java.util.Arrays::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(Array::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(IntArray::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(LongArray::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(DoubleArray::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\nhints.jni().registerType(BooleanArray::class.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\n\n// jni内部类的注册\nTdApi::class.nestedClasses.forEach { clazz ->\n    if (clazz.isSubclassOf(TdApi.Function::class).not()) {\n        hints.jni().registerTypeIfPresent(classLoader, \"${clazz.name}[]\")\n    }\n//            clazz.java.declaredMethods.forEach {\n//                hints.jni().registerMethod(it, ExecutableMode.INVOKE)\n//            }\n//            clazz.java.fields.forEach {\n//                hints.jni().registerField(it)\n//            }\n    hints.reflection().registerType(clazz.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\n    hints.jni().registerType(clazz.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)\n}\n\n// 资源的注册\nhints.resources().registerPattern(\"META-INF/tdlightjni/*\")\n```\n\n写完这个类后，找个`@Configuration`的类或者程序入口类添加`@ImportRuntimeHints(YourHintsRegirar::class)`，这样他就会编译的时候在`build/generated/aotResources`下生成对应的配置文件，可以打开检查一下生成有没有问题。\n\n## 编译\nOk，万事俱备了，就剩下编译了。\n\n> Windows编译必须要在刚刚说到的`x64 Native Tools Command Prompt for VS 2022`当中执行命令。\n\n执行`gradle nativeCompile`等待编译完成。\n\n编译完成会在`build/native/nativeCompile`目录下找到可执行文件，执行即可。\n\n## 结语\n这东西我 5600X 几乎需要花 3min+ 编译，当你不太确定或者一些库用了大量反射或者大量个人库但是没有相关配置的时候，你可能需要给他写大量的配置文件，重复 N 次编译，所以如果可以，还是在配置比较高的情况下玩，不然一天很快过去的www\n","slug":"graalvm-with-spring-boot","published":1,"updated":"2024-08-03T13:37:56.572Z","layout":"post","photos":[],"_id":"clzh7x5w6000aq4qld1z05t3t","content":"<p>最初看见 GraalVM 的时候我就想到 <strong>Make jvm great again!</strong> ！！<br>实际上我也在之前尝试过几次，但都是不理想或者失败了。这次我看到 Spring Boot 3 对 GraalVM 的支持更加完善了，就又想跑过来试试了，毕竟写 Kotlin 编译成 Native 还是太香了！（<del>Kotlin 香，Native 香，香两次，简直香麻了</del>）<br>同样这次也都还是做一些折腾的记录。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>封面：画师是<del>我岳父</del><a href=\"https://www.pixiv.net/users/3952\">おにねこ</a>，<a href=\"https://www.pixiv.net/artworks/103834884\">封面链接</a>。<br>就说这位画师非常适合黑色哥特萝莉，201x年初时其实脸跟一些细节都让人感觉比较潦草，但是非常个人风格，背景也很好。现在整体都相较要好很多，细节要更加多。</p>\n</blockquote>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>GraalVM 与传统在 JVM 中运行的 JIT 编译不同，他是 AOT 编译。由于去掉了 JVM 后一些运行时的动态分析就会失效，如反射，代理，JNI，SPI 等等，而这里面一些资源也要显式声明，所以你需要大量的去告诉编译器这个类实际上运行时是谁，让它去分析这个类、资源的信息，最后才能够在运行时找到。</p>\n<p>这几乎就是转 GraalVM 的全部工作了，但不得不说这些工作量还是很大的。最初时大多项目都没有提供支持，导致你需要自己等待编译，然后运行报错看提示再去告诉编译器需要分析什么东西。</p>\n<p>如今，大多常用的包都有给出一些反射、代理或者资源的配置了，所以我又准备尝试了。</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>Windows 环境非常恶劣，起初我几乎放弃了。<br>就算是现在我也不能说我真的就了解怎么搭建环境了。<br><del>所以珍惜生命远离 Windows</del></p>\n<p>Ok，其实现在 GraalVM 的官网上面已经放出了一篇<a href=\"https://medium.com/graalvm/using-graalvm-and-native-image-on-windows-10-9954dc071311\">教程</a>，只需要安装好 vs 当中的一些组件即可</p>\n<p><strong>重点</strong>：找到<code>x64 Native Tools Command Prompt for VS 2022</code>这个快捷方式，打开进入cmd，可以看到有个x64的输出，这个环境就算准备好了，2022可以是别的，但是前缀应该就是这些，x86是不支持的，交叉编译不知道。</p>\n<p>最后配置一下环境变量 <code>GRAALVM_HOME</code> 跟 <code>JAVA_HOME</code> 就好了了，这是为了 gradle 的 graalvm 的插件（<code>org.graalvm.buildtools.native</code>）做准备。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>其他大概就不太需要说明了，只要装上 GraalVM 的 sdk 就行了。</p>\n<h2 id=\"GraalVM-配置\"><a href=\"#GraalVM-配置\" class=\"headerlink\" title=\"GraalVM 配置\"></a>GraalVM 配置</h2><p>GraalVM 的配置是放在 <code>resource/META-INF/native-image/</code> 下面，我不太记得非 spring 项目下是不是默认读取这个目录下的配置了，这块现在<a href=\"https://github.com/oracle/graalvm-reachability-metadata\">这个</a>仓库有维护一些配置，可以直接拿过来用，主要是 copy 里面的 <code>reflect-config.json</code>, <code>proxy-config.json</code>，<code>jni-config.json</code>，<code>resource-config.json</code></p>\n<h2 id=\"Spring-配置\"><a href=\"#Spring-配置\" class=\"headerlink\" title=\"Spring 配置\"></a>Spring 配置</h2><p>依赖什么的这个也没有什么特别说的，直接在<a href=\"https://start.spring.io/\">start.spring.io</a>上面选好依赖，查看它配置文件怎么写就好了。</p>\n<h2 id=\"RuntimeHintsRegistrar\"><a href=\"#RuntimeHintsRegistrar\" class=\"headerlink\" title=\"RuntimeHintsRegistrar\"></a>RuntimeHintsRegistrar</h2><p>因为自己手写 json 不太可能的（<del>手写是不可能手写的，这辈子都不可能</del>），毕竟太多了不是人干的活，所以 GraalVM 有一个 agent 可以分析一下运行时情况。但是也不一定能够分析全，例如运行时并没有跑某几段代码等，所以我们就需要<code>RuntimeHintsRegistrar</code>来代码生成。</p>\n<p>这个类貌似GraalVM也有提供，但是因为用的 Spring，GraalVM 提供的就没有去研究了。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-comment\">// hints 和 classLoader 都是实现这个类的`registerHints`方法传入的参数</span><br><br><span class=\"hljs-comment\">// 私有类无法访问时</span><br>hints.reflection().registerTypeIfPresent(classLoader, <span class=\"hljs-string\">&quot;com.github.benmanes.caffeine.cache.PSWMW&quot;</span>, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)<br><br><span class=\"hljs-comment\">// 一般情况，后面的 MemberCategory 类型就是要注册的东西，可以是全部方法、字段或者是 public 的方法、字段等等</span><br>hints.reflection().registerType(ConstructorDetector::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.DECLARED_CLASSES)<br><br><span class=\"hljs-comment\">// 拥有内部类的时候</span><br>AtomicLongFieldUpdater::<span class=\"hljs-keyword\">class</span>.java.declaredClasses.forEach &#123;<br>    hints.reflection().registerTypeIfPresent(classLoader, it.name, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.DECLARED_CLASSES)<br>&#125;<br><span class=\"hljs-comment\">// 一些基础类型的注册</span><br>hints.jni().registerType(java.lang.<span class=\"hljs-built_in\">Boolean</span>::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.lang.Integer::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.lang.<span class=\"hljs-built_in\">Long</span>::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.lang.<span class=\"hljs-built_in\">Double</span>::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.lang.String::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.util.Arrays::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(Array::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(IntArray::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(LongArray::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(DoubleArray::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(BooleanArray::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br><br><span class=\"hljs-comment\">// jni内部类的注册</span><br>TdApi::<span class=\"hljs-keyword\">class</span>.nestedClasses.forEach &#123; clazz -&gt;<br>    <span class=\"hljs-keyword\">if</span> (clazz.isSubclassOf(TdApi.Function::<span class=\"hljs-keyword\">class</span>).not()) &#123;<br>        hints.jni().registerTypeIfPresent(classLoader, <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;clazz.name&#125;</span>[]&quot;</span>)<br>    &#125;<br><span class=\"hljs-comment\">//            clazz.java.declaredMethods.forEach &#123;</span><br><span class=\"hljs-comment\">//                hints.jni().registerMethod(it, ExecutableMode.INVOKE)</span><br><span class=\"hljs-comment\">//            &#125;</span><br><span class=\"hljs-comment\">//            clazz.java.fields.forEach &#123;</span><br><span class=\"hljs-comment\">//                hints.jni().registerField(it)</span><br><span class=\"hljs-comment\">//            &#125;</span><br>    hints.reflection().registerType(clazz.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>    hints.jni().registerType(clazz.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>&#125;<br><br><span class=\"hljs-comment\">// 资源的注册</span><br>hints.resources().registerPattern(<span class=\"hljs-string\">&quot;META-INF/tdlightjni/*&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>写完这个类后，找个<code>@Configuration</code>的类或者程序入口类添加<code>@ImportRuntimeHints(YourHintsRegirar::class)</code>，这样他就会编译的时候在<code>build/generated/aotResources</code>下生成对应的配置文件，可以打开检查一下生成有没有问题。</p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>Ok，万事俱备了，就剩下编译了。</p>\n<blockquote>\n<p>Windows编译必须要在刚刚说到的<code>x64 Native Tools Command Prompt for VS 2022</code>当中执行命令。</p>\n</blockquote>\n<p>执行<code>gradle nativeCompile</code>等待编译完成。</p>\n<p>编译完成会在<code>build/native/nativeCompile</code>目录下找到可执行文件，执行即可。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这东西我 5600X 几乎需要花 3min+ 编译，当你不太确定或者一些库用了大量反射或者大量个人库但是没有相关配置的时候，你可能需要给他写大量的配置文件，重复 N 次编译，所以如果可以，还是在配置比较高的情况下玩，不然一天很快过去的www</p>\n","excerpt":"<p>最初看见 GraalVM 的时候我就想到 <strong>Make jvm great again!</strong> ！！<br>实际上我也在之前尝试过几次，但都是不理想或者失败了。这次我看到 Spring Boot 3 对 GraalVM 的支持更加完善了，就又想跑过来试试了，毕竟写 Kotlin 编译成 Native 还是太香了！（<del>Kotlin 香，Native 香，香两次，简直香麻了</del>）<br>同样这次也都还是做一些折腾的记录。</p>","more":"<blockquote>\n<p>封面：画师是<del>我岳父</del><a href=\"https://www.pixiv.net/users/3952\">おにねこ</a>，<a href=\"https://www.pixiv.net/artworks/103834884\">封面链接</a>。<br>就说这位画师非常适合黑色哥特萝莉，201x年初时其实脸跟一些细节都让人感觉比较潦草，但是非常个人风格，背景也很好。现在整体都相较要好很多，细节要更加多。</p>\n</blockquote>\n<hr>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>GraalVM 与传统在 JVM 中运行的 JIT 编译不同，他是 AOT 编译。由于去掉了 JVM 后一些运行时的动态分析就会失效，如反射，代理，JNI，SPI 等等，而这里面一些资源也要显式声明，所以你需要大量的去告诉编译器这个类实际上运行时是谁，让它去分析这个类、资源的信息，最后才能够在运行时找到。</p>\n<p>这几乎就是转 GraalVM 的全部工作了，但不得不说这些工作量还是很大的。最初时大多项目都没有提供支持，导致你需要自己等待编译，然后运行报错看提示再去告诉编译器需要分析什么东西。</p>\n<p>如今，大多常用的包都有给出一些反射、代理或者资源的配置了，所以我又准备尝试了。</p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>Windows 环境非常恶劣，起初我几乎放弃了。<br>就算是现在我也不能说我真的就了解怎么搭建环境了。<br><del>所以珍惜生命远离 Windows</del></p>\n<p>Ok，其实现在 GraalVM 的官网上面已经放出了一篇<a href=\"https://medium.com/graalvm/using-graalvm-and-native-image-on-windows-10-9954dc071311\">教程</a>，只需要安装好 vs 当中的一些组件即可</p>\n<p><strong>重点</strong>：找到<code>x64 Native Tools Command Prompt for VS 2022</code>这个快捷方式，打开进入cmd，可以看到有个x64的输出，这个环境就算准备好了，2022可以是别的，但是前缀应该就是这些，x86是不支持的，交叉编译不知道。</p>\n<p>最后配置一下环境变量 <code>GRAALVM_HOME</code> 跟 <code>JAVA_HOME</code> 就好了了，这是为了 gradle 的 graalvm 的插件（<code>org.graalvm.buildtools.native</code>）做准备。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>其他大概就不太需要说明了，只要装上 GraalVM 的 sdk 就行了。</p>\n<h2 id=\"GraalVM-配置\"><a href=\"#GraalVM-配置\" class=\"headerlink\" title=\"GraalVM 配置\"></a>GraalVM 配置</h2><p>GraalVM 的配置是放在 <code>resource/META-INF/native-image/</code> 下面，我不太记得非 spring 项目下是不是默认读取这个目录下的配置了，这块现在<a href=\"https://github.com/oracle/graalvm-reachability-metadata\">这个</a>仓库有维护一些配置，可以直接拿过来用，主要是 copy 里面的 <code>reflect-config.json</code>, <code>proxy-config.json</code>，<code>jni-config.json</code>，<code>resource-config.json</code></p>\n<h2 id=\"Spring-配置\"><a href=\"#Spring-配置\" class=\"headerlink\" title=\"Spring 配置\"></a>Spring 配置</h2><p>依赖什么的这个也没有什么特别说的，直接在<a href=\"https://start.spring.io/\">start.spring.io</a>上面选好依赖，查看它配置文件怎么写就好了。</p>\n<h2 id=\"RuntimeHintsRegistrar\"><a href=\"#RuntimeHintsRegistrar\" class=\"headerlink\" title=\"RuntimeHintsRegistrar\"></a>RuntimeHintsRegistrar</h2><p>因为自己手写 json 不太可能的（<del>手写是不可能手写的，这辈子都不可能</del>），毕竟太多了不是人干的活，所以 GraalVM 有一个 agent 可以分析一下运行时情况。但是也不一定能够分析全，例如运行时并没有跑某几段代码等，所以我们就需要<code>RuntimeHintsRegistrar</code>来代码生成。</p>\n<p>这个类貌似GraalVM也有提供，但是因为用的 Spring，GraalVM 提供的就没有去研究了。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-comment\">// hints 和 classLoader 都是实现这个类的`registerHints`方法传入的参数</span><br><br><span class=\"hljs-comment\">// 私有类无法访问时</span><br>hints.reflection().registerTypeIfPresent(classLoader, <span class=\"hljs-string\">&quot;com.github.benmanes.caffeine.cache.PSWMW&quot;</span>, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS)<br><br><span class=\"hljs-comment\">// 一般情况，后面的 MemberCategory 类型就是要注册的东西，可以是全部方法、字段或者是 public 的方法、字段等等</span><br>hints.reflection().registerType(ConstructorDetector::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.DECLARED_CLASSES)<br><br><span class=\"hljs-comment\">// 拥有内部类的时候</span><br>AtomicLongFieldUpdater::<span class=\"hljs-keyword\">class</span>.java.declaredClasses.forEach &#123;<br>    hints.reflection().registerTypeIfPresent(classLoader, it.name, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_METHODS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.DECLARED_CLASSES)<br>&#125;<br><span class=\"hljs-comment\">// 一些基础类型的注册</span><br>hints.jni().registerType(java.lang.<span class=\"hljs-built_in\">Boolean</span>::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.lang.Integer::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.lang.<span class=\"hljs-built_in\">Long</span>::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.lang.<span class=\"hljs-built_in\">Double</span>::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.lang.String::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(java.util.Arrays::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(Array::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(IntArray::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(LongArray::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(DoubleArray::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>hints.jni().registerType(BooleanArray::<span class=\"hljs-keyword\">class</span>.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br><br><span class=\"hljs-comment\">// jni内部类的注册</span><br>TdApi::<span class=\"hljs-keyword\">class</span>.nestedClasses.forEach &#123; clazz -&gt;<br>    <span class=\"hljs-keyword\">if</span> (clazz.isSubclassOf(TdApi.Function::<span class=\"hljs-keyword\">class</span>).not()) &#123;<br>        hints.jni().registerTypeIfPresent(classLoader, <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$&#123;clazz.name&#125;</span>[]&quot;</span>)<br>    &#125;<br><span class=\"hljs-comment\">//            clazz.java.declaredMethods.forEach &#123;</span><br><span class=\"hljs-comment\">//                hints.jni().registerMethod(it, ExecutableMode.INVOKE)</span><br><span class=\"hljs-comment\">//            &#125;</span><br><span class=\"hljs-comment\">//            clazz.java.fields.forEach &#123;</span><br><span class=\"hljs-comment\">//                hints.jni().registerField(it)</span><br><span class=\"hljs-comment\">//            &#125;</span><br>    hints.reflection().registerType(clazz.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>    hints.jni().registerType(clazz.java, MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)<br>&#125;<br><br><span class=\"hljs-comment\">// 资源的注册</span><br>hints.resources().registerPattern(<span class=\"hljs-string\">&quot;META-INF/tdlightjni/*&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n<p>写完这个类后，找个<code>@Configuration</code>的类或者程序入口类添加<code>@ImportRuntimeHints(YourHintsRegirar::class)</code>，这样他就会编译的时候在<code>build/generated/aotResources</code>下生成对应的配置文件，可以打开检查一下生成有没有问题。</p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>Ok，万事俱备了，就剩下编译了。</p>\n<blockquote>\n<p>Windows编译必须要在刚刚说到的<code>x64 Native Tools Command Prompt for VS 2022</code>当中执行命令。</p>\n</blockquote>\n<p>执行<code>gradle nativeCompile</code>等待编译完成。</p>\n<p>编译完成会在<code>build/native/nativeCompile</code>目录下找到可执行文件，执行即可。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>这东西我 5600X 几乎需要花 3min+ 编译，当你不太确定或者一些库用了大量反射或者大量个人库但是没有相关配置的时候，你可能需要给他写大量的配置文件，重复 N 次编译，所以如果可以，还是在配置比较高的情况下玩，不然一天很快过去的www</p>"},{"title":"Reactor中的上下文","date":"2020-09-08T14:53:22.000Z","comments":1,"thumbnail":"/gallery/machi.png","_content":"由于参与的项目当中决定用 [spring-cloud-gateway](https://github.com/spring-cloud/spring-cloud-gateway) 作为网关，所以自然就碰上了Reactor当中获取上下文的问题。    \n\n这里我是遇到了 I18N 需要获取上下文中 Locale 的问题，所以我就以这个问题举例，提供其中一种上下文的解决方法。  \n<!--more-->\n\n## What happened\n在使用 I18N 进行国际化时，Servlet 框架下我们通常会使用 ThreadLocal 进行储存解析请求得到上下文的 Locale 对象，以判断当前请求需要的是什么语言。  \n但在 Reactor 框架下，由于一个请求整个流程下来，线程都在不断的进行切换，所以 ThreadLocal 自然也就失去上下文储存对象的能力。\n\n经过简单的谷歌查询，我只能想两种处理方法：  \n\n1. 从 controller 获取 Locale 或者任意能够得到 Exchange（类似 Request）的方法开始一路传递下去。\n2. 直接将 I18N 的 key 传入自定义异常对象当中，然后在统一异常处理类当中获取 Exchange 再做进一步的国际化操作。\n    \n但他们都不够优雅，而且其中弊端也很明显，一个是需要无限传递变量，一个是只能限制再异常处理类进行处理，理所当然就无法添加国际化的变量。\n\n## How should I do\n### 如何取值\n令人喜悦的是，Spring 其实已经写了一个获取上下文的例子了，它就是`ReactiveSecurityContextHolder`，对应 Servlet 当中的`SecurityContextHolder`。\n\nReactiveSecurityContextHolder#getContext\n```\nprivate static final Class<?> SECURITY_CONTEXT_KEY = SecurityContext.class;\n\npublic static Mono<SecurityContext> getContext() {\n        return Mono.subscriberContext()\n            .filter( c -> c.hasKey(SECURITY_CONTEXT_KEY))       \n            .flatMap( c-> c.<Mono<SecurityContext>>get(SECURITY_CONTEXT_KEY));\n}\n```\n可以看到，通过`Mono.subscriberContext()`，我们可以得到一个上下文对象，然后他先判断是否包含给出的key值，包含则获取值。  \n这里需要注意，如果直接获取值会抛出异常。   \n\n\n### 如何赋值    \n当我查看`withSecurityContext`方法时，其注释告诉我是用来创建一个包含`SecurityContext`的 Reactor 上下文对象（Context）并可被用于与其他上下文对象（Context）进行合并。  \n\n所以当我们查看有什么方法调用它时，就会发现`ReactorContextWebFilter`这个过滤器。\n```\npublic class ReactorContextWebFilter implements WebFilter {\n    private final ServerSecurityContextRepository repository;\n\n    public ReactorContextWebFilter(ServerSecurityContextRepository repository) {\n        Assert.notNull(repository, \"repository cannot be null\");\n        this.repository = repository;\n    }\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n        return chain.filter(exchange)\n            .subscriberContext(c -> c.hasKey(SecurityContext.class) ? c :\n                withSecurityContext(c, exchange)\n            );\n    }\n\n    private Context withSecurityContext(Context mainContext, ServerWebExchange exchange) {\n        return mainContext.putAll(this.repository.load(exchange)\n            .as(ReactiveSecurityContextHolder::withSecurityContext));\n    }\n}\n```\nServerSecurityContextRepository#load\n```\npublic Mono<SecurityContext> load(ServerWebExchange exchange) {\n    return exchange.getSession()\n        .map(WebSession::getAttributes)\n        .flatMap( attrs -> {\n            SecurityContext context = (SecurityContext) attrs.get(this.springSecurityContextAttrName);\n            return Mono.justOrEmpty(context);\n        });\n}\n```\nReactiveSecurityContextHolder#withSecurityContext\n```\npublic static Context withSecurityContext(Mono<? extends SecurityContext> securityContext) {\n    return Context.of(SECURITY_CONTEXT_KEY, securityContext);\n}\n```\n通过阅读上面的代码可得知，上面的过滤器通过`ServerSecurityContextRepository`解析请求中的 Security 上下文，通过`ReactiveSecurityContextHolder`生成 Securtiy 上下文对象并返回。\n\n## Finally\n我们可以仿照着写一个从请求对象当中解析出一个 Locale 对象并放入上下文当中（不确定是不是上下文，但是Reactor确实是用这种办法实现了上下文的功能）。  \n```\n// 将 Locale 放到上下文中\npublic class ReactorLocaleContextWebFilter implements WebFilter {\n    \n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n        return chain.filter(exchange)\n            .subscriberContext(c -> c.hasKey(Locale.class) ? c :\n                withLocaleContext(c, exchange)\n            );\n    }\n\n    private Context withLocaleContext(Context mainContext, ServerWebExchange exchange) {\n        //解析请求获取 Locale \n        Locale locale = getLocale(exchcange);\n        return mainContext.putAll(Context.of(Locale.class, Mono.justOrEmpty(locale)));\n    }\n}\n\n//获取 Locale\nMono.subscriberContext()\n            .filter( c -> c.hasKey(Locale.class))       \n            .flatMap( c-> c.<Mono<Locale>>get(Locale.class));\n```\n\n\n具体实现我日后会写一个demo。~~咕咕咕~~\n    \n","source":"_posts/context-of-reactor.md","raw":"---\ntitle: Reactor中的上下文\ndate: 2020-09-08 22:53:22\ncategories: \n    - Java\n    - Reactor\ntags: \n    - Java\n    - Reactor\n    - Webflux\n    - Spring\ncomments: true\nthumbnail: /gallery/machi.png\n---\n由于参与的项目当中决定用 [spring-cloud-gateway](https://github.com/spring-cloud/spring-cloud-gateway) 作为网关，所以自然就碰上了Reactor当中获取上下文的问题。    \n\n这里我是遇到了 I18N 需要获取上下文中 Locale 的问题，所以我就以这个问题举例，提供其中一种上下文的解决方法。  \n<!--more-->\n\n## What happened\n在使用 I18N 进行国际化时，Servlet 框架下我们通常会使用 ThreadLocal 进行储存解析请求得到上下文的 Locale 对象，以判断当前请求需要的是什么语言。  \n但在 Reactor 框架下，由于一个请求整个流程下来，线程都在不断的进行切换，所以 ThreadLocal 自然也就失去上下文储存对象的能力。\n\n经过简单的谷歌查询，我只能想两种处理方法：  \n\n1. 从 controller 获取 Locale 或者任意能够得到 Exchange（类似 Request）的方法开始一路传递下去。\n2. 直接将 I18N 的 key 传入自定义异常对象当中，然后在统一异常处理类当中获取 Exchange 再做进一步的国际化操作。\n    \n但他们都不够优雅，而且其中弊端也很明显，一个是需要无限传递变量，一个是只能限制再异常处理类进行处理，理所当然就无法添加国际化的变量。\n\n## How should I do\n### 如何取值\n令人喜悦的是，Spring 其实已经写了一个获取上下文的例子了，它就是`ReactiveSecurityContextHolder`，对应 Servlet 当中的`SecurityContextHolder`。\n\nReactiveSecurityContextHolder#getContext\n```\nprivate static final Class<?> SECURITY_CONTEXT_KEY = SecurityContext.class;\n\npublic static Mono<SecurityContext> getContext() {\n        return Mono.subscriberContext()\n            .filter( c -> c.hasKey(SECURITY_CONTEXT_KEY))       \n            .flatMap( c-> c.<Mono<SecurityContext>>get(SECURITY_CONTEXT_KEY));\n}\n```\n可以看到，通过`Mono.subscriberContext()`，我们可以得到一个上下文对象，然后他先判断是否包含给出的key值，包含则获取值。  \n这里需要注意，如果直接获取值会抛出异常。   \n\n\n### 如何赋值    \n当我查看`withSecurityContext`方法时，其注释告诉我是用来创建一个包含`SecurityContext`的 Reactor 上下文对象（Context）并可被用于与其他上下文对象（Context）进行合并。  \n\n所以当我们查看有什么方法调用它时，就会发现`ReactorContextWebFilter`这个过滤器。\n```\npublic class ReactorContextWebFilter implements WebFilter {\n    private final ServerSecurityContextRepository repository;\n\n    public ReactorContextWebFilter(ServerSecurityContextRepository repository) {\n        Assert.notNull(repository, \"repository cannot be null\");\n        this.repository = repository;\n    }\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n        return chain.filter(exchange)\n            .subscriberContext(c -> c.hasKey(SecurityContext.class) ? c :\n                withSecurityContext(c, exchange)\n            );\n    }\n\n    private Context withSecurityContext(Context mainContext, ServerWebExchange exchange) {\n        return mainContext.putAll(this.repository.load(exchange)\n            .as(ReactiveSecurityContextHolder::withSecurityContext));\n    }\n}\n```\nServerSecurityContextRepository#load\n```\npublic Mono<SecurityContext> load(ServerWebExchange exchange) {\n    return exchange.getSession()\n        .map(WebSession::getAttributes)\n        .flatMap( attrs -> {\n            SecurityContext context = (SecurityContext) attrs.get(this.springSecurityContextAttrName);\n            return Mono.justOrEmpty(context);\n        });\n}\n```\nReactiveSecurityContextHolder#withSecurityContext\n```\npublic static Context withSecurityContext(Mono<? extends SecurityContext> securityContext) {\n    return Context.of(SECURITY_CONTEXT_KEY, securityContext);\n}\n```\n通过阅读上面的代码可得知，上面的过滤器通过`ServerSecurityContextRepository`解析请求中的 Security 上下文，通过`ReactiveSecurityContextHolder`生成 Securtiy 上下文对象并返回。\n\n## Finally\n我们可以仿照着写一个从请求对象当中解析出一个 Locale 对象并放入上下文当中（不确定是不是上下文，但是Reactor确实是用这种办法实现了上下文的功能）。  \n```\n// 将 Locale 放到上下文中\npublic class ReactorLocaleContextWebFilter implements WebFilter {\n    \n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n        return chain.filter(exchange)\n            .subscriberContext(c -> c.hasKey(Locale.class) ? c :\n                withLocaleContext(c, exchange)\n            );\n    }\n\n    private Context withLocaleContext(Context mainContext, ServerWebExchange exchange) {\n        //解析请求获取 Locale \n        Locale locale = getLocale(exchcange);\n        return mainContext.putAll(Context.of(Locale.class, Mono.justOrEmpty(locale)));\n    }\n}\n\n//获取 Locale\nMono.subscriberContext()\n            .filter( c -> c.hasKey(Locale.class))       \n            .flatMap( c-> c.<Mono<Locale>>get(Locale.class));\n```\n\n\n具体实现我日后会写一个demo。~~咕咕咕~~\n    \n","slug":"context-of-reactor","published":1,"updated":"2020-10-06T03:32:33.987Z","layout":"post","photos":[],"_id":"clzh7x5w7000dq4ql3gdhext2","content":"<p>由于参与的项目当中决定用 <a href=\"https://github.com/spring-cloud/spring-cloud-gateway\">spring-cloud-gateway</a> 作为网关，所以自然就碰上了Reactor当中获取上下文的问题。    </p>\n<p>这里我是遇到了 I18N 需要获取上下文中 Locale 的问题，所以我就以这个问题举例，提供其中一种上下文的解决方法。  </p>\n<span id=\"more\"></span>\n\n<h2 id=\"What-happened\"><a href=\"#What-happened\" class=\"headerlink\" title=\"What happened\"></a>What happened</h2><p>在使用 I18N 进行国际化时，Servlet 框架下我们通常会使用 ThreadLocal 进行储存解析请求得到上下文的 Locale 对象，以判断当前请求需要的是什么语言。<br>但在 Reactor 框架下，由于一个请求整个流程下来，线程都在不断的进行切换，所以 ThreadLocal 自然也就失去上下文储存对象的能力。</p>\n<p>经过简单的谷歌查询，我只能想两种处理方法：  </p>\n<ol>\n<li>从 controller 获取 Locale 或者任意能够得到 Exchange（类似 Request）的方法开始一路传递下去。</li>\n<li>直接将 I18N 的 key 传入自定义异常对象当中，然后在统一异常处理类当中获取 Exchange 再做进一步的国际化操作。</li>\n</ol>\n<p>但他们都不够优雅，而且其中弊端也很明显，一个是需要无限传递变量，一个是只能限制再异常处理类进行处理，理所当然就无法添加国际化的变量。</p>\n<h2 id=\"How-should-I-do\"><a href=\"#How-should-I-do\" class=\"headerlink\" title=\"How should I do\"></a>How should I do</h2><h3 id=\"如何取值\"><a href=\"#如何取值\" class=\"headerlink\" title=\"如何取值\"></a>如何取值</h3><p>令人喜悦的是，Spring 其实已经写了一个获取上下文的例子了，它就是<code>ReactiveSecurityContextHolder</code>，对应 Servlet 当中的<code>SecurityContextHolder</code>。</p>\n<p>ReactiveSecurityContextHolder#getContext</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Class</span>&lt;?&gt; <span class=\"hljs-type\">SECURITY_CONTEXT_KEY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">SecurityContext</span>.class;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Mono</span>&lt;<span class=\"hljs-type\">SecurityContext</span>&gt; getContext() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Mono</span>.subscriberContext()<br>            .filter( c -&gt; c.hasKey(<span class=\"hljs-type\">SECURITY_CONTEXT_KEY</span>))       <br>            .flatMap( c-&gt; c<span class=\"hljs-operator\">.&lt;</span><span class=\"hljs-type\">Mono</span>&lt;<span class=\"hljs-type\">SecurityContext</span>&gt;<span class=\"hljs-operator\">&gt;</span><span class=\"hljs-keyword\">get</span>(<span class=\"hljs-type\">SECURITY_CONTEXT_KEY</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>可以看到，通过<code>Mono.subscriberContext()</code>，我们可以得到一个上下文对象，然后他先判断是否包含给出的key值，包含则获取值。<br>这里需要注意，如果直接获取值会抛出异常。   </p>\n<h3 id=\"如何赋值\"><a href=\"#如何赋值\" class=\"headerlink\" title=\"如何赋值\"></a>如何赋值</h3><p>当我查看<code>withSecurityContext</code>方法时，其注释告诉我是用来创建一个包含<code>SecurityContext</code>的 Reactor 上下文对象（Context）并可被用于与其他上下文对象（Context）进行合并。  </p>\n<p>所以当我们查看有什么方法调用它时，就会发现<code>ReactorContextWebFilter</code>这个过滤器。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReactorContextWebFilter</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">WebFilter</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ServerSecurityContextRepository repository;<br><br>    <span class=\"hljs-keyword\">public</span> ReactorContextWebFilter(ServerSecurityContextRepository repository) &#123;<br>        Assert.notNull(repository, <span class=\"hljs-string\">&quot;repository cannot be null&quot;</span>);<br>        <span class=\"hljs-keyword\">this</span>.repository = repository;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; filter(ServerWebExchange exchange, WebFilterChain chain) &#123;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange)<br>            .subscriberContext(c -&gt; c.hasKey(SecurityContext.<span class=\"hljs-keyword\">class</span>) ? c :<br>                withSecurityContext(c, exchange)<br>            );<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Context withSecurityContext(Context mainContext, ServerWebExchange exchange) &#123;<br>        <span class=\"hljs-keyword\">return</span> mainContext.putAll(<span class=\"hljs-keyword\">this</span>.repository.load(exchange)<br>            .<span class=\"hljs-keyword\">as</span>(ReactiveSecurityContextHolder::withSecurityContext));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>ServerSecurityContextRepository#load</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">public</span> Mono&lt;SecurityContext&gt; load(ServerWebExchange exchange) &#123;<br>    <span class=\"hljs-keyword\">return</span> exchange.getSession()<br>        .map(WebSession::getAttributes)<br>        .flatMap( attrs -&gt; &#123;<br>            SecurityContext context = (SecurityContext) attrs.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-keyword\">this</span>.springSecurityContextAttrName);<br>            <span class=\"hljs-keyword\">return</span> Mono.justOrEmpty(context);<br>        &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>ReactiveSecurityContextHolder#withSecurityContext</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\">Context <span class=\"hljs-title\">withSecurityContext</span><span class=\"hljs-params\">(Mono&lt;? <span class=\"hljs-keyword\">extends</span> SecurityContext&gt; securityContext)</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> Context.<span class=\"hljs-title\">of</span><span class=\"hljs-params\">(SECURITY_CONTEXT_KEY, securityContext)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通过阅读上面的代码可得知，上面的过滤器通过<code>ServerSecurityContextRepository</code>解析请求中的 Security 上下文，通过<code>ReactiveSecurityContextHolder</code>生成 Securtiy 上下文对象并返回。</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h2><p>我们可以仿照着写一个从请求对象当中解析出一个 Locale 对象并放入上下文当中（不确定是不是上下文，但是Reactor确实是用这种办法实现了上下文的功能）。  </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-comment\">// 将 Locale 放到上下文中</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReactorLocaleContextWebFilter</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">WebFilter</span> &#123;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; filter(ServerWebExchange exchange, WebFilterChain chain) &#123;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange)<br>            .subscriberContext(c -&gt; c.hasKey(Locale.<span class=\"hljs-keyword\">class</span>) ? c :<br>                withLocaleContext(c, exchange)<br>            );<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Context withLocaleContext(Context mainContext, ServerWebExchange exchange) &#123;<br>        <span class=\"hljs-comment\">//解析请求获取 Locale </span><br>        Locale locale = getLocale(exchcange);<br>        <span class=\"hljs-keyword\">return</span> mainContext.putAll(Context.of(Locale.<span class=\"hljs-keyword\">class</span>, Mono.justOrEmpty(locale)));<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//获取 Locale</span><br>Mono.subscriberContext()<br>            .filter( c -&gt; c.hasKey(Locale.<span class=\"hljs-keyword\">class</span>))       <br>            .flatMap( c-&gt; c.&lt;Mono&lt;Locale&gt;&gt;<span class=\"hljs-keyword\">get</span>(Locale.<span class=\"hljs-keyword\">class</span>));<br></code></pre></td></tr></table></figure>\n\n\n<p>具体实现我日后会写一个demo。<del>咕咕咕</del></p>\n","excerpt":"<p>由于参与的项目当中决定用 <a href=\"https://github.com/spring-cloud/spring-cloud-gateway\">spring-cloud-gateway</a> 作为网关，所以自然就碰上了Reactor当中获取上下文的问题。    </p>\n<p>这里我是遇到了 I18N 需要获取上下文中 Locale 的问题，所以我就以这个问题举例，提供其中一种上下文的解决方法。  </p>","more":"<h2 id=\"What-happened\"><a href=\"#What-happened\" class=\"headerlink\" title=\"What happened\"></a>What happened</h2><p>在使用 I18N 进行国际化时，Servlet 框架下我们通常会使用 ThreadLocal 进行储存解析请求得到上下文的 Locale 对象，以判断当前请求需要的是什么语言。<br>但在 Reactor 框架下，由于一个请求整个流程下来，线程都在不断的进行切换，所以 ThreadLocal 自然也就失去上下文储存对象的能力。</p>\n<p>经过简单的谷歌查询，我只能想两种处理方法：  </p>\n<ol>\n<li>从 controller 获取 Locale 或者任意能够得到 Exchange（类似 Request）的方法开始一路传递下去。</li>\n<li>直接将 I18N 的 key 传入自定义异常对象当中，然后在统一异常处理类当中获取 Exchange 再做进一步的国际化操作。</li>\n</ol>\n<p>但他们都不够优雅，而且其中弊端也很明显，一个是需要无限传递变量，一个是只能限制再异常处理类进行处理，理所当然就无法添加国际化的变量。</p>\n<h2 id=\"How-should-I-do\"><a href=\"#How-should-I-do\" class=\"headerlink\" title=\"How should I do\"></a>How should I do</h2><h3 id=\"如何取值\"><a href=\"#如何取值\" class=\"headerlink\" title=\"如何取值\"></a>如何取值</h3><p>令人喜悦的是，Spring 其实已经写了一个获取上下文的例子了，它就是<code>ReactiveSecurityContextHolder</code>，对应 Servlet 当中的<code>SecurityContextHolder</code>。</p>\n<p>ReactiveSecurityContextHolder#getContext</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Class</span>&lt;?&gt; <span class=\"hljs-type\">SECURITY_CONTEXT_KEY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">SecurityContext</span>.class;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Mono</span>&lt;<span class=\"hljs-type\">SecurityContext</span>&gt; getContext() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">Mono</span>.subscriberContext()<br>            .filter( c -&gt; c.hasKey(<span class=\"hljs-type\">SECURITY_CONTEXT_KEY</span>))       <br>            .flatMap( c-&gt; c<span class=\"hljs-operator\">.&lt;</span><span class=\"hljs-type\">Mono</span>&lt;<span class=\"hljs-type\">SecurityContext</span>&gt;<span class=\"hljs-operator\">&gt;</span><span class=\"hljs-keyword\">get</span>(<span class=\"hljs-type\">SECURITY_CONTEXT_KEY</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>可以看到，通过<code>Mono.subscriberContext()</code>，我们可以得到一个上下文对象，然后他先判断是否包含给出的key值，包含则获取值。<br>这里需要注意，如果直接获取值会抛出异常。   </p>\n<h3 id=\"如何赋值\"><a href=\"#如何赋值\" class=\"headerlink\" title=\"如何赋值\"></a>如何赋值</h3><p>当我查看<code>withSecurityContext</code>方法时，其注释告诉我是用来创建一个包含<code>SecurityContext</code>的 Reactor 上下文对象（Context）并可被用于与其他上下文对象（Context）进行合并。  </p>\n<p>所以当我们查看有什么方法调用它时，就会发现<code>ReactorContextWebFilter</code>这个过滤器。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReactorContextWebFilter</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">WebFilter</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> ServerSecurityContextRepository repository;<br><br>    <span class=\"hljs-keyword\">public</span> ReactorContextWebFilter(ServerSecurityContextRepository repository) &#123;<br>        Assert.notNull(repository, <span class=\"hljs-string\">&quot;repository cannot be null&quot;</span>);<br>        <span class=\"hljs-keyword\">this</span>.repository = repository;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; filter(ServerWebExchange exchange, WebFilterChain chain) &#123;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange)<br>            .subscriberContext(c -&gt; c.hasKey(SecurityContext.<span class=\"hljs-keyword\">class</span>) ? c :<br>                withSecurityContext(c, exchange)<br>            );<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Context withSecurityContext(Context mainContext, ServerWebExchange exchange) &#123;<br>        <span class=\"hljs-keyword\">return</span> mainContext.putAll(<span class=\"hljs-keyword\">this</span>.repository.load(exchange)<br>            .<span class=\"hljs-keyword\">as</span>(ReactiveSecurityContextHolder::withSecurityContext));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>ServerSecurityContextRepository#load</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">public</span> Mono&lt;SecurityContext&gt; load(ServerWebExchange exchange) &#123;<br>    <span class=\"hljs-keyword\">return</span> exchange.getSession()<br>        .map(WebSession::getAttributes)<br>        .flatMap( attrs -&gt; &#123;<br>            SecurityContext context = (SecurityContext) attrs.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-keyword\">this</span>.springSecurityContextAttrName);<br>            <span class=\"hljs-keyword\">return</span> Mono.justOrEmpty(context);<br>        &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>ReactiveSecurityContextHolder#withSecurityContext</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\">Context <span class=\"hljs-title\">withSecurityContext</span><span class=\"hljs-params\">(Mono&lt;? <span class=\"hljs-keyword\">extends</span> SecurityContext&gt; securityContext)</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> Context.<span class=\"hljs-title\">of</span><span class=\"hljs-params\">(SECURITY_CONTEXT_KEY, securityContext)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通过阅读上面的代码可得知，上面的过滤器通过<code>ServerSecurityContextRepository</code>解析请求中的 Security 上下文，通过<code>ReactiveSecurityContextHolder</code>生成 Securtiy 上下文对象并返回。</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h2><p>我们可以仿照着写一个从请求对象当中解析出一个 Locale 对象并放入上下文当中（不确定是不是上下文，但是Reactor确实是用这种办法实现了上下文的功能）。  </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-comment\">// 将 Locale 放到上下文中</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReactorLocaleContextWebFilter</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">WebFilter</span> &#123;<br>    <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;<span class=\"hljs-built_in\">Void</span>&gt; filter(ServerWebExchange exchange, WebFilterChain chain) &#123;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange)<br>            .subscriberContext(c -&gt; c.hasKey(Locale.<span class=\"hljs-keyword\">class</span>) ? c :<br>                withLocaleContext(c, exchange)<br>            );<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Context withLocaleContext(Context mainContext, ServerWebExchange exchange) &#123;<br>        <span class=\"hljs-comment\">//解析请求获取 Locale </span><br>        Locale locale = getLocale(exchcange);<br>        <span class=\"hljs-keyword\">return</span> mainContext.putAll(Context.of(Locale.<span class=\"hljs-keyword\">class</span>, Mono.justOrEmpty(locale)));<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//获取 Locale</span><br>Mono.subscriberContext()<br>            .filter( c -&gt; c.hasKey(Locale.<span class=\"hljs-keyword\">class</span>))       <br>            .flatMap( c-&gt; c.&lt;Mono&lt;Locale&gt;&gt;<span class=\"hljs-keyword\">get</span>(Locale.<span class=\"hljs-keyword\">class</span>));<br></code></pre></td></tr></table></figure>\n\n\n<p>具体实现我日后会写一个demo。<del>咕咕咕</del></p>"},{"title":"Hello World","date":"2017-03-19T16:00:00.000Z","thumbnail":"/gallery/1549865117004_x68h12oa.png","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n<!--more-->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2017/3/20\ntags: tags\nthumbnail: /gallery/1549865117004_x68h12oa.png\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n<!--more-->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2019-08-14T12:07:21.217Z","comments":1,"layout":"post","photos":[],"_id":"clzh7x5w7000eq4qleusvg48m","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<!--more-->\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<!--more-->\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"面试题笔记01","date":"2021-05-17T01:18:07.000Z","hide":false,"comments":1,"index_img":"/gallery/Arknights01.jpg","banner_img":"/gallery/Arknights01.jpg","_content":"记录一下看过的一些面试题。\n<!--more-->\n> 封面  \n> 这位画师的脸以及上色很有特点，稍微留意一下很容易就能够辨别出来了，只是表情总给人一种同样的感觉w\n> https://twitter.com/__LM7__/status/1379416474293465090\n\n## MQ接收到消息后无法查询到或者是旧的状态\n\n原因\n- 数据库回滚  \n- 数据库事务未提交\n\n解决办法\n- 可以尝试将mq放在数据库事务之后执行。\n- 可以利用@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)监听spring事务afterCommit阶段。\n  \n    ```java\n    @Transactional\n    public boolean saveFoo(FooEntity fooEntity) throws InterruptedException {\n        log.error(\"start insert foo\");\n        fooRepository.save(fooEntity);\n        publisher.publishEvent(new MyTransactionEvent(fooEntity.getFooName()));\n        log.error(\"end insert foo\");\n        Thread.currentThread().sleep(2000);\n        log.error(\"to commit insert\");\n        return true;\n    }\n    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)\n    public void afterCommit(MyTransactionEvent event) {\n        log.error(\"after commit then send event {}\", event);\n        log.error(\"after commit then send event {}\", event.getName());\n    }\n    ```\n    发送的spring事件会在监听到AFTER_COMMIT时执行  \n    参考：https://blog.csdn.net/little_kelvin/article/details/111330768\n\n## MQ偶然接收到重复消息\n接收端消费了消息但是没有向broker发送ack或者broker没有接收到ack，导致broker将消息再次入队被其他接收端或同一个接收端消费，造成了重复消费消息\n\n接收端方法做幂等：\n新增，则可以在消息做一个唯一主键，重复了则会异常，保证数据库没有脏数据。\n修改，一般都为幂等，修改多少次一般都是一样的结果。\n\n如果还是比较困难，则用redis记录每次消费并生成全局唯一键<id,message>，每次消费查询一次redis，存在消费记录则不进行消费（处理）\n### 熔断与服务降级 \n当请求某个服务超时或是响应过慢，并在一定时间内次数达到一定阈值，为了防止调用链路响应过长而引发的服务雪崩，我们将暂时不去请求这个服务， 而是调用降级方法，并下线该服务。期间一般会在过去一定时间后，尝试再次请求该服务，获得响应后才会上线，不然都将是调用降级方法。\n\n例如Hystrix，它有一个滑动时间窗的概念，在这个滑动的时间窗内（默认20s），错误率达到阈值（默认50%）则将打开熔断器，并经过一段时间之后（默认5s）再次执行一次检测是否应该打开熔断器。\n熔断器在打开期间，调用此服务将直接返回失败（服务降级），不再远程调用。\n\n> 注意\n> 服务降级不一定伴随着熔断出现，他还可能是开关降级、限流降级。\n> 但是熔断是一定会出现服务降级的。\n> 即熔断是服务降级的子集\n\n> ps: 服务雪崩是指由于调用链路当中，下游的服务响应太慢或者超时导致上游服务的请求得不到释放， 逐渐导致连接数达到上限从而又对上游服务造成影响 ，如此往复直到最上游服务难以承受压力（超过最大连接数等）\n\n\n  \n  ","source":"_posts/interview-note-01.md","raw":"---\ntitle: 面试题笔记01\ndate: 2021-05-17 09:18:07\ncategories:\n    - 编程\ntags:\n    - MQ\n    - Micro Service\n    - Redis\nhide: false\ncomments: true\nindex_img: /gallery/Arknights01.jpg\nbanner_img: /gallery/Arknights01.jpg\n---\n记录一下看过的一些面试题。\n<!--more-->\n> 封面  \n> 这位画师的脸以及上色很有特点，稍微留意一下很容易就能够辨别出来了，只是表情总给人一种同样的感觉w\n> https://twitter.com/__LM7__/status/1379416474293465090\n\n## MQ接收到消息后无法查询到或者是旧的状态\n\n原因\n- 数据库回滚  \n- 数据库事务未提交\n\n解决办法\n- 可以尝试将mq放在数据库事务之后执行。\n- 可以利用@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)监听spring事务afterCommit阶段。\n  \n    ```java\n    @Transactional\n    public boolean saveFoo(FooEntity fooEntity) throws InterruptedException {\n        log.error(\"start insert foo\");\n        fooRepository.save(fooEntity);\n        publisher.publishEvent(new MyTransactionEvent(fooEntity.getFooName()));\n        log.error(\"end insert foo\");\n        Thread.currentThread().sleep(2000);\n        log.error(\"to commit insert\");\n        return true;\n    }\n    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)\n    public void afterCommit(MyTransactionEvent event) {\n        log.error(\"after commit then send event {}\", event);\n        log.error(\"after commit then send event {}\", event.getName());\n    }\n    ```\n    发送的spring事件会在监听到AFTER_COMMIT时执行  \n    参考：https://blog.csdn.net/little_kelvin/article/details/111330768\n\n## MQ偶然接收到重复消息\n接收端消费了消息但是没有向broker发送ack或者broker没有接收到ack，导致broker将消息再次入队被其他接收端或同一个接收端消费，造成了重复消费消息\n\n接收端方法做幂等：\n新增，则可以在消息做一个唯一主键，重复了则会异常，保证数据库没有脏数据。\n修改，一般都为幂等，修改多少次一般都是一样的结果。\n\n如果还是比较困难，则用redis记录每次消费并生成全局唯一键<id,message>，每次消费查询一次redis，存在消费记录则不进行消费（处理）\n### 熔断与服务降级 \n当请求某个服务超时或是响应过慢，并在一定时间内次数达到一定阈值，为了防止调用链路响应过长而引发的服务雪崩，我们将暂时不去请求这个服务， 而是调用降级方法，并下线该服务。期间一般会在过去一定时间后，尝试再次请求该服务，获得响应后才会上线，不然都将是调用降级方法。\n\n例如Hystrix，它有一个滑动时间窗的概念，在这个滑动的时间窗内（默认20s），错误率达到阈值（默认50%）则将打开熔断器，并经过一段时间之后（默认5s）再次执行一次检测是否应该打开熔断器。\n熔断器在打开期间，调用此服务将直接返回失败（服务降级），不再远程调用。\n\n> 注意\n> 服务降级不一定伴随着熔断出现，他还可能是开关降级、限流降级。\n> 但是熔断是一定会出现服务降级的。\n> 即熔断是服务降级的子集\n\n> ps: 服务雪崩是指由于调用链路当中，下游的服务响应太慢或者超时导致上游服务的请求得不到释放， 逐渐导致连接数达到上限从而又对上游服务造成影响 ，如此往复直到最上游服务难以承受压力（超过最大连接数等）\n\n\n  \n  ","slug":"interview-note-01","published":1,"updated":"2021-08-25T02:47:24.843Z","layout":"post","photos":[],"_id":"clzh7x5w9000iq4ql11tlf9jd","content":"<p>记录一下看过的一些面试题。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>封面<br>这位画师的脸以及上色很有特点，稍微留意一下很容易就能够辨别出来了，只是表情总给人一种同样的感觉w<br><a href=\"https://twitter.com/__LM7__/status/1379416474293465090\">https://twitter.com/__LM7__/status/1379416474293465090</a></p>\n</blockquote>\n<h2 id=\"MQ接收到消息后无法查询到或者是旧的状态\"><a href=\"#MQ接收到消息后无法查询到或者是旧的状态\" class=\"headerlink\" title=\"MQ接收到消息后无法查询到或者是旧的状态\"></a>MQ接收到消息后无法查询到或者是旧的状态</h2><p>原因</p>\n<ul>\n<li>数据库回滚  </li>\n<li>数据库事务未提交</li>\n</ul>\n<p>解决办法</p>\n<ul>\n<li>可以尝试将mq放在数据库事务之后执行。</li>\n<li>可以利用@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)监听spring事务afterCommit阶段。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Transactional</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">saveFoo</span><span class=\"hljs-params\">(FooEntity fooEntity)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>    log.error(<span class=\"hljs-string\">&quot;start insert foo&quot;</span>);<br>    fooRepository.save(fooEntity);<br>    publisher.publishEvent(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyTransactionEvent</span>(fooEntity.getFooName()));<br>    log.error(<span class=\"hljs-string\">&quot;end insert foo&quot;</span>);<br>    Thread.currentThread().sleep(<span class=\"hljs-number\">2000</span>);<br>    log.error(<span class=\"hljs-string\">&quot;to commit insert&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-meta\">@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCommit</span><span class=\"hljs-params\">(MyTransactionEvent event)</span> &#123;<br>    log.error(<span class=\"hljs-string\">&quot;after commit then send event &#123;&#125;&quot;</span>, event);<br>    log.error(<span class=\"hljs-string\">&quot;after commit then send event &#123;&#125;&quot;</span>, event.getName());<br>&#125;<br></code></pre></td></tr></table></figure>\n  发送的spring事件会在监听到AFTER_COMMIT时执行<br>  参考：<a href=\"https://blog.csdn.net/little_kelvin/article/details/111330768\">https://blog.csdn.net/little_kelvin/article/details/111330768</a></li>\n</ul>\n<h2 id=\"MQ偶然接收到重复消息\"><a href=\"#MQ偶然接收到重复消息\" class=\"headerlink\" title=\"MQ偶然接收到重复消息\"></a>MQ偶然接收到重复消息</h2><p>接收端消费了消息但是没有向broker发送ack或者broker没有接收到ack，导致broker将消息再次入队被其他接收端或同一个接收端消费，造成了重复消费消息</p>\n<p>接收端方法做幂等：<br>新增，则可以在消息做一个唯一主键，重复了则会异常，保证数据库没有脏数据。<br>修改，一般都为幂等，修改多少次一般都是一样的结果。</p>\n<p>如果还是比较困难，则用redis记录每次消费并生成全局唯一键&lt;id,message&gt;，每次消费查询一次redis，存在消费记录则不进行消费（处理）</p>\n<h3 id=\"熔断与服务降级\"><a href=\"#熔断与服务降级\" class=\"headerlink\" title=\"熔断与服务降级\"></a>熔断与服务降级</h3><p>当请求某个服务超时或是响应过慢，并在一定时间内次数达到一定阈值，为了防止调用链路响应过长而引发的服务雪崩，我们将暂时不去请求这个服务， 而是调用降级方法，并下线该服务。期间一般会在过去一定时间后，尝试再次请求该服务，获得响应后才会上线，不然都将是调用降级方法。</p>\n<p>例如Hystrix，它有一个滑动时间窗的概念，在这个滑动的时间窗内（默认20s），错误率达到阈值（默认50%）则将打开熔断器，并经过一段时间之后（默认5s）再次执行一次检测是否应该打开熔断器。<br>熔断器在打开期间，调用此服务将直接返回失败（服务降级），不再远程调用。</p>\n<blockquote>\n<p>注意<br>服务降级不一定伴随着熔断出现，他还可能是开关降级、限流降级。<br>但是熔断是一定会出现服务降级的。<br>即熔断是服务降级的子集</p>\n</blockquote>\n<blockquote>\n<p>ps: 服务雪崩是指由于调用链路当中，下游的服务响应太慢或者超时导致上游服务的请求得不到释放， 逐渐导致连接数达到上限从而又对上游服务造成影响 ，如此往复直到最上游服务难以承受压力（超过最大连接数等）</p>\n</blockquote>\n","excerpt":"<p>记录一下看过的一些面试题。</p>","more":"<blockquote>\n<p>封面<br>这位画师的脸以及上色很有特点，稍微留意一下很容易就能够辨别出来了，只是表情总给人一种同样的感觉w<br><a href=\"https://twitter.com/__LM7__/status/1379416474293465090\">https://twitter.com/__LM7__/status/1379416474293465090</a></p>\n</blockquote>\n<h2 id=\"MQ接收到消息后无法查询到或者是旧的状态\"><a href=\"#MQ接收到消息后无法查询到或者是旧的状态\" class=\"headerlink\" title=\"MQ接收到消息后无法查询到或者是旧的状态\"></a>MQ接收到消息后无法查询到或者是旧的状态</h2><p>原因</p>\n<ul>\n<li>数据库回滚  </li>\n<li>数据库事务未提交</li>\n</ul>\n<p>解决办法</p>\n<ul>\n<li>可以尝试将mq放在数据库事务之后执行。</li>\n<li>可以利用@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)监听spring事务afterCommit阶段。  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Transactional</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">saveFoo</span><span class=\"hljs-params\">(FooEntity fooEntity)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>    log.error(<span class=\"hljs-string\">&quot;start insert foo&quot;</span>);<br>    fooRepository.save(fooEntity);<br>    publisher.publishEvent(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyTransactionEvent</span>(fooEntity.getFooName()));<br>    log.error(<span class=\"hljs-string\">&quot;end insert foo&quot;</span>);<br>    Thread.currentThread().sleep(<span class=\"hljs-number\">2000</span>);<br>    log.error(<span class=\"hljs-string\">&quot;to commit insert&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-meta\">@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCommit</span><span class=\"hljs-params\">(MyTransactionEvent event)</span> &#123;<br>    log.error(<span class=\"hljs-string\">&quot;after commit then send event &#123;&#125;&quot;</span>, event);<br>    log.error(<span class=\"hljs-string\">&quot;after commit then send event &#123;&#125;&quot;</span>, event.getName());<br>&#125;<br></code></pre></td></tr></table></figure>\n  发送的spring事件会在监听到AFTER_COMMIT时执行<br>  参考：<a href=\"https://blog.csdn.net/little_kelvin/article/details/111330768\">https://blog.csdn.net/little_kelvin/article/details/111330768</a></li>\n</ul>\n<h2 id=\"MQ偶然接收到重复消息\"><a href=\"#MQ偶然接收到重复消息\" class=\"headerlink\" title=\"MQ偶然接收到重复消息\"></a>MQ偶然接收到重复消息</h2><p>接收端消费了消息但是没有向broker发送ack或者broker没有接收到ack，导致broker将消息再次入队被其他接收端或同一个接收端消费，造成了重复消费消息</p>\n<p>接收端方法做幂等：<br>新增，则可以在消息做一个唯一主键，重复了则会异常，保证数据库没有脏数据。<br>修改，一般都为幂等，修改多少次一般都是一样的结果。</p>\n<p>如果还是比较困难，则用redis记录每次消费并生成全局唯一键&lt;id,message&gt;，每次消费查询一次redis，存在消费记录则不进行消费（处理）</p>\n<h3 id=\"熔断与服务降级\"><a href=\"#熔断与服务降级\" class=\"headerlink\" title=\"熔断与服务降级\"></a>熔断与服务降级</h3><p>当请求某个服务超时或是响应过慢，并在一定时间内次数达到一定阈值，为了防止调用链路响应过长而引发的服务雪崩，我们将暂时不去请求这个服务， 而是调用降级方法，并下线该服务。期间一般会在过去一定时间后，尝试再次请求该服务，获得响应后才会上线，不然都将是调用降级方法。</p>\n<p>例如Hystrix，它有一个滑动时间窗的概念，在这个滑动的时间窗内（默认20s），错误率达到阈值（默认50%）则将打开熔断器，并经过一段时间之后（默认5s）再次执行一次检测是否应该打开熔断器。<br>熔断器在打开期间，调用此服务将直接返回失败（服务降级），不再远程调用。</p>\n<blockquote>\n<p>注意<br>服务降级不一定伴随着熔断出现，他还可能是开关降级、限流降级。<br>但是熔断是一定会出现服务降级的。<br>即熔断是服务降级的子集</p>\n</blockquote>\n<blockquote>\n<p>ps: 服务雪崩是指由于调用链路当中，下游的服务响应太慢或者超时导致上游服务的请求得不到释放， 逐渐导致连接数达到上限从而又对上游服务造成影响 ，如此往复直到最上游服务难以承受压力（超过最大连接数等）</p>\n</blockquote>"},{"title":"Java并发编程——双检锁单例模式","date":"2021-06-16T03:19:12.000Z","comments":1,"index_img":"/gallery/64535234_p0.png","banner_img":"/gallery/64535234_p0.png","_content":"记录一下双检锁单例模式是怎么一回事\n<!--more-->\n> 封面 pixiv id 64535234\n\n## 0x01\n懒汉单例模式是无法保证线程安全的\n```java\npublic class Singleton {\n    \n    private static Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static Singleton getInstance() {\n        if (singleton == null) { \n            //多个线程同时通过if判断新建实例，违反单例的初衷\n            singleton = new Singleton();\n        }\n\n        return singleton;\n    }\n}\n```\n即当线程A通过if判断，但还未创建实例，此时线程B也能够通过if判断，那么就会对重复创建实例违反单例的初衷。\n\n## 0x02\n那么我们为了保证线程安全，引入synchronized进行同步处理\n```java\npublic class Singleton {\n    \n    private static Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static synchronized Singleton getInstance() {\n        if (singleton == null) {\n            //此时最多只会有一个线程进入if判断中\n            singleton = new Singleton();\n        }\n        return singleton;\n    }\n}\n```\n此时就只有一个线程能够获取锁进入到if判断创建实例了。\n\n---\n> - synchronized 偏向锁，自旋锁，轻量级锁，重量级锁\n> \n> 通过 synchronized 加锁，第一个线程获取的锁为偏向锁，这时有其他线程参与锁竞争，升级为轻量级锁，其他线程通过循环的方式尝试获得锁，称自旋锁。若果自旋的次数达到一定的阈值，则升级为重量级锁。\n> \n> 需要注意的是，在第二个线程获取锁时，会先判断第一个线程是否仍然存活，如果不存活，不会升级为轻量级锁。\n\n## 0x03\n可是现在由于同步处理导致每次获取实例都需要竞争获取锁导致效率非常低下，\n所以我们应该在最外面做一次if判断来让大多数时候直接return实例而不是进行锁的竞争。\n```java\npublic class Singleton {\n    \n    private static Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static  Singleton getInstance() {\n        if (singleton == null) { //为了快速返回而不进入锁的竞争\n            synchronized (Singleton.class) { //以当前类作为锁\n                if (singleton == null) {\n                    //此时最多只会有一个线程进入if判断中\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n}\n```\n而这就是双检锁（双重检查锁，Double check lock，DCL）。\n\n## 0x04\n但这里其实还是没有彻底解决多线程的问题，因为new Object分为三个步骤：\n- 分配内存空间 \n- 初始化对象信息\n- 将内存空间引用赋值给变量\n\n如果这当中指令重排了，在还没有初始化对象的时候就把地址赋值给了变量，此时在最外层的if判断变量不为空，因为有地址， \n这时候就会拿到一个未经初始化的变量。  \n所以我们还需要用volatile修饰变量\n```java\npublic class Singleton {\n    \n    private static volatile Singleton singleton; //避免指令重排序\n\n    private Singleton() {\n    }\n\n    public static  Singleton getInstance() {\n        if (singleton == null) { //为了快速返回而不进入锁的竞争\n            synchronized (Singleton.class) { //以当前类作为锁\n                if (singleton == null) {\n                    //此时最多只会有一个线程进入if判断中\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n}\n```\n---\n> - volatile  \n> \n>![volatile](volatile.png)\n> \n> 在多线程环境下，保证变量的可见性。使用了 volatile 修饰变量后，在变量修改后会立即同步到主存中，每次用这个变量前会从主存刷新。  \n> \n> 禁止 JVM 指令重排序。\n","source":"_posts/juc-dcl-singleton.md","raw":"---\ntitle: Java并发编程——双检锁单例模式\ndate: 2021-06-16 11:19:12\ncategories:\n    - Java并发编程\ntags:\n    - Java\n    - J.U.C\ncomments: true\nindex_img: /gallery/64535234_p0.png\nbanner_img: /gallery/64535234_p0.png\n---\n记录一下双检锁单例模式是怎么一回事\n<!--more-->\n> 封面 pixiv id 64535234\n\n## 0x01\n懒汉单例模式是无法保证线程安全的\n```java\npublic class Singleton {\n    \n    private static Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static Singleton getInstance() {\n        if (singleton == null) { \n            //多个线程同时通过if判断新建实例，违反单例的初衷\n            singleton = new Singleton();\n        }\n\n        return singleton;\n    }\n}\n```\n即当线程A通过if判断，但还未创建实例，此时线程B也能够通过if判断，那么就会对重复创建实例违反单例的初衷。\n\n## 0x02\n那么我们为了保证线程安全，引入synchronized进行同步处理\n```java\npublic class Singleton {\n    \n    private static Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static synchronized Singleton getInstance() {\n        if (singleton == null) {\n            //此时最多只会有一个线程进入if判断中\n            singleton = new Singleton();\n        }\n        return singleton;\n    }\n}\n```\n此时就只有一个线程能够获取锁进入到if判断创建实例了。\n\n---\n> - synchronized 偏向锁，自旋锁，轻量级锁，重量级锁\n> \n> 通过 synchronized 加锁，第一个线程获取的锁为偏向锁，这时有其他线程参与锁竞争，升级为轻量级锁，其他线程通过循环的方式尝试获得锁，称自旋锁。若果自旋的次数达到一定的阈值，则升级为重量级锁。\n> \n> 需要注意的是，在第二个线程获取锁时，会先判断第一个线程是否仍然存活，如果不存活，不会升级为轻量级锁。\n\n## 0x03\n可是现在由于同步处理导致每次获取实例都需要竞争获取锁导致效率非常低下，\n所以我们应该在最外面做一次if判断来让大多数时候直接return实例而不是进行锁的竞争。\n```java\npublic class Singleton {\n    \n    private static Singleton singleton;\n\n    private Singleton() {\n    }\n\n    public static  Singleton getInstance() {\n        if (singleton == null) { //为了快速返回而不进入锁的竞争\n            synchronized (Singleton.class) { //以当前类作为锁\n                if (singleton == null) {\n                    //此时最多只会有一个线程进入if判断中\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n}\n```\n而这就是双检锁（双重检查锁，Double check lock，DCL）。\n\n## 0x04\n但这里其实还是没有彻底解决多线程的问题，因为new Object分为三个步骤：\n- 分配内存空间 \n- 初始化对象信息\n- 将内存空间引用赋值给变量\n\n如果这当中指令重排了，在还没有初始化对象的时候就把地址赋值给了变量，此时在最外层的if判断变量不为空，因为有地址， \n这时候就会拿到一个未经初始化的变量。  \n所以我们还需要用volatile修饰变量\n```java\npublic class Singleton {\n    \n    private static volatile Singleton singleton; //避免指令重排序\n\n    private Singleton() {\n    }\n\n    public static  Singleton getInstance() {\n        if (singleton == null) { //为了快速返回而不进入锁的竞争\n            synchronized (Singleton.class) { //以当前类作为锁\n                if (singleton == null) {\n                    //此时最多只会有一个线程进入if判断中\n                    singleton = new Singleton();\n                }\n            }\n        }\n        return singleton;\n    }\n}\n```\n---\n> - volatile  \n> \n>![volatile](volatile.png)\n> \n> 在多线程环境下，保证变量的可见性。使用了 volatile 修饰变量后，在变量修改后会立即同步到主存中，每次用这个变量前会从主存刷新。  \n> \n> 禁止 JVM 指令重排序。\n","slug":"juc-dcl-singleton","published":1,"updated":"2021-08-25T02:47:24.843Z","layout":"post","photos":[],"_id":"clzh7x5w9000jq4ql45e246ml","content":"<p>记录一下双检锁单例模式是怎么一回事</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>封面 pixiv id 64535234</p>\n</blockquote>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p>懒汉单例模式是无法保证线程安全的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> &#123;<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton singleton;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Singleton</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Singleton <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123; <br>            <span class=\"hljs-comment\">//多个线程同时通过if判断新建实例，违反单例的初衷</span><br>            singleton = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>即当线程A通过if判断，但还未创建实例，此时线程B也能够通过if判断，那么就会对重复创建实例违反单例的初衷。</p>\n<h2 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h2><p>那么我们为了保证线程安全，引入synchronized进行同步处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> &#123;<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton singleton;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Singleton</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">synchronized</span> Singleton <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">//此时最多只会有一个线程进入if判断中</span><br>            singleton = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>此时就只有一个线程能够获取锁进入到if判断创建实例了。</p>\n<hr>\n<blockquote>\n<ul>\n<li>synchronized 偏向锁，自旋锁，轻量级锁，重量级锁</li>\n</ul>\n<p>通过 synchronized 加锁，第一个线程获取的锁为偏向锁，这时有其他线程参与锁竞争，升级为轻量级锁，其他线程通过循环的方式尝试获得锁，称自旋锁。若果自旋的次数达到一定的阈值，则升级为重量级锁。</p>\n<p>需要注意的是，在第二个线程获取锁时，会先判断第一个线程是否仍然存活，如果不存活，不会升级为轻量级锁。</p>\n</blockquote>\n<h2 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2><p>可是现在由于同步处理导致每次获取实例都需要竞争获取锁导致效率非常低下，<br>所以我们应该在最外面做一次if判断来让大多数时候直接return实例而不是进行锁的竞争。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> &#123;<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton singleton;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Singleton</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>  Singleton <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">//为了快速返回而不进入锁的竞争</span><br>            <span class=\"hljs-keyword\">synchronized</span> (Singleton.class) &#123; <span class=\"hljs-comment\">//以当前类作为锁</span><br>                <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">//此时最多只会有一个线程进入if判断中</span><br>                    singleton = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>而这就是双检锁（双重检查锁，Double check lock，DCL）。</p>\n<h2 id=\"0x04\"><a href=\"#0x04\" class=\"headerlink\" title=\"0x04\"></a>0x04</h2><p>但这里其实还是没有彻底解决多线程的问题，因为new Object分为三个步骤：</p>\n<ul>\n<li>分配内存空间 </li>\n<li>初始化对象信息</li>\n<li>将内存空间引用赋值给变量</li>\n</ul>\n<p>如果这当中指令重排了，在还没有初始化对象的时候就把地址赋值给了变量，此时在最外层的if判断变量不为空，因为有地址，<br>这时候就会拿到一个未经初始化的变量。<br>所以我们还需要用volatile修饰变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> &#123;<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> Singleton singleton; <span class=\"hljs-comment\">//避免指令重排序</span><br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Singleton</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>  Singleton <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">//为了快速返回而不进入锁的竞争</span><br>            <span class=\"hljs-keyword\">synchronized</span> (Singleton.class) &#123; <span class=\"hljs-comment\">//以当前类作为锁</span><br>                <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">//此时最多只会有一个线程进入if判断中</span><br>                    singleton = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<ul>\n<li>volatile  </li>\n</ul>\n<p><img src=\"/.moe//volatile.png\" alt=\"volatile\"></p>\n<p>在多线程环境下，保证变量的可见性。使用了 volatile 修饰变量后，在变量修改后会立即同步到主存中，每次用这个变量前会从主存刷新。  </p>\n<p>禁止 JVM 指令重排序。</p>\n</blockquote>\n","excerpt":"<p>记录一下双检锁单例模式是怎么一回事</p>","more":"<blockquote>\n<p>封面 pixiv id 64535234</p>\n</blockquote>\n<h2 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h2><p>懒汉单例模式是无法保证线程安全的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> &#123;<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton singleton;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Singleton</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Singleton <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123; <br>            <span class=\"hljs-comment\">//多个线程同时通过if判断新建实例，违反单例的初衷</span><br>            singleton = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();<br>        &#125;<br><br>        <span class=\"hljs-keyword\">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>即当线程A通过if判断，但还未创建实例，此时线程B也能够通过if判断，那么就会对重复创建实例违反单例的初衷。</p>\n<h2 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h2><p>那么我们为了保证线程安全，引入synchronized进行同步处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> &#123;<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton singleton;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Singleton</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">synchronized</span> Singleton <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">//此时最多只会有一个线程进入if判断中</span><br>            singleton = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>此时就只有一个线程能够获取锁进入到if判断创建实例了。</p>\n<hr>\n<blockquote>\n<ul>\n<li>synchronized 偏向锁，自旋锁，轻量级锁，重量级锁</li>\n</ul>\n<p>通过 synchronized 加锁，第一个线程获取的锁为偏向锁，这时有其他线程参与锁竞争，升级为轻量级锁，其他线程通过循环的方式尝试获得锁，称自旋锁。若果自旋的次数达到一定的阈值，则升级为重量级锁。</p>\n<p>需要注意的是，在第二个线程获取锁时，会先判断第一个线程是否仍然存活，如果不存活，不会升级为轻量级锁。</p>\n</blockquote>\n<h2 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h2><p>可是现在由于同步处理导致每次获取实例都需要竞争获取锁导致效率非常低下，<br>所以我们应该在最外面做一次if判断来让大多数时候直接return实例而不是进行锁的竞争。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> &#123;<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Singleton singleton;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Singleton</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>  Singleton <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">//为了快速返回而不进入锁的竞争</span><br>            <span class=\"hljs-keyword\">synchronized</span> (Singleton.class) &#123; <span class=\"hljs-comment\">//以当前类作为锁</span><br>                <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">//此时最多只会有一个线程进入if判断中</span><br>                    singleton = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>而这就是双检锁（双重检查锁，Double check lock，DCL）。</p>\n<h2 id=\"0x04\"><a href=\"#0x04\" class=\"headerlink\" title=\"0x04\"></a>0x04</h2><p>但这里其实还是没有彻底解决多线程的问题，因为new Object分为三个步骤：</p>\n<ul>\n<li>分配内存空间 </li>\n<li>初始化对象信息</li>\n<li>将内存空间引用赋值给变量</li>\n</ul>\n<p>如果这当中指令重排了，在还没有初始化对象的时候就把地址赋值给了变量，此时在最外层的if判断变量不为空，因为有地址，<br>这时候就会拿到一个未经初始化的变量。<br>所以我们还需要用volatile修饰变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Singleton</span> &#123;<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> Singleton singleton; <span class=\"hljs-comment\">//避免指令重排序</span><br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Singleton</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>  Singleton <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">//为了快速返回而不进入锁的竞争</span><br>            <span class=\"hljs-keyword\">synchronized</span> (Singleton.class) &#123; <span class=\"hljs-comment\">//以当前类作为锁</span><br>                <span class=\"hljs-keyword\">if</span> (singleton == <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-comment\">//此时最多只会有一个线程进入if判断中</span><br>                    singleton = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Singleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<ul>\n<li>volatile  </li>\n</ul>\n<p><img src=\"/.moe//volatile.png\" alt=\"volatile\"></p>\n<p>在多线程环境下，保证变量的可见性。使用了 volatile 修饰变量后，在变量修改后会立即同步到主存中，每次用这个变量前会从主存刷新。  </p>\n<p>禁止 JVM 指令重排序。</p>\n</blockquote>"},{"title":"Kotlin使用记录01","date":"2021-12-17T01:18:07.000Z","hide":false,"comments":1,"index_img":"/gallery/逆光剑フラガラック.jpg","banner_img":"/gallery/逆光剑フラガラック.jpg","_content":"Kotlin是一个完全兼容java的jvm语言，但不是说什么地方都跟java一样，只是说可以完全调用java。而也有于此，导致Kotlin一些使用方面需要注意一些东西，例如标准库不一定是跟JDK用法相同。  \n不过我也没有打算完全记录，可能更多的还是做个TODO列表~~防健忘~~\n<!--more-->\n> 封面  \n> 逆光剑，Fate/hollow ataraxia中バゼット使用的武器之一。  \n> 在Fate/unlimited codes中与Lancer的Gae Bolg同时发动会有奇效：由于皆为因果逆转宝具——注定命中对方的心脏；后发但会先贯穿对方。两方会由于逆转因果失败而同时受到宝具伤害后倒地。\n\n## Kotlin的标准库\nKotlin的标准库是有别于Java的，注意调用时点进去看是什么包下面的。~~其实好像也就想到了list跟map~~\n### List, Map等\nList和Map是有些非常方便的方法构建的，`listOf(\"xxx\", \"xxx\")`, `mapOf(\"xxx\" to \"xxx\", \"xxx\" to \"xxx\")`，这些用起来非常爽快。但需要注意这里返回的类型是Kotlin下的List跟Map，它所提供的方法很有限，都是不可变的方法。但具体返回的对象则不一定是不可变的，具体点进方法内看就知道了。  \n那么我们需要一个可变的List或是Map时就需要让方法返回MutableList或是MutableMap的对象，可以用`mutableOfList()`或`mutableOfMap()`，当然你也可以用is去看是不是某类型的实例，大多其实还是返回的JDK里面的list跟map。\n## 扩展函数\nKotlin要说我感到最爽的东西，大概除了协程就是这个了。\n```kotlin\nobject MarkdownUtil {\n    private val formatChar = \"_*[]()~`>#+-=|{}.!\".toCharArray()\n    \n    //扩展函数，可以直接就等于一个方法，也可以调用该类内部方法，this指代的就是当前调用这个方法的String对象\n    fun String.format2Markdown(): String = MarkdownUtil.format(this)\n    \n    private fun format(target: String): String {\n        var result = target\n        for (c in formatChar) {\n            result = result.replace(c.toString(), \"\\\\$c\")\n        }\n        return result\n    }\n}\n```\n上面的例子是我写Telegram Bot时写的一个方法，用来转换掉markdown的特殊字符，调用时只需要`\"Some String\".format2Markdown()`，这就像String类扩展了一个方法一样，当你有许多这样的方法的时候，也许你就可以像链式调用一样写起来特别爽快了。\n\n这样对于一些非自己项目内的代码进行非常简单的扩展也会大大增加写代码的效率，而不需要额外调用一个工具类对该变量做处理（不需要管其他工具类，只要点出来就好了）等等。\n\n## Lambda\nKotlin的Lambda整体感觉是要强于java很多的，java很多情况下的推断都不太行导致很多地方没法使用，另外一个是Kotlin对Lambda的支持要能够放入更多的地方，例如你可以直接将一串Lambda赋值于一个变量而不需要特别的写一个函数接口，拿到的一个类型就是Unit。换句话说，函数是kotlin的一等公民。\n\n## Type safety\n类型安全也是Kotlin的一个区别于java的特色，虽然java其实可以用Optional作为代替，但是Kotlin也是可以使用的。  \n\n但Kotlin自身的类型安全是你声明时是否声明一个空变量，而后编译的时候就给你检测报错，并且强制要求你做一次判空，但Kotlin对判空进行了简化，用`value?.doSomeThing()`的方式先做判空，若是空则不会调用后面的`doSomeThing`方法。\n\n但实际上强制你做类型声明的时候生命是否为空也是很烦人的，因为后面你到哪里都要做一次判空，虽然Kotlin能够推断当前的变量是否为空而后不需要判空，但他无法对变量内部的成员变量做判断，就算你判空过一次他也无法后面不需要判空，虽然可以赋值到当前的变量当中但是仍然是比较麻烦的。（这个后面类型推断会提到）\n\n那么这个时候其实可以考虑用Java写POJO类，Kotlin对Java类都是不做强制要求判空的。\n\n或者就需要煞费苦心分别分开不同的类比如，对接其他API的时候实际上返回的是一个聚合了很多东西的类，不同情况下不同的字段是有可能空或者非空的，如果都用一个类就会造成几乎所有字段都是可能空的尴尬，那么分开几个类型来接受就能够确切的知道当前的哪些字段是否空了。  \n比如两种响应数据都含有data字段，但是data里面的name字段其中一种响应是不存在的；或者是可空的，另一种是一定非空，那么我们可以分成两个类去分别维护这两个响应数据结构，这样也许就比较符合我们想要的`type-safe`了。\n\n## 推断\nKotlin的推断能力在上面也有提到，再结合IDE就会边得异常爽快，例如上面提到的，如果这个变量进行过判空操作，后面就会自动的认为这个变量是非空的而不需要再次强制要求判空。  \n实际这个是推断当前变量为非空类型，所以后面不需要判空。\n\n又比如java当中非常繁琐的一种操作是`if a instanceOf B`，`b = (B)a`，然后用这个b变量操作，而Kotlin直接`is`一次判定为真后自动推断你这个变量就是某类型，而后可以直接用该变量调用该类型的方法。  \n```kotlin\nif (a is B) {\n    a.bClassMethod()\n}\n```\n\n而这些在IDE上是都有提示的，最典型的就是`val a = \"123\"`在IDE当中是可以显示a的类型而不需要再手动定义类型了，当然你也可以显式声明类型。\n\n## 协程\n这个留在最后讲其实主要我也不是特别熟，但不得不说这也是Kotlin的一大爽点吧。   \nKotlin的协程是一种无栈协程，他没有直接纳入Kotlin标准库当中，这样可以提高灵活性而不需要被标准库绑架。  \n它比起大多的异步编程框架还是爽上不少的，毕竟可以直接写类似同步代码的代码达到异步编程的效果实在太棒了。但说实话我在写自己项目时，也有一些不解的地方，或者说我还不太了解它的运行轨迹。\n\n现在了解到的就是，实际上他是做了一个标记，类似占位符，提交这段代码到线程执行，然后马上看执行结果，若是完成则返回结果，否则就是一个占位符（我没有看过源码，也不打保票就是这样，毕竟我自己写代码的时候还是有一些问题的），而只有当查看执行结果没有完成时才算是开始跑协程，不然跟普通跑代码区别不是很大。\n\n### 一些问题\n- 在运行一些长时间保持运行的项目当中，容易造成内部卡死。  \n    e.g.\n    ```kotlin\n    scope.launch {\n        while (isActive) {\n            try {\n                feedAndSend(rss, group)\n                delay(1000 * 60)\n            } catch (e: Exception) {\n                log.error(e) { \"执行订阅出错。\" }\n            }\n        }\n        log.warn { \"Coroutine was inactive.\" }\n    }\n    ```\n- 另外还有类似接收到服务器发送的信息进行处理，运行久了就会无报错信息卡住不动，但最初的是时候我使用Dispatch.IO，之后我自己构建线程池指定队列长度以及线程配置后就还没发生过问题。\n\n未完待续...","source":"_posts/lean-kotlin-01.md","raw":"---\ntitle: Kotlin使用记录01\ndate: 2021-12-17 09:18:07\ncategories:\n- Kotlin\ntags:\n- Kotlin\n- 协程\nhide: false\ncomments: true\nindex_img: /gallery/逆光剑フラガラック.jpg\nbanner_img: /gallery/逆光剑フラガラック.jpg\n---\nKotlin是一个完全兼容java的jvm语言，但不是说什么地方都跟java一样，只是说可以完全调用java。而也有于此，导致Kotlin一些使用方面需要注意一些东西，例如标准库不一定是跟JDK用法相同。  \n不过我也没有打算完全记录，可能更多的还是做个TODO列表~~防健忘~~\n<!--more-->\n> 封面  \n> 逆光剑，Fate/hollow ataraxia中バゼット使用的武器之一。  \n> 在Fate/unlimited codes中与Lancer的Gae Bolg同时发动会有奇效：由于皆为因果逆转宝具——注定命中对方的心脏；后发但会先贯穿对方。两方会由于逆转因果失败而同时受到宝具伤害后倒地。\n\n## Kotlin的标准库\nKotlin的标准库是有别于Java的，注意调用时点进去看是什么包下面的。~~其实好像也就想到了list跟map~~\n### List, Map等\nList和Map是有些非常方便的方法构建的，`listOf(\"xxx\", \"xxx\")`, `mapOf(\"xxx\" to \"xxx\", \"xxx\" to \"xxx\")`，这些用起来非常爽快。但需要注意这里返回的类型是Kotlin下的List跟Map，它所提供的方法很有限，都是不可变的方法。但具体返回的对象则不一定是不可变的，具体点进方法内看就知道了。  \n那么我们需要一个可变的List或是Map时就需要让方法返回MutableList或是MutableMap的对象，可以用`mutableOfList()`或`mutableOfMap()`，当然你也可以用is去看是不是某类型的实例，大多其实还是返回的JDK里面的list跟map。\n## 扩展函数\nKotlin要说我感到最爽的东西，大概除了协程就是这个了。\n```kotlin\nobject MarkdownUtil {\n    private val formatChar = \"_*[]()~`>#+-=|{}.!\".toCharArray()\n    \n    //扩展函数，可以直接就等于一个方法，也可以调用该类内部方法，this指代的就是当前调用这个方法的String对象\n    fun String.format2Markdown(): String = MarkdownUtil.format(this)\n    \n    private fun format(target: String): String {\n        var result = target\n        for (c in formatChar) {\n            result = result.replace(c.toString(), \"\\\\$c\")\n        }\n        return result\n    }\n}\n```\n上面的例子是我写Telegram Bot时写的一个方法，用来转换掉markdown的特殊字符，调用时只需要`\"Some String\".format2Markdown()`，这就像String类扩展了一个方法一样，当你有许多这样的方法的时候，也许你就可以像链式调用一样写起来特别爽快了。\n\n这样对于一些非自己项目内的代码进行非常简单的扩展也会大大增加写代码的效率，而不需要额外调用一个工具类对该变量做处理（不需要管其他工具类，只要点出来就好了）等等。\n\n## Lambda\nKotlin的Lambda整体感觉是要强于java很多的，java很多情况下的推断都不太行导致很多地方没法使用，另外一个是Kotlin对Lambda的支持要能够放入更多的地方，例如你可以直接将一串Lambda赋值于一个变量而不需要特别的写一个函数接口，拿到的一个类型就是Unit。换句话说，函数是kotlin的一等公民。\n\n## Type safety\n类型安全也是Kotlin的一个区别于java的特色，虽然java其实可以用Optional作为代替，但是Kotlin也是可以使用的。  \n\n但Kotlin自身的类型安全是你声明时是否声明一个空变量，而后编译的时候就给你检测报错，并且强制要求你做一次判空，但Kotlin对判空进行了简化，用`value?.doSomeThing()`的方式先做判空，若是空则不会调用后面的`doSomeThing`方法。\n\n但实际上强制你做类型声明的时候生命是否为空也是很烦人的，因为后面你到哪里都要做一次判空，虽然Kotlin能够推断当前的变量是否为空而后不需要判空，但他无法对变量内部的成员变量做判断，就算你判空过一次他也无法后面不需要判空，虽然可以赋值到当前的变量当中但是仍然是比较麻烦的。（这个后面类型推断会提到）\n\n那么这个时候其实可以考虑用Java写POJO类，Kotlin对Java类都是不做强制要求判空的。\n\n或者就需要煞费苦心分别分开不同的类比如，对接其他API的时候实际上返回的是一个聚合了很多东西的类，不同情况下不同的字段是有可能空或者非空的，如果都用一个类就会造成几乎所有字段都是可能空的尴尬，那么分开几个类型来接受就能够确切的知道当前的哪些字段是否空了。  \n比如两种响应数据都含有data字段，但是data里面的name字段其中一种响应是不存在的；或者是可空的，另一种是一定非空，那么我们可以分成两个类去分别维护这两个响应数据结构，这样也许就比较符合我们想要的`type-safe`了。\n\n## 推断\nKotlin的推断能力在上面也有提到，再结合IDE就会边得异常爽快，例如上面提到的，如果这个变量进行过判空操作，后面就会自动的认为这个变量是非空的而不需要再次强制要求判空。  \n实际这个是推断当前变量为非空类型，所以后面不需要判空。\n\n又比如java当中非常繁琐的一种操作是`if a instanceOf B`，`b = (B)a`，然后用这个b变量操作，而Kotlin直接`is`一次判定为真后自动推断你这个变量就是某类型，而后可以直接用该变量调用该类型的方法。  \n```kotlin\nif (a is B) {\n    a.bClassMethod()\n}\n```\n\n而这些在IDE上是都有提示的，最典型的就是`val a = \"123\"`在IDE当中是可以显示a的类型而不需要再手动定义类型了，当然你也可以显式声明类型。\n\n## 协程\n这个留在最后讲其实主要我也不是特别熟，但不得不说这也是Kotlin的一大爽点吧。   \nKotlin的协程是一种无栈协程，他没有直接纳入Kotlin标准库当中，这样可以提高灵活性而不需要被标准库绑架。  \n它比起大多的异步编程框架还是爽上不少的，毕竟可以直接写类似同步代码的代码达到异步编程的效果实在太棒了。但说实话我在写自己项目时，也有一些不解的地方，或者说我还不太了解它的运行轨迹。\n\n现在了解到的就是，实际上他是做了一个标记，类似占位符，提交这段代码到线程执行，然后马上看执行结果，若是完成则返回结果，否则就是一个占位符（我没有看过源码，也不打保票就是这样，毕竟我自己写代码的时候还是有一些问题的），而只有当查看执行结果没有完成时才算是开始跑协程，不然跟普通跑代码区别不是很大。\n\n### 一些问题\n- 在运行一些长时间保持运行的项目当中，容易造成内部卡死。  \n    e.g.\n    ```kotlin\n    scope.launch {\n        while (isActive) {\n            try {\n                feedAndSend(rss, group)\n                delay(1000 * 60)\n            } catch (e: Exception) {\n                log.error(e) { \"执行订阅出错。\" }\n            }\n        }\n        log.warn { \"Coroutine was inactive.\" }\n    }\n    ```\n- 另外还有类似接收到服务器发送的信息进行处理，运行久了就会无报错信息卡住不动，但最初的是时候我使用Dispatch.IO，之后我自己构建线程池指定队列长度以及线程配置后就还没发生过问题。\n\n未完待续...","slug":"lean-kotlin-01","published":1,"updated":"2023-01-06T20:14:18.720Z","layout":"post","photos":[],"_id":"clzh7x5wa000nq4qlga2t3vqg","content":"<p>Kotlin是一个完全兼容java的jvm语言，但不是说什么地方都跟java一样，只是说可以完全调用java。而也有于此，导致Kotlin一些使用方面需要注意一些东西，例如标准库不一定是跟JDK用法相同。<br>不过我也没有打算完全记录，可能更多的还是做个TODO列表<del>防健忘</del></p>\n<span id=\"more\"></span>\n<blockquote>\n<p>封面<br>逆光剑，Fate/hollow ataraxia中バゼット使用的武器之一。<br>在Fate/unlimited codes中与Lancer的Gae Bolg同时发动会有奇效：由于皆为因果逆转宝具——注定命中对方的心脏；后发但会先贯穿对方。两方会由于逆转因果失败而同时受到宝具伤害后倒地。</p>\n</blockquote>\n<h2 id=\"Kotlin的标准库\"><a href=\"#Kotlin的标准库\" class=\"headerlink\" title=\"Kotlin的标准库\"></a>Kotlin的标准库</h2><p>Kotlin的标准库是有别于Java的，注意调用时点进去看是什么包下面的。<del>其实好像也就想到了list跟map</del></p>\n<h3 id=\"List-Map等\"><a href=\"#List-Map等\" class=\"headerlink\" title=\"List, Map等\"></a>List, Map等</h3><p>List和Map是有些非常方便的方法构建的，<code>listOf(&quot;xxx&quot;, &quot;xxx&quot;)</code>, <code>mapOf(&quot;xxx&quot; to &quot;xxx&quot;, &quot;xxx&quot; to &quot;xxx&quot;)</code>，这些用起来非常爽快。但需要注意这里返回的类型是Kotlin下的List跟Map，它所提供的方法很有限，都是不可变的方法。但具体返回的对象则不一定是不可变的，具体点进方法内看就知道了。<br>那么我们需要一个可变的List或是Map时就需要让方法返回MutableList或是MutableMap的对象，可以用<code>mutableOfList()</code>或<code>mutableOfMap()</code>，当然你也可以用is去看是不是某类型的实例，大多其实还是返回的JDK里面的list跟map。</p>\n<h2 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h2><p>Kotlin要说我感到最爽的东西，大概除了协程就是这个了。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">object</span> MarkdownUtil &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> formatChar = <span class=\"hljs-string\">&quot;_*[]()~`&gt;#+-=|&#123;&#125;.!&quot;</span>.toCharArray()<br>    <br>    <span class=\"hljs-comment\">//扩展函数，可以直接就等于一个方法，也可以调用该类内部方法，this指代的就是当前调用这个方法的String对象</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> String.<span class=\"hljs-title\">format2Markdown</span><span class=\"hljs-params\">()</span></span>: String = MarkdownUtil.format(<span class=\"hljs-keyword\">this</span>)<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">format</span><span class=\"hljs-params\">(target: <span class=\"hljs-type\">String</span>)</span></span>: String &#123;<br>        <span class=\"hljs-keyword\">var</span> result = target<br>        <span class=\"hljs-keyword\">for</span> (c <span class=\"hljs-keyword\">in</span> formatChar) &#123;<br>            result = result.replace(c.toString(), <span class=\"hljs-string\">&quot;\\\\<span class=\"hljs-variable\">$c</span>&quot;</span>)<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上面的例子是我写Telegram Bot时写的一个方法，用来转换掉markdown的特殊字符，调用时只需要<code>&quot;Some String&quot;.format2Markdown()</code>，这就像String类扩展了一个方法一样，当你有许多这样的方法的时候，也许你就可以像链式调用一样写起来特别爽快了。</p>\n<p>这样对于一些非自己项目内的代码进行非常简单的扩展也会大大增加写代码的效率，而不需要额外调用一个工具类对该变量做处理（不需要管其他工具类，只要点出来就好了）等等。</p>\n<h2 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h2><p>Kotlin的Lambda整体感觉是要强于java很多的，java很多情况下的推断都不太行导致很多地方没法使用，另外一个是Kotlin对Lambda的支持要能够放入更多的地方，例如你可以直接将一串Lambda赋值于一个变量而不需要特别的写一个函数接口，拿到的一个类型就是Unit。换句话说，函数是kotlin的一等公民。</p>\n<h2 id=\"Type-safety\"><a href=\"#Type-safety\" class=\"headerlink\" title=\"Type safety\"></a>Type safety</h2><p>类型安全也是Kotlin的一个区别于java的特色，虽然java其实可以用Optional作为代替，但是Kotlin也是可以使用的。  </p>\n<p>但Kotlin自身的类型安全是你声明时是否声明一个空变量，而后编译的时候就给你检测报错，并且强制要求你做一次判空，但Kotlin对判空进行了简化，用<code>value?.doSomeThing()</code>的方式先做判空，若是空则不会调用后面的<code>doSomeThing</code>方法。</p>\n<p>但实际上强制你做类型声明的时候生命是否为空也是很烦人的，因为后面你到哪里都要做一次判空，虽然Kotlin能够推断当前的变量是否为空而后不需要判空，但他无法对变量内部的成员变量做判断，就算你判空过一次他也无法后面不需要判空，虽然可以赋值到当前的变量当中但是仍然是比较麻烦的。（这个后面类型推断会提到）</p>\n<p>那么这个时候其实可以考虑用Java写POJO类，Kotlin对Java类都是不做强制要求判空的。</p>\n<p>或者就需要煞费苦心分别分开不同的类比如，对接其他API的时候实际上返回的是一个聚合了很多东西的类，不同情况下不同的字段是有可能空或者非空的，如果都用一个类就会造成几乎所有字段都是可能空的尴尬，那么分开几个类型来接受就能够确切的知道当前的哪些字段是否空了。<br>比如两种响应数据都含有data字段，但是data里面的name字段其中一种响应是不存在的；或者是可空的，另一种是一定非空，那么我们可以分成两个类去分别维护这两个响应数据结构，这样也许就比较符合我们想要的<code>type-safe</code>了。</p>\n<h2 id=\"推断\"><a href=\"#推断\" class=\"headerlink\" title=\"推断\"></a>推断</h2><p>Kotlin的推断能力在上面也有提到，再结合IDE就会边得异常爽快，例如上面提到的，如果这个变量进行过判空操作，后面就会自动的认为这个变量是非空的而不需要再次强制要求判空。<br>实际这个是推断当前变量为非空类型，所以后面不需要判空。</p>\n<p>又比如java当中非常繁琐的一种操作是<code>if a instanceOf B</code>，<code>b = (B)a</code>，然后用这个b变量操作，而Kotlin直接<code>is</code>一次判定为真后自动推断你这个变量就是某类型，而后可以直接用该变量调用该类型的方法。  </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">if</span> (a <span class=\"hljs-keyword\">is</span> B) &#123;<br>    a.bClassMethod()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而这些在IDE上是都有提示的，最典型的就是<code>val a = &quot;123&quot;</code>在IDE当中是可以显示a的类型而不需要再手动定义类型了，当然你也可以显式声明类型。</p>\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><p>这个留在最后讲其实主要我也不是特别熟，但不得不说这也是Kotlin的一大爽点吧。<br>Kotlin的协程是一种无栈协程，他没有直接纳入Kotlin标准库当中，这样可以提高灵活性而不需要被标准库绑架。<br>它比起大多的异步编程框架还是爽上不少的，毕竟可以直接写类似同步代码的代码达到异步编程的效果实在太棒了。但说实话我在写自己项目时，也有一些不解的地方，或者说我还不太了解它的运行轨迹。</p>\n<p>现在了解到的就是，实际上他是做了一个标记，类似占位符，提交这段代码到线程执行，然后马上看执行结果，若是完成则返回结果，否则就是一个占位符（我没有看过源码，也不打保票就是这样，毕竟我自己写代码的时候还是有一些问题的），而只有当查看执行结果没有完成时才算是开始跑协程，不然跟普通跑代码区别不是很大。</p>\n<h3 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h3><ul>\n<li>在运行一些长时间保持运行的项目当中，容易造成内部卡死。<br>  e.g.  <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">scope.launch &#123;<br>    <span class=\"hljs-keyword\">while</span> (isActive) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            feedAndSend(rss, group)<br>            delay(<span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span>)<br>        &#125; <span class=\"hljs-keyword\">catch</span> (e: Exception) &#123;<br>            log.error(e) &#123; <span class=\"hljs-string\">&quot;执行订阅出错。&quot;</span> &#125;<br>        &#125;<br>    &#125;<br>    log.warn &#123; <span class=\"hljs-string\">&quot;Coroutine was inactive.&quot;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>另外还有类似接收到服务器发送的信息进行处理，运行久了就会无报错信息卡住不动，但最初的是时候我使用Dispatch.IO，之后我自己构建线程池指定队列长度以及线程配置后就还没发生过问题。</li>\n</ul>\n<p>未完待续…</p>\n","excerpt":"<p>Kotlin是一个完全兼容java的jvm语言，但不是说什么地方都跟java一样，只是说可以完全调用java。而也有于此，导致Kotlin一些使用方面需要注意一些东西，例如标准库不一定是跟JDK用法相同。<br>不过我也没有打算完全记录，可能更多的还是做个TODO列表<del>防健忘</del></p>","more":"<blockquote>\n<p>封面<br>逆光剑，Fate/hollow ataraxia中バゼット使用的武器之一。<br>在Fate/unlimited codes中与Lancer的Gae Bolg同时发动会有奇效：由于皆为因果逆转宝具——注定命中对方的心脏；后发但会先贯穿对方。两方会由于逆转因果失败而同时受到宝具伤害后倒地。</p>\n</blockquote>\n<h2 id=\"Kotlin的标准库\"><a href=\"#Kotlin的标准库\" class=\"headerlink\" title=\"Kotlin的标准库\"></a>Kotlin的标准库</h2><p>Kotlin的标准库是有别于Java的，注意调用时点进去看是什么包下面的。<del>其实好像也就想到了list跟map</del></p>\n<h3 id=\"List-Map等\"><a href=\"#List-Map等\" class=\"headerlink\" title=\"List, Map等\"></a>List, Map等</h3><p>List和Map是有些非常方便的方法构建的，<code>listOf(&quot;xxx&quot;, &quot;xxx&quot;)</code>, <code>mapOf(&quot;xxx&quot; to &quot;xxx&quot;, &quot;xxx&quot; to &quot;xxx&quot;)</code>，这些用起来非常爽快。但需要注意这里返回的类型是Kotlin下的List跟Map，它所提供的方法很有限，都是不可变的方法。但具体返回的对象则不一定是不可变的，具体点进方法内看就知道了。<br>那么我们需要一个可变的List或是Map时就需要让方法返回MutableList或是MutableMap的对象，可以用<code>mutableOfList()</code>或<code>mutableOfMap()</code>，当然你也可以用is去看是不是某类型的实例，大多其实还是返回的JDK里面的list跟map。</p>\n<h2 id=\"扩展函数\"><a href=\"#扩展函数\" class=\"headerlink\" title=\"扩展函数\"></a>扩展函数</h2><p>Kotlin要说我感到最爽的东西，大概除了协程就是这个了。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">object</span> MarkdownUtil &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> formatChar = <span class=\"hljs-string\">&quot;_*[]()~`&gt;#+-=|&#123;&#125;.!&quot;</span>.toCharArray()<br>    <br>    <span class=\"hljs-comment\">//扩展函数，可以直接就等于一个方法，也可以调用该类内部方法，this指代的就是当前调用这个方法的String对象</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> String.<span class=\"hljs-title\">format2Markdown</span><span class=\"hljs-params\">()</span></span>: String = MarkdownUtil.format(<span class=\"hljs-keyword\">this</span>)<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">format</span><span class=\"hljs-params\">(target: <span class=\"hljs-type\">String</span>)</span></span>: String &#123;<br>        <span class=\"hljs-keyword\">var</span> result = target<br>        <span class=\"hljs-keyword\">for</span> (c <span class=\"hljs-keyword\">in</span> formatChar) &#123;<br>            result = result.replace(c.toString(), <span class=\"hljs-string\">&quot;\\\\<span class=\"hljs-variable\">$c</span>&quot;</span>)<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上面的例子是我写Telegram Bot时写的一个方法，用来转换掉markdown的特殊字符，调用时只需要<code>&quot;Some String&quot;.format2Markdown()</code>，这就像String类扩展了一个方法一样，当你有许多这样的方法的时候，也许你就可以像链式调用一样写起来特别爽快了。</p>\n<p>这样对于一些非自己项目内的代码进行非常简单的扩展也会大大增加写代码的效率，而不需要额外调用一个工具类对该变量做处理（不需要管其他工具类，只要点出来就好了）等等。</p>\n<h2 id=\"Lambda\"><a href=\"#Lambda\" class=\"headerlink\" title=\"Lambda\"></a>Lambda</h2><p>Kotlin的Lambda整体感觉是要强于java很多的，java很多情况下的推断都不太行导致很多地方没法使用，另外一个是Kotlin对Lambda的支持要能够放入更多的地方，例如你可以直接将一串Lambda赋值于一个变量而不需要特别的写一个函数接口，拿到的一个类型就是Unit。换句话说，函数是kotlin的一等公民。</p>\n<h2 id=\"Type-safety\"><a href=\"#Type-safety\" class=\"headerlink\" title=\"Type safety\"></a>Type safety</h2><p>类型安全也是Kotlin的一个区别于java的特色，虽然java其实可以用Optional作为代替，但是Kotlin也是可以使用的。  </p>\n<p>但Kotlin自身的类型安全是你声明时是否声明一个空变量，而后编译的时候就给你检测报错，并且强制要求你做一次判空，但Kotlin对判空进行了简化，用<code>value?.doSomeThing()</code>的方式先做判空，若是空则不会调用后面的<code>doSomeThing</code>方法。</p>\n<p>但实际上强制你做类型声明的时候生命是否为空也是很烦人的，因为后面你到哪里都要做一次判空，虽然Kotlin能够推断当前的变量是否为空而后不需要判空，但他无法对变量内部的成员变量做判断，就算你判空过一次他也无法后面不需要判空，虽然可以赋值到当前的变量当中但是仍然是比较麻烦的。（这个后面类型推断会提到）</p>\n<p>那么这个时候其实可以考虑用Java写POJO类，Kotlin对Java类都是不做强制要求判空的。</p>\n<p>或者就需要煞费苦心分别分开不同的类比如，对接其他API的时候实际上返回的是一个聚合了很多东西的类，不同情况下不同的字段是有可能空或者非空的，如果都用一个类就会造成几乎所有字段都是可能空的尴尬，那么分开几个类型来接受就能够确切的知道当前的哪些字段是否空了。<br>比如两种响应数据都含有data字段，但是data里面的name字段其中一种响应是不存在的；或者是可空的，另一种是一定非空，那么我们可以分成两个类去分别维护这两个响应数据结构，这样也许就比较符合我们想要的<code>type-safe</code>了。</p>\n<h2 id=\"推断\"><a href=\"#推断\" class=\"headerlink\" title=\"推断\"></a>推断</h2><p>Kotlin的推断能力在上面也有提到，再结合IDE就会边得异常爽快，例如上面提到的，如果这个变量进行过判空操作，后面就会自动的认为这个变量是非空的而不需要再次强制要求判空。<br>实际这个是推断当前变量为非空类型，所以后面不需要判空。</p>\n<p>又比如java当中非常繁琐的一种操作是<code>if a instanceOf B</code>，<code>b = (B)a</code>，然后用这个b变量操作，而Kotlin直接<code>is</code>一次判定为真后自动推断你这个变量就是某类型，而后可以直接用该变量调用该类型的方法。  </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">if</span> (a <span class=\"hljs-keyword\">is</span> B) &#123;<br>    a.bClassMethod()<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>而这些在IDE上是都有提示的，最典型的就是<code>val a = &quot;123&quot;</code>在IDE当中是可以显示a的类型而不需要再手动定义类型了，当然你也可以显式声明类型。</p>\n<h2 id=\"协程\"><a href=\"#协程\" class=\"headerlink\" title=\"协程\"></a>协程</h2><p>这个留在最后讲其实主要我也不是特别熟，但不得不说这也是Kotlin的一大爽点吧。<br>Kotlin的协程是一种无栈协程，他没有直接纳入Kotlin标准库当中，这样可以提高灵活性而不需要被标准库绑架。<br>它比起大多的异步编程框架还是爽上不少的，毕竟可以直接写类似同步代码的代码达到异步编程的效果实在太棒了。但说实话我在写自己项目时，也有一些不解的地方，或者说我还不太了解它的运行轨迹。</p>\n<p>现在了解到的就是，实际上他是做了一个标记，类似占位符，提交这段代码到线程执行，然后马上看执行结果，若是完成则返回结果，否则就是一个占位符（我没有看过源码，也不打保票就是这样，毕竟我自己写代码的时候还是有一些问题的），而只有当查看执行结果没有完成时才算是开始跑协程，不然跟普通跑代码区别不是很大。</p>\n<h3 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h3><ul>\n<li>在运行一些长时间保持运行的项目当中，容易造成内部卡死。<br>  e.g.  <figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">scope.launch &#123;<br>    <span class=\"hljs-keyword\">while</span> (isActive) &#123;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            feedAndSend(rss, group)<br>            delay(<span class=\"hljs-number\">1000</span> * <span class=\"hljs-number\">60</span>)<br>        &#125; <span class=\"hljs-keyword\">catch</span> (e: Exception) &#123;<br>            log.error(e) &#123; <span class=\"hljs-string\">&quot;执行订阅出错。&quot;</span> &#125;<br>        &#125;<br>    &#125;<br>    log.warn &#123; <span class=\"hljs-string\">&quot;Coroutine was inactive.&quot;</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>另外还有类似接收到服务器发送的信息进行处理，运行久了就会无报错信息卡住不动，但最初的是时候我使用Dispatch.IO，之后我自己构建线程池指定队列长度以及线程配置后就还没发生过问题。</li>\n</ul>\n<p>未完待续…</p>"},{"title":"Reactor处理阻塞问题笔记","date":"2020-03-03T01:53:22.000Z","comments":1,"thumbnail":"/gallery/machi.png","_content":"其实本来想要记录问题的过程，但奈何自己也说不太好XD\n<!--more-->\n## What\n\n由于接触Vert.x以及阅读其文档后，了解到异步编程下是不能够阻塞主线程的，不然异步将失去意义。\n\n我们需要做的是将这些阻塞线程移到其他线程进行处理。\n\n## How\n\n利用Mono或是Flux的PublishOn方法将之后调用的方法都移动到其他线程进行处理。\n\n- `publishOn`\n\n  ```java\n  public final Mono<T> publishOn(Scheduler scheduler);\n  public final Flux<T> publishOn(Scheduler scheduler);\n  ```\n\n  其中`Scheduler`可用`Schedulers.parallel()`或`Schedulers.single()`进项创建或是其他方法，其中`single`和`parallel`是有一些区别的。\n\n  - `single`\n\n    这一条调用链下不会同时执行，并且只有这条调用链执行完成后才会再次被调用\n\n  - `parallel`\n\n    与上面相反，调用链会在同时执行\n\n  下面是测试代码\n\n  ~~本人只是刚开始玩reactor，程序写的很蹩脚XD~~\n\n  ```java\n  @Test\n    public void test() throws IOException {\n      AtomicReference<Employee> employeeAR = new AtomicReference<>(); //<1>\n      Scheduler scheduler = Schedulers.single(); //<2>\n      for (int i = 0; i < 5; i++) {\n        int finalI = i;\n        Mono.just(1)\n            .publishOn(scheduler)\n            .map(x -> {\n              try {\n                Thread.sleep(1000);\n                System.out.println(finalI + \"-\" + Thread.currentThread()\n                    .getName() + \"-A\"); //<3>\n              } catch (InterruptedException e) {\n                e.printStackTrace();\n              }\n              Employee emp = buildEmployee();\n              employeeAR.set(emp); //<1>\n              return emp;\n            })\n            .map(x -> {\n              try {\n                System.out.println(finalI + \"-\" + Thread.currentThread()\n                    .getName() + \"-B\"); //<3>\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n                e.printStackTrace();\n              }\n              return x;\n            })\n            .map(x -> {\n              System.out.println(finalI + \"-\" + Thread.currentThread()\n                  .getName() + \"-C\"); //<3>\n              return employeeAR.get().getAccountId(); //<1>\n            })\n            .subscribe(System.out::println);\n  \n        System.out.println(Thread.currentThread()\n            .getName());  //<3>\n      }\n      char c = (char) System.in.read();\n      System.out.println(\"your char is: \" + c);\n    }\n  ```\n\n  - <1> 因为涉及到匿名方法中的变量的再次调用，所以用到AtomicReference进行储存。\n\n  下面是`single`的运行结果\n\n  ```\n  main\n  main\n  main\n  main\n  main\n  0-single-1-A\n  0-single-1-B\n  0-single-1-C\n  123\n  1-single-1-A\n  1-single-1-B\n  1-single-1-C\n  123\n  2-single-1-A\n  2-single-1-B\n  2-single-1-C\n  123\n  3-single-1-A\n  3-single-1-B\n  3-single-1-C\n  123\n  4-single-1-A\n  4-single-1-B\n  4-single-1-C\n  123\n  ```\n\n  将<2>中`single`改为`parallel`\n\n  ```\n  main\n  main\n  main\n  main\n  main\n  0-parallel-1-A\n  3-parallel-4-A\n  2-parallel-3-A\n  4-parallel-5-A\n  0-parallel-1-B\n  3-parallel-4-B\n  2-parallel-3-B\n  1-parallel-2-A\n  1-parallel-2-B\n  4-parallel-5-B\n  0-parallel-1-C\n  1-parallel-2-C\n  3-parallel-4-C\n  4-parallel-5-C\n  2-parallel-3-C\n  123\n  123\n  123\n  123\n  123\n  ```\n\n  观察代码中<3>，我们可以发现调用链当中是按照顺序执行的（我最开始以为会平行执行调用链中的方法，但并不是），而且主线程也没有被阻塞，能够快速输出当前线程名称，由此可见已经达到我们最初的目的了——不阻塞主线程。\n\n## Why\n\n在这里我用的是Spring WebFlux，而其中会用到netty，其中有一个Eventloop模块，这是由单个线程运行的模块，这个单线程就是由我们程序所运行的主线程来担当。\n\nEventloop会重复检查当前有没有事件产生，若有则会接收该事件并运行相应的事件响应，也就是发布订阅模式，而如果我们在其中一个调用该事件的响应方法中等待（阻塞）过久，就会导致我们无法快速处理后续产生的事件，只能够加多线程进行快速处理，这就又回到了非异步编程当中去了。\n\n所以能够快速响应才能够体现出异步编程的优势。\n\n## Reference\n- [Is there a standard way to solve blocking that must happen.](https://github.com/reactor/reactor-core/issues/1756)\n- [How to handle blocking calls when using reactor in a JAX-RS-powered server?](https://stackoverflow.com/questions/56706308/how-to-handle-blocking-calls-when-using-reactor-in-a-jax-rs-powered-server)\n\n## TODO\n\n- [ ] 测试嵌套调用publishiOn是什么情况  \n- [ ] 是否是调用一次publishOn后，后面的链式调用都是在另一条线程，是否需要再次调用一次pubulishOn保证之后的一次阻塞操作也不在主线程当中  \n- [ ] 补充详细Evenloop  \n- [ ] 寻找更加优雅的方式，或者看看这种链式调用是不是也是一个不太好的地方  \n\n\n","source":"_posts/lean-pulishOn-of-reactor.md","raw":"---\ntitle: Reactor处理阻塞问题笔记\ndate: 2020-03-03 09:53:22\ncategories: \n    - 编程\ntags: \n    - Java\n    - Reactor\n    - Webflux\n    - Spring\ncomments: true\nthumbnail: /gallery/machi.png\n---\n其实本来想要记录问题的过程，但奈何自己也说不太好XD\n<!--more-->\n## What\n\n由于接触Vert.x以及阅读其文档后，了解到异步编程下是不能够阻塞主线程的，不然异步将失去意义。\n\n我们需要做的是将这些阻塞线程移到其他线程进行处理。\n\n## How\n\n利用Mono或是Flux的PublishOn方法将之后调用的方法都移动到其他线程进行处理。\n\n- `publishOn`\n\n  ```java\n  public final Mono<T> publishOn(Scheduler scheduler);\n  public final Flux<T> publishOn(Scheduler scheduler);\n  ```\n\n  其中`Scheduler`可用`Schedulers.parallel()`或`Schedulers.single()`进项创建或是其他方法，其中`single`和`parallel`是有一些区别的。\n\n  - `single`\n\n    这一条调用链下不会同时执行，并且只有这条调用链执行完成后才会再次被调用\n\n  - `parallel`\n\n    与上面相反，调用链会在同时执行\n\n  下面是测试代码\n\n  ~~本人只是刚开始玩reactor，程序写的很蹩脚XD~~\n\n  ```java\n  @Test\n    public void test() throws IOException {\n      AtomicReference<Employee> employeeAR = new AtomicReference<>(); //<1>\n      Scheduler scheduler = Schedulers.single(); //<2>\n      for (int i = 0; i < 5; i++) {\n        int finalI = i;\n        Mono.just(1)\n            .publishOn(scheduler)\n            .map(x -> {\n              try {\n                Thread.sleep(1000);\n                System.out.println(finalI + \"-\" + Thread.currentThread()\n                    .getName() + \"-A\"); //<3>\n              } catch (InterruptedException e) {\n                e.printStackTrace();\n              }\n              Employee emp = buildEmployee();\n              employeeAR.set(emp); //<1>\n              return emp;\n            })\n            .map(x -> {\n              try {\n                System.out.println(finalI + \"-\" + Thread.currentThread()\n                    .getName() + \"-B\"); //<3>\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n                e.printStackTrace();\n              }\n              return x;\n            })\n            .map(x -> {\n              System.out.println(finalI + \"-\" + Thread.currentThread()\n                  .getName() + \"-C\"); //<3>\n              return employeeAR.get().getAccountId(); //<1>\n            })\n            .subscribe(System.out::println);\n  \n        System.out.println(Thread.currentThread()\n            .getName());  //<3>\n      }\n      char c = (char) System.in.read();\n      System.out.println(\"your char is: \" + c);\n    }\n  ```\n\n  - <1> 因为涉及到匿名方法中的变量的再次调用，所以用到AtomicReference进行储存。\n\n  下面是`single`的运行结果\n\n  ```\n  main\n  main\n  main\n  main\n  main\n  0-single-1-A\n  0-single-1-B\n  0-single-1-C\n  123\n  1-single-1-A\n  1-single-1-B\n  1-single-1-C\n  123\n  2-single-1-A\n  2-single-1-B\n  2-single-1-C\n  123\n  3-single-1-A\n  3-single-1-B\n  3-single-1-C\n  123\n  4-single-1-A\n  4-single-1-B\n  4-single-1-C\n  123\n  ```\n\n  将<2>中`single`改为`parallel`\n\n  ```\n  main\n  main\n  main\n  main\n  main\n  0-parallel-1-A\n  3-parallel-4-A\n  2-parallel-3-A\n  4-parallel-5-A\n  0-parallel-1-B\n  3-parallel-4-B\n  2-parallel-3-B\n  1-parallel-2-A\n  1-parallel-2-B\n  4-parallel-5-B\n  0-parallel-1-C\n  1-parallel-2-C\n  3-parallel-4-C\n  4-parallel-5-C\n  2-parallel-3-C\n  123\n  123\n  123\n  123\n  123\n  ```\n\n  观察代码中<3>，我们可以发现调用链当中是按照顺序执行的（我最开始以为会平行执行调用链中的方法，但并不是），而且主线程也没有被阻塞，能够快速输出当前线程名称，由此可见已经达到我们最初的目的了——不阻塞主线程。\n\n## Why\n\n在这里我用的是Spring WebFlux，而其中会用到netty，其中有一个Eventloop模块，这是由单个线程运行的模块，这个单线程就是由我们程序所运行的主线程来担当。\n\nEventloop会重复检查当前有没有事件产生，若有则会接收该事件并运行相应的事件响应，也就是发布订阅模式，而如果我们在其中一个调用该事件的响应方法中等待（阻塞）过久，就会导致我们无法快速处理后续产生的事件，只能够加多线程进行快速处理，这就又回到了非异步编程当中去了。\n\n所以能够快速响应才能够体现出异步编程的优势。\n\n## Reference\n- [Is there a standard way to solve blocking that must happen.](https://github.com/reactor/reactor-core/issues/1756)\n- [How to handle blocking calls when using reactor in a JAX-RS-powered server?](https://stackoverflow.com/questions/56706308/how-to-handle-blocking-calls-when-using-reactor-in-a-jax-rs-powered-server)\n\n## TODO\n\n- [ ] 测试嵌套调用publishiOn是什么情况  \n- [ ] 是否是调用一次publishOn后，后面的链式调用都是在另一条线程，是否需要再次调用一次pubulishOn保证之后的一次阻塞操作也不在主线程当中  \n- [ ] 补充详细Evenloop  \n- [ ] 寻找更加优雅的方式，或者看看这种链式调用是不是也是一个不太好的地方  \n\n\n","slug":"lean-pulishOn-of-reactor","published":1,"updated":"2021-08-25T02:47:24.845Z","layout":"post","photos":[],"_id":"clzh7x5wb000oq4ql7n3ygb0k","content":"<p>其实本来想要记录问题的过程，但奈何自己也说不太好XD</p>\n<span id=\"more\"></span>\n<h2 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What\"></a>What</h2><p>由于接触Vert.x以及阅读其文档后，了解到异步编程下是不能够阻塞主线程的，不然异步将失去意义。</p>\n<p>我们需要做的是将这些阻塞线程移到其他线程进行处理。</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><p>利用Mono或是Flux的PublishOn方法将之后调用的方法都移动到其他线程进行处理。</p>\n<ul>\n<li><p><code>publishOn</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> Mono&lt;T&gt; <span class=\"hljs-title function_\">publishOn</span><span class=\"hljs-params\">(Scheduler scheduler)</span>;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> Flux&lt;T&gt; <span class=\"hljs-title function_\">publishOn</span><span class=\"hljs-params\">(Scheduler scheduler)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>其中<code>Scheduler</code>可用<code>Schedulers.parallel()</code>或<code>Schedulers.single()</code>进项创建或是其他方法，其中<code>single</code>和<code>parallel</code>是有一些区别的。</p>\n<ul>\n<li><p><code>single</code></p>\n<p>这一条调用链下不会同时执行，并且只有这条调用链执行完成后才会再次被调用</p>\n</li>\n<li><p><code>parallel</code></p>\n<p>与上面相反，调用链会在同时执行</p>\n</li>\n</ul>\n<p>下面是测试代码</p>\n<p><del>本人只是刚开始玩reactor，程序写的很蹩脚XD</del></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    AtomicReference&lt;Employee&gt; employeeAR = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicReference</span>&lt;&gt;(); <span class=\"hljs-comment\">//&lt;1&gt;</span><br>    <span class=\"hljs-type\">Scheduler</span> <span class=\"hljs-variable\">scheduler</span> <span class=\"hljs-operator\">=</span> Schedulers.single(); <span class=\"hljs-comment\">//&lt;2&gt;</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) &#123;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">finalI</span> <span class=\"hljs-operator\">=</span> i;<br>      Mono.just(<span class=\"hljs-number\">1</span>)<br>          .publishOn(scheduler)<br>          .map(x -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>              Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>              System.out.println(finalI + <span class=\"hljs-string\">&quot;-&quot;</span> + Thread.currentThread()<br>                  .getName() + <span class=\"hljs-string\">&quot;-A&quot;</span>); <span class=\"hljs-comment\">//&lt;3&gt;</span><br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>            &#125;<br>            <span class=\"hljs-type\">Employee</span> <span class=\"hljs-variable\">emp</span> <span class=\"hljs-operator\">=</span> buildEmployee();<br>            employeeAR.set(emp); <span class=\"hljs-comment\">//&lt;1&gt;</span><br>            <span class=\"hljs-keyword\">return</span> emp;<br>          &#125;)<br>          .map(x -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>              System.out.println(finalI + <span class=\"hljs-string\">&quot;-&quot;</span> + Thread.currentThread()<br>                  .getName() + <span class=\"hljs-string\">&quot;-B&quot;</span>); <span class=\"hljs-comment\">//&lt;3&gt;</span><br>              Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> x;<br>          &#125;)<br>          .map(x -&gt; &#123;<br>            System.out.println(finalI + <span class=\"hljs-string\">&quot;-&quot;</span> + Thread.currentThread()<br>                .getName() + <span class=\"hljs-string\">&quot;-C&quot;</span>); <span class=\"hljs-comment\">//&lt;3&gt;</span><br>            <span class=\"hljs-keyword\">return</span> employeeAR.get().getAccountId(); <span class=\"hljs-comment\">//&lt;1&gt;</span><br>          &#125;)<br>          .subscribe(System.out::println);<br><br>      System.out.println(Thread.currentThread()<br>          .getName());  <span class=\"hljs-comment\">//&lt;3&gt;</span><br>    &#125;<br>    <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">char</span>) System.in.read();<br>    System.out.println(<span class=\"hljs-string\">&quot;your char is: &quot;</span> + c);<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>&lt;1&gt; 因为涉及到匿名方法中的变量的再次调用，所以用到AtomicReference进行储存。</li>\n</ul>\n<p>下面是<code>single</code>的运行结果</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">0</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">0</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">0</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">1</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">1</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">1</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">2</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">2</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">2</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">3</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">3</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">3</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">4</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">4</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">4</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br></code></pre></td></tr></table></figure>\n\n<p>将&lt;2&gt;中<code>single</code>改为<code>parallel</code></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">0</span>-parallel-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">3</span>-parallel-<span class=\"hljs-number\">4</span>-A<br><span class=\"hljs-attribute\">2</span>-parallel-<span class=\"hljs-number\">3</span>-A<br><span class=\"hljs-attribute\">4</span>-parallel-<span class=\"hljs-number\">5</span>-A<br><span class=\"hljs-attribute\">0</span>-parallel-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">3</span>-parallel-<span class=\"hljs-number\">4</span>-B<br><span class=\"hljs-attribute\">2</span>-parallel-<span class=\"hljs-number\">3</span>-B<br><span class=\"hljs-attribute\">1</span>-parallel-<span class=\"hljs-number\">2</span>-A<br><span class=\"hljs-attribute\">1</span>-parallel-<span class=\"hljs-number\">2</span>-B<br><span class=\"hljs-attribute\">4</span>-parallel-<span class=\"hljs-number\">5</span>-B<br><span class=\"hljs-attribute\">0</span>-parallel-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">1</span>-parallel-<span class=\"hljs-number\">2</span>-C<br><span class=\"hljs-attribute\">3</span>-parallel-<span class=\"hljs-number\">4</span>-C<br><span class=\"hljs-attribute\">4</span>-parallel-<span class=\"hljs-number\">5</span>-C<br><span class=\"hljs-attribute\">2</span>-parallel-<span class=\"hljs-number\">3</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">123</span><br></code></pre></td></tr></table></figure>\n\n<p>观察代码中&lt;3&gt;，我们可以发现调用链当中是按照顺序执行的（我最开始以为会平行执行调用链中的方法，但并不是），而且主线程也没有被阻塞，能够快速输出当前线程名称，由此可见已经达到我们最初的目的了——不阻塞主线程。</p>\n</li>\n</ul>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>在这里我用的是Spring WebFlux，而其中会用到netty，其中有一个Eventloop模块，这是由单个线程运行的模块，这个单线程就是由我们程序所运行的主线程来担当。</p>\n<p>Eventloop会重复检查当前有没有事件产生，若有则会接收该事件并运行相应的事件响应，也就是发布订阅模式，而如果我们在其中一个调用该事件的响应方法中等待（阻塞）过久，就会导致我们无法快速处理后续产生的事件，只能够加多线程进行快速处理，这就又回到了非异步编程当中去了。</p>\n<p>所以能够快速响应才能够体现出异步编程的优势。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/reactor/reactor-core/issues/1756\">Is there a standard way to solve blocking that must happen.</a></li>\n<li><a href=\"https://stackoverflow.com/questions/56706308/how-to-handle-blocking-calls-when-using-reactor-in-a-jax-rs-powered-server\">How to handle blocking calls when using reactor in a JAX-RS-powered server?</a></li>\n</ul>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li><input disabled type=\"checkbox\"> 测试嵌套调用publishiOn是什么情况  </li>\n<li><input disabled type=\"checkbox\"> 是否是调用一次publishOn后，后面的链式调用都是在另一条线程，是否需要再次调用一次pubulishOn保证之后的一次阻塞操作也不在主线程当中  </li>\n<li><input disabled type=\"checkbox\"> 补充详细Evenloop  </li>\n<li><input disabled type=\"checkbox\"> 寻找更加优雅的方式，或者看看这种链式调用是不是也是一个不太好的地方  </li>\n</ul>\n","excerpt":"<p>其实本来想要记录问题的过程，但奈何自己也说不太好XD</p>","more":"<h2 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What\"></a>What</h2><p>由于接触Vert.x以及阅读其文档后，了解到异步编程下是不能够阻塞主线程的，不然异步将失去意义。</p>\n<p>我们需要做的是将这些阻塞线程移到其他线程进行处理。</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><p>利用Mono或是Flux的PublishOn方法将之后调用的方法都移动到其他线程进行处理。</p>\n<ul>\n<li><p><code>publishOn</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> Mono&lt;T&gt; <span class=\"hljs-title function_\">publishOn</span><span class=\"hljs-params\">(Scheduler scheduler)</span>;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> Flux&lt;T&gt; <span class=\"hljs-title function_\">publishOn</span><span class=\"hljs-params\">(Scheduler scheduler)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>其中<code>Scheduler</code>可用<code>Schedulers.parallel()</code>或<code>Schedulers.single()</code>进项创建或是其他方法，其中<code>single</code>和<code>parallel</code>是有一些区别的。</p>\n<ul>\n<li><p><code>single</code></p>\n<p>这一条调用链下不会同时执行，并且只有这条调用链执行完成后才会再次被调用</p>\n</li>\n<li><p><code>parallel</code></p>\n<p>与上面相反，调用链会在同时执行</p>\n</li>\n</ul>\n<p>下面是测试代码</p>\n<p><del>本人只是刚开始玩reactor，程序写的很蹩脚XD</del></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    AtomicReference&lt;Employee&gt; employeeAR = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicReference</span>&lt;&gt;(); <span class=\"hljs-comment\">//&lt;1&gt;</span><br>    <span class=\"hljs-type\">Scheduler</span> <span class=\"hljs-variable\">scheduler</span> <span class=\"hljs-operator\">=</span> Schedulers.single(); <span class=\"hljs-comment\">//&lt;2&gt;</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) &#123;<br>      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">finalI</span> <span class=\"hljs-operator\">=</span> i;<br>      Mono.just(<span class=\"hljs-number\">1</span>)<br>          .publishOn(scheduler)<br>          .map(x -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>              Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>              System.out.println(finalI + <span class=\"hljs-string\">&quot;-&quot;</span> + Thread.currentThread()<br>                  .getName() + <span class=\"hljs-string\">&quot;-A&quot;</span>); <span class=\"hljs-comment\">//&lt;3&gt;</span><br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>            &#125;<br>            <span class=\"hljs-type\">Employee</span> <span class=\"hljs-variable\">emp</span> <span class=\"hljs-operator\">=</span> buildEmployee();<br>            employeeAR.set(emp); <span class=\"hljs-comment\">//&lt;1&gt;</span><br>            <span class=\"hljs-keyword\">return</span> emp;<br>          &#125;)<br>          .map(x -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>              System.out.println(finalI + <span class=\"hljs-string\">&quot;-&quot;</span> + Thread.currentThread()<br>                  .getName() + <span class=\"hljs-string\">&quot;-B&quot;</span>); <span class=\"hljs-comment\">//&lt;3&gt;</span><br>              Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>            &#125;<br>            <span class=\"hljs-keyword\">return</span> x;<br>          &#125;)<br>          .map(x -&gt; &#123;<br>            System.out.println(finalI + <span class=\"hljs-string\">&quot;-&quot;</span> + Thread.currentThread()<br>                .getName() + <span class=\"hljs-string\">&quot;-C&quot;</span>); <span class=\"hljs-comment\">//&lt;3&gt;</span><br>            <span class=\"hljs-keyword\">return</span> employeeAR.get().getAccountId(); <span class=\"hljs-comment\">//&lt;1&gt;</span><br>          &#125;)<br>          .subscribe(System.out::println);<br><br>      System.out.println(Thread.currentThread()<br>          .getName());  <span class=\"hljs-comment\">//&lt;3&gt;</span><br>    &#125;<br>    <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">char</span>) System.in.read();<br>    System.out.println(<span class=\"hljs-string\">&quot;your char is: &quot;</span> + c);<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>&lt;1&gt; 因为涉及到匿名方法中的变量的再次调用，所以用到AtomicReference进行储存。</li>\n</ul>\n<p>下面是<code>single</code>的运行结果</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">0</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">0</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">0</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">1</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">1</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">1</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">2</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">2</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">2</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">3</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">3</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">3</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">4</span>-single-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">4</span>-single-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">4</span>-single-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">123</span><br></code></pre></td></tr></table></figure>\n\n<p>将&lt;2&gt;中<code>single</code>改为<code>parallel</code></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">main</span><br><span class=\"hljs-attribute\">0</span>-parallel-<span class=\"hljs-number\">1</span>-A<br><span class=\"hljs-attribute\">3</span>-parallel-<span class=\"hljs-number\">4</span>-A<br><span class=\"hljs-attribute\">2</span>-parallel-<span class=\"hljs-number\">3</span>-A<br><span class=\"hljs-attribute\">4</span>-parallel-<span class=\"hljs-number\">5</span>-A<br><span class=\"hljs-attribute\">0</span>-parallel-<span class=\"hljs-number\">1</span>-B<br><span class=\"hljs-attribute\">3</span>-parallel-<span class=\"hljs-number\">4</span>-B<br><span class=\"hljs-attribute\">2</span>-parallel-<span class=\"hljs-number\">3</span>-B<br><span class=\"hljs-attribute\">1</span>-parallel-<span class=\"hljs-number\">2</span>-A<br><span class=\"hljs-attribute\">1</span>-parallel-<span class=\"hljs-number\">2</span>-B<br><span class=\"hljs-attribute\">4</span>-parallel-<span class=\"hljs-number\">5</span>-B<br><span class=\"hljs-attribute\">0</span>-parallel-<span class=\"hljs-number\">1</span>-C<br><span class=\"hljs-attribute\">1</span>-parallel-<span class=\"hljs-number\">2</span>-C<br><span class=\"hljs-attribute\">3</span>-parallel-<span class=\"hljs-number\">4</span>-C<br><span class=\"hljs-attribute\">4</span>-parallel-<span class=\"hljs-number\">5</span>-C<br><span class=\"hljs-attribute\">2</span>-parallel-<span class=\"hljs-number\">3</span>-C<br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">123</span><br><span class=\"hljs-attribute\">123</span><br></code></pre></td></tr></table></figure>\n\n<p>观察代码中&lt;3&gt;，我们可以发现调用链当中是按照顺序执行的（我最开始以为会平行执行调用链中的方法，但并不是），而且主线程也没有被阻塞，能够快速输出当前线程名称，由此可见已经达到我们最初的目的了——不阻塞主线程。</p>\n</li>\n</ul>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>在这里我用的是Spring WebFlux，而其中会用到netty，其中有一个Eventloop模块，这是由单个线程运行的模块，这个单线程就是由我们程序所运行的主线程来担当。</p>\n<p>Eventloop会重复检查当前有没有事件产生，若有则会接收该事件并运行相应的事件响应，也就是发布订阅模式，而如果我们在其中一个调用该事件的响应方法中等待（阻塞）过久，就会导致我们无法快速处理后续产生的事件，只能够加多线程进行快速处理，这就又回到了非异步编程当中去了。</p>\n<p>所以能够快速响应才能够体现出异步编程的优势。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"https://github.com/reactor/reactor-core/issues/1756\">Is there a standard way to solve blocking that must happen.</a></li>\n<li><a href=\"https://stackoverflow.com/questions/56706308/how-to-handle-blocking-calls-when-using-reactor-in-a-jax-rs-powered-server\">How to handle blocking calls when using reactor in a JAX-RS-powered server?</a></li>\n</ul>\n<h2 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h2><ul>\n<li><input disabled type=\"checkbox\"> 测试嵌套调用publishiOn是什么情况  </li>\n<li><input disabled type=\"checkbox\"> 是否是调用一次publishOn后，后面的链式调用都是在另一条线程，是否需要再次调用一次pubulishOn保证之后的一次阻塞操作也不在主线程当中  </li>\n<li><input disabled type=\"checkbox\"> 补充详细Evenloop  </li>\n<li><input disabled type=\"checkbox\"> 寻找更加优雅的方式，或者看看这种链式调用是不是也是一个不太好的地方  </li>\n</ul>"},{"title":"学习JPA笔记——构建复杂查询","date":"2020-10-06T01:25:19.000Z","comments":1,"index_img":"/gallery/learning-jpa-02.jpg","banner_img":"/gallery/learning-jpa-02.jpg","_content":"本篇介绍两种 JPA 做复杂查询的方法，一个是用 SpringDataJPA 实现， 一个是用 Java EE 实现。\n<!--more-->\n> 封面：同上篇，这次前景就是最高机密 Viper Zero。~~嗯，没啥问题，每集一张，只是PS了~~\n\n## Foreword\n\n### JPA以及其他类似东西之间的关系\n在进入正题之前还是稍微提一下这几个东西之间的关系。\n首先JPA是一种规范，Java EE 中有把这种规范抽象出来的接口，具体实现是看用的什么框架，可以是 Hibernate 或者是 EclipseLink 等。\n而这之中 Spring 又对 Java EE 中的接口再次封装，以更好地整合进 Spring 体系当中，但 SpringDataJPA 仍然是个抽象，具体实现仍然是看选型的框架。\n但日常中，由于 SpringDataJPA 默认是 Hibernate 实现，所以一般场合基本相当于 Hibernate。\n\n### 个人对于数据库复杂查询的理解或看法\n对于联表这些事情我个人的感受来说是极为痛苦的，表面上可以不多此查询数据库，不查询多余数据，不需要程序做多次遍历。  \n其实在一些压力不大的场景中，这些都显得很无所谓。多次连接有缓存，多次遍历实际消耗也不大，多余数据实际上做 join 的时候就会拿过来，join 中加入条件也和第二次查询加入条件差不多。\n但实际上最麻烦的，是当真正数据库压力上来了，这些操作都没有太大意义，最后还是会在数据库和程序此之间加入缓存，把数据库做的很多事情放到程序当中去做，尽量减低数据库压力。\n而此时你就会发现之前做的联表查询之类的就像是外来物一样格格不入。\n\n所以我对此也非常欣赏DDD的设计美感。\n\n## SpringDataJPA\nSpringDataJPA 的复杂查询除了直接写 sql，按照规则定义 Repository 接口方法以外，还可以使用Specification做查询。\n\n### Specification\n这是SpringDataJPA抽象出的一个接口，故并不一定通用于其他JPA的实现。\n该接口重点在于`toPredicate`方法，该方法将创建一个 where 语句对象。\n```\npublic interface Specification<T> extends Serializable {\n\n    ...\n\n    /**\n     * Creates a WHERE clause for a query of the referenced entity in form of a  Predicate for the given\n     * Root and CriteriaQuery.\n     */\n    @Nullable\n    Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder criteriaBuilder);\n}\n```\n这里我只做简要说明，以便于理解，仅供参考。\n- root：\n    一般指实体类本身，包装成 Root 对象, 可由query.from(Post.class)得到`Root<Post>`，Java EE 会提到。\n- query：\n    sql语句对象，一般在此方法内部不做调用，Java EE 会给一些用于理解的调用。\n- criteriaBuilder：\n    用于构建条件语句。\n\n> 个人建议是不要管我说的这些，真要去理解就看源码注释，或者看下面 Java EE 的代码，更能够理解。\n    \n### Getting Started\n首先我们创建一个 Repository 接口，并继承`JpaSpecificationExecutor<T>`以获得复杂查询的能力。\n```java\npublic interface PostRepository extends JpaSpecificationExecutor<Post> {\n}\n```\n然后我们运用 java8 所带来的新特性，使用 lambda 构建一个匿名 Specification 的实现类，并实现 toPredicate 方法。\n```\nrepository.findAll(\n    (Specification<Post>) (root, criteriaQuery, builder) -> { \n        // where title like '%Test%';\n        return builder.like(root.get(Post_.title), \"%Test%\")\n        // 如果是多个条件，例如 where title like '%Test%' and content like '%Test%' and id < 10;\n        return builder.and(builder.like(root.get(Post_.title), \"%Test%\"), builder.like(root.get(Post_.content), \"%Test%\"), builder.le(root.get(Post_.id), 10))\n        // 而如果我们没有做 Typesafe，那么就会变成这样\n        return builder.like(root.get(\"title\"), \"%Test%\")\n    }\n);\n```\n使用起来其实没什么困难，基本举一反三，其他的复杂查询我暂时没研究，主要是觉得可以避开用别的方法操作，或者提到程序中操作。\n\n## Java EE\n实际上，SpringDataJPA 是对 Java EE 原本的 JPA 抽象再次包装了一层，所以这个可以说是原汁原味了。\n\n### Getting Stated\n由于我主要使用 SpringDataJPA 所以摘抄了一段代码，[出处](https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java)。\n```\n//需要对此进行注入\nprivate final EntityManage entityManager;\n\nString q;\nint offset, limit;\n\nCriteriaBuilder cb = this.entityManager.getCriteriaBuilder();\n// create query\nCriteriaQuery<Post> query = cb.createQuery(Post.class);\n// set the root class\nRoot<Post> root = query.from(Post.class);\n\n// if keyword is provided\nif (q != null && !q.trim().isEmpty()) {\n    // 这里其实就是上面 toPredicate 返回的对象作为参数传入where方法当中，所以里面就和上面的实现没有什么太大区别。\n    query.where(\n            cb.or(\n                    cb.like(root.get(Post_.title), \"%\" + q + \"%\"),\n                    cb.like(root.get(Post_.content), \"%\" + q + \"%\")\n            )\n    );\n}\n//perform query\nreturn this.entityManager.createQuery(query)\n        .setFirstResult(offset)\n        .setMaxResults(limit)\n        .getResultList();\n```\n\n- EntityManager\n    实体管理类，用于与持久化上下文进行互动，核心类。\n    \n其他几个 Root、CriteriaQuery、CriteriaBuilder 作用同上，毕竟spring只是做了封装。\n看完上面代码，大致就能够了解清楚这几个类分别是怎么使用的了，总体来说其实比上面spring的实现所接触到的东西更加全面一些，也能够理解这几个类互相是怎么作用的了。\n\n## Reference\n[helidon-sample](https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java) @ [hantsy](https://github.com/hantsy)\n","source":"_posts/learning-jpa-02.md","raw":"---\ntitle: 学习JPA笔记——构建复杂查询\ndate: 2020-10-06 09:25:19\ncategories: \n    - 编程\ntags:\n    - Java\n    - ORM\n    - JPA\n    - Hibernate\ncomments: true\nindex_img: /gallery/learning-jpa-02.jpg\nbanner_img: /gallery/learning-jpa-02.jpg\n---\n本篇介绍两种 JPA 做复杂查询的方法，一个是用 SpringDataJPA 实现， 一个是用 Java EE 实现。\n<!--more-->\n> 封面：同上篇，这次前景就是最高机密 Viper Zero。~~嗯，没啥问题，每集一张，只是PS了~~\n\n## Foreword\n\n### JPA以及其他类似东西之间的关系\n在进入正题之前还是稍微提一下这几个东西之间的关系。\n首先JPA是一种规范，Java EE 中有把这种规范抽象出来的接口，具体实现是看用的什么框架，可以是 Hibernate 或者是 EclipseLink 等。\n而这之中 Spring 又对 Java EE 中的接口再次封装，以更好地整合进 Spring 体系当中，但 SpringDataJPA 仍然是个抽象，具体实现仍然是看选型的框架。\n但日常中，由于 SpringDataJPA 默认是 Hibernate 实现，所以一般场合基本相当于 Hibernate。\n\n### 个人对于数据库复杂查询的理解或看法\n对于联表这些事情我个人的感受来说是极为痛苦的，表面上可以不多此查询数据库，不查询多余数据，不需要程序做多次遍历。  \n其实在一些压力不大的场景中，这些都显得很无所谓。多次连接有缓存，多次遍历实际消耗也不大，多余数据实际上做 join 的时候就会拿过来，join 中加入条件也和第二次查询加入条件差不多。\n但实际上最麻烦的，是当真正数据库压力上来了，这些操作都没有太大意义，最后还是会在数据库和程序此之间加入缓存，把数据库做的很多事情放到程序当中去做，尽量减低数据库压力。\n而此时你就会发现之前做的联表查询之类的就像是外来物一样格格不入。\n\n所以我对此也非常欣赏DDD的设计美感。\n\n## SpringDataJPA\nSpringDataJPA 的复杂查询除了直接写 sql，按照规则定义 Repository 接口方法以外，还可以使用Specification做查询。\n\n### Specification\n这是SpringDataJPA抽象出的一个接口，故并不一定通用于其他JPA的实现。\n该接口重点在于`toPredicate`方法，该方法将创建一个 where 语句对象。\n```\npublic interface Specification<T> extends Serializable {\n\n    ...\n\n    /**\n     * Creates a WHERE clause for a query of the referenced entity in form of a  Predicate for the given\n     * Root and CriteriaQuery.\n     */\n    @Nullable\n    Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder criteriaBuilder);\n}\n```\n这里我只做简要说明，以便于理解，仅供参考。\n- root：\n    一般指实体类本身，包装成 Root 对象, 可由query.from(Post.class)得到`Root<Post>`，Java EE 会提到。\n- query：\n    sql语句对象，一般在此方法内部不做调用，Java EE 会给一些用于理解的调用。\n- criteriaBuilder：\n    用于构建条件语句。\n\n> 个人建议是不要管我说的这些，真要去理解就看源码注释，或者看下面 Java EE 的代码，更能够理解。\n    \n### Getting Started\n首先我们创建一个 Repository 接口，并继承`JpaSpecificationExecutor<T>`以获得复杂查询的能力。\n```java\npublic interface PostRepository extends JpaSpecificationExecutor<Post> {\n}\n```\n然后我们运用 java8 所带来的新特性，使用 lambda 构建一个匿名 Specification 的实现类，并实现 toPredicate 方法。\n```\nrepository.findAll(\n    (Specification<Post>) (root, criteriaQuery, builder) -> { \n        // where title like '%Test%';\n        return builder.like(root.get(Post_.title), \"%Test%\")\n        // 如果是多个条件，例如 where title like '%Test%' and content like '%Test%' and id < 10;\n        return builder.and(builder.like(root.get(Post_.title), \"%Test%\"), builder.like(root.get(Post_.content), \"%Test%\"), builder.le(root.get(Post_.id), 10))\n        // 而如果我们没有做 Typesafe，那么就会变成这样\n        return builder.like(root.get(\"title\"), \"%Test%\")\n    }\n);\n```\n使用起来其实没什么困难，基本举一反三，其他的复杂查询我暂时没研究，主要是觉得可以避开用别的方法操作，或者提到程序中操作。\n\n## Java EE\n实际上，SpringDataJPA 是对 Java EE 原本的 JPA 抽象再次包装了一层，所以这个可以说是原汁原味了。\n\n### Getting Stated\n由于我主要使用 SpringDataJPA 所以摘抄了一段代码，[出处](https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java)。\n```\n//需要对此进行注入\nprivate final EntityManage entityManager;\n\nString q;\nint offset, limit;\n\nCriteriaBuilder cb = this.entityManager.getCriteriaBuilder();\n// create query\nCriteriaQuery<Post> query = cb.createQuery(Post.class);\n// set the root class\nRoot<Post> root = query.from(Post.class);\n\n// if keyword is provided\nif (q != null && !q.trim().isEmpty()) {\n    // 这里其实就是上面 toPredicate 返回的对象作为参数传入where方法当中，所以里面就和上面的实现没有什么太大区别。\n    query.where(\n            cb.or(\n                    cb.like(root.get(Post_.title), \"%\" + q + \"%\"),\n                    cb.like(root.get(Post_.content), \"%\" + q + \"%\")\n            )\n    );\n}\n//perform query\nreturn this.entityManager.createQuery(query)\n        .setFirstResult(offset)\n        .setMaxResults(limit)\n        .getResultList();\n```\n\n- EntityManager\n    实体管理类，用于与持久化上下文进行互动，核心类。\n    \n其他几个 Root、CriteriaQuery、CriteriaBuilder 作用同上，毕竟spring只是做了封装。\n看完上面代码，大致就能够了解清楚这几个类分别是怎么使用的了，总体来说其实比上面spring的实现所接触到的东西更加全面一些，也能够理解这几个类互相是怎么作用的了。\n\n## Reference\n[helidon-sample](https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java) @ [hantsy](https://github.com/hantsy)\n","slug":"learning-jpa-02","published":1,"updated":"2021-08-25T02:47:24.846Z","layout":"post","photos":[],"_id":"clzh7x5wb000sq4ql1906c6t7","content":"<p>本篇介绍两种 JPA 做复杂查询的方法，一个是用 SpringDataJPA 实现， 一个是用 Java EE 实现。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>封面：同上篇，这次前景就是最高机密 Viper Zero。<del>嗯，没啥问题，每集一张，只是PS了</del></p>\n</blockquote>\n<h2 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h2><h3 id=\"JPA以及其他类似东西之间的关系\"><a href=\"#JPA以及其他类似东西之间的关系\" class=\"headerlink\" title=\"JPA以及其他类似东西之间的关系\"></a>JPA以及其他类似东西之间的关系</h3><p>在进入正题之前还是稍微提一下这几个东西之间的关系。<br>首先JPA是一种规范，Java EE 中有把这种规范抽象出来的接口，具体实现是看用的什么框架，可以是 Hibernate 或者是 EclipseLink 等。<br>而这之中 Spring 又对 Java EE 中的接口再次封装，以更好地整合进 Spring 体系当中，但 SpringDataJPA 仍然是个抽象，具体实现仍然是看选型的框架。<br>但日常中，由于 SpringDataJPA 默认是 Hibernate 实现，所以一般场合基本相当于 Hibernate。</p>\n<h3 id=\"个人对于数据库复杂查询的理解或看法\"><a href=\"#个人对于数据库复杂查询的理解或看法\" class=\"headerlink\" title=\"个人对于数据库复杂查询的理解或看法\"></a>个人对于数据库复杂查询的理解或看法</h3><p>对于联表这些事情我个人的感受来说是极为痛苦的，表面上可以不多此查询数据库，不查询多余数据，不需要程序做多次遍历。<br>其实在一些压力不大的场景中，这些都显得很无所谓。多次连接有缓存，多次遍历实际消耗也不大，多余数据实际上做 join 的时候就会拿过来，join 中加入条件也和第二次查询加入条件差不多。<br>但实际上最麻烦的，是当真正数据库压力上来了，这些操作都没有太大意义，最后还是会在数据库和程序此之间加入缓存，把数据库做的很多事情放到程序当中去做，尽量减低数据库压力。<br>而此时你就会发现之前做的联表查询之类的就像是外来物一样格格不入。</p>\n<p>所以我对此也非常欣赏DDD的设计美感。</p>\n<h2 id=\"SpringDataJPA\"><a href=\"#SpringDataJPA\" class=\"headerlink\" title=\"SpringDataJPA\"></a>SpringDataJPA</h2><p>SpringDataJPA 的复杂查询除了直接写 sql，按照规则定义 Repository 接口方法以外，还可以使用Specification做查询。</p>\n<h3 id=\"Specification\"><a href=\"#Specification\" class=\"headerlink\" title=\"Specification\"></a>Specification</h3><p>这是SpringDataJPA抽象出的一个接口，故并不一定通用于其他JPA的实现。<br>该接口重点在于<code>toPredicate</code>方法，该方法将创建一个 where 语句对象。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">Specification</span>&lt;<span class=\"hljs-symbol\">T</span>&gt; <span class=\"hljs-symbol\">extends</span> <span class=\"hljs-symbol\">Serializable</span> &#123;<br><br>    ...<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * Creates a WHERE clause for a query of the referenced entity in form of a  Predicate for the given</span><br><span class=\"hljs-comment\">     * Root and CriteriaQuery.</span><br><span class=\"hljs-comment\">     */</span><br>    @Nullable<br>    Predicate toPredicate(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder criteriaBuilder);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里我只做简要说明，以便于理解，仅供参考。</p>\n<ul>\n<li>root：<br>  一般指实体类本身，包装成 Root 对象, 可由query.from(Post.class)得到<code>Root&lt;Post&gt;</code>，Java EE 会提到。</li>\n<li>query：<br>  sql语句对象，一般在此方法内部不做调用，Java EE 会给一些用于理解的调用。</li>\n<li>criteriaBuilder：<br>  用于构建条件语句。</li>\n</ul>\n<blockquote>\n<p>个人建议是不要管我说的这些，真要去理解就看源码注释，或者看下面 Java EE 的代码，更能够理解。</p>\n</blockquote>\n<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><p>首先我们创建一个 Repository 接口，并继承<code>JpaSpecificationExecutor&lt;T&gt;</code>以获得复杂查询的能力。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PostRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">JpaSpecificationExecutor</span>&lt;Post&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们运用 java8 所带来的新特性，使用 lambda 构建一个匿名 Specification 的实现类，并实现 toPredicate 方法。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">repository.findAll(<br>    (Specification&lt;Post&gt;) (root, criteriaQuery, builder) -&gt; &#123; <br>        // <span class=\"hljs-keyword\">where</span> title <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%Test%&#x27;</span>;<br>        <span class=\"hljs-keyword\">return</span> builder.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.title), &quot;%Test%&quot;)<br>        // 如果是多个条件，例如 <span class=\"hljs-keyword\">where</span> title <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%Test%&#x27;</span> <span class=\"hljs-keyword\">and</span> content <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%Test%&#x27;</span> <span class=\"hljs-keyword\">and</span> id &lt; <span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-keyword\">return</span> builder.<span class=\"hljs-keyword\">and</span>(builder.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.title), &quot;%Test%&quot;), builder.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.content), &quot;%Test%&quot;), builder.le(root.<span class=\"hljs-keyword\">get</span>(Post_.id), <span class=\"hljs-number\">10</span>))<br>        // 而如果我们没有做 Typesafe，那么就会变成这样<br>        <span class=\"hljs-keyword\">return</span> builder.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(&quot;title&quot;), &quot;%Test%&quot;)<br>    &#125;<br>);<br></code></pre></td></tr></table></figure>\n<p>使用起来其实没什么困难，基本举一反三，其他的复杂查询我暂时没研究，主要是觉得可以避开用别的方法操作，或者提到程序中操作。</p>\n<h2 id=\"Java-EE\"><a href=\"#Java-EE\" class=\"headerlink\" title=\"Java EE\"></a>Java EE</h2><p>实际上，SpringDataJPA 是对 Java EE 原本的 JPA 抽象再次包装了一层，所以这个可以说是原汁原味了。</p>\n<h3 id=\"Getting-Stated\"><a href=\"#Getting-Stated\" class=\"headerlink\" title=\"Getting Stated\"></a>Getting Stated</h3><p>由于我主要使用 SpringDataJPA 所以摘抄了一段代码，<a href=\"https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java\">出处</a>。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//需要对此进行注入<br>private final EntityManage entityManager;<br><br>String q;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">offset</span>, <span class=\"hljs-keyword\">limit</span>;<br><br>CriteriaBuilder cb = this.entityManager.getCriteriaBuilder();<br>// <span class=\"hljs-keyword\">create</span> query<br>CriteriaQuery&lt;Post&gt; query = cb.createQuery(Post.<span class=\"hljs-keyword\">class</span>);<br>// <span class=\"hljs-keyword\">set</span> the root <span class=\"hljs-keyword\">class</span><br>Root&lt;Post&gt; root = query.<span class=\"hljs-keyword\">from</span>(Post.<span class=\"hljs-keyword\">class</span>);<br><br>// <span class=\"hljs-keyword\">if</span> keyword <span class=\"hljs-keyword\">is</span> provided<br><span class=\"hljs-keyword\">if</span> (q != <span class=\"hljs-keyword\">null</span> &amp;&amp; !q.trim().isEmpty()) &#123;<br>    // 这里其实就是上面 toPredicate 返回的对象作为参数传入<span class=\"hljs-keyword\">where</span>方法当中，所以里面就和上面的实现没有什么太大区别。<br>    query.<span class=\"hljs-keyword\">where</span>(<br>            cb.<span class=\"hljs-keyword\">or</span>(<br>                    cb.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.title), &quot;%&quot; + q + &quot;%&quot;),<br>                    cb.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.content), &quot;%&quot; + q + &quot;%&quot;)<br>            )<br>    );<br>&#125;<br>//<span class=\"hljs-keyword\">perform</span> query<br><span class=\"hljs-keyword\">return</span> this.entityManager.createQuery(query)<br>        .setFirstResult(<span class=\"hljs-keyword\">offset</span>)<br>        .setMaxResults(<span class=\"hljs-keyword\">limit</span>)<br>        .getResultList();<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>EntityManager<br>  实体管理类，用于与持久化上下文进行互动，核心类。</li>\n</ul>\n<p>其他几个 Root、CriteriaQuery、CriteriaBuilder 作用同上，毕竟spring只是做了封装。<br>看完上面代码，大致就能够了解清楚这几个类分别是怎么使用的了，总体来说其实比上面spring的实现所接触到的东西更加全面一些，也能够理解这几个类互相是怎么作用的了。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java\">helidon-sample</a> @ <a href=\"https://github.com/hantsy\">hantsy</a></p>\n","excerpt":"<p>本篇介绍两种 JPA 做复杂查询的方法，一个是用 SpringDataJPA 实现， 一个是用 Java EE 实现。</p>","more":"<blockquote>\n<p>封面：同上篇，这次前景就是最高机密 Viper Zero。<del>嗯，没啥问题，每集一张，只是PS了</del></p>\n</blockquote>\n<h2 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h2><h3 id=\"JPA以及其他类似东西之间的关系\"><a href=\"#JPA以及其他类似东西之间的关系\" class=\"headerlink\" title=\"JPA以及其他类似东西之间的关系\"></a>JPA以及其他类似东西之间的关系</h3><p>在进入正题之前还是稍微提一下这几个东西之间的关系。<br>首先JPA是一种规范，Java EE 中有把这种规范抽象出来的接口，具体实现是看用的什么框架，可以是 Hibernate 或者是 EclipseLink 等。<br>而这之中 Spring 又对 Java EE 中的接口再次封装，以更好地整合进 Spring 体系当中，但 SpringDataJPA 仍然是个抽象，具体实现仍然是看选型的框架。<br>但日常中，由于 SpringDataJPA 默认是 Hibernate 实现，所以一般场合基本相当于 Hibernate。</p>\n<h3 id=\"个人对于数据库复杂查询的理解或看法\"><a href=\"#个人对于数据库复杂查询的理解或看法\" class=\"headerlink\" title=\"个人对于数据库复杂查询的理解或看法\"></a>个人对于数据库复杂查询的理解或看法</h3><p>对于联表这些事情我个人的感受来说是极为痛苦的，表面上可以不多此查询数据库，不查询多余数据，不需要程序做多次遍历。<br>其实在一些压力不大的场景中，这些都显得很无所谓。多次连接有缓存，多次遍历实际消耗也不大，多余数据实际上做 join 的时候就会拿过来，join 中加入条件也和第二次查询加入条件差不多。<br>但实际上最麻烦的，是当真正数据库压力上来了，这些操作都没有太大意义，最后还是会在数据库和程序此之间加入缓存，把数据库做的很多事情放到程序当中去做，尽量减低数据库压力。<br>而此时你就会发现之前做的联表查询之类的就像是外来物一样格格不入。</p>\n<p>所以我对此也非常欣赏DDD的设计美感。</p>\n<h2 id=\"SpringDataJPA\"><a href=\"#SpringDataJPA\" class=\"headerlink\" title=\"SpringDataJPA\"></a>SpringDataJPA</h2><p>SpringDataJPA 的复杂查询除了直接写 sql，按照规则定义 Repository 接口方法以外，还可以使用Specification做查询。</p>\n<h3 id=\"Specification\"><a href=\"#Specification\" class=\"headerlink\" title=\"Specification\"></a>Specification</h3><p>这是SpringDataJPA抽象出的一个接口，故并不一定通用于其他JPA的实现。<br>该接口重点在于<code>toPredicate</code>方法，该方法将创建一个 where 语句对象。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-symbol\">Specification</span>&lt;<span class=\"hljs-symbol\">T</span>&gt; <span class=\"hljs-symbol\">extends</span> <span class=\"hljs-symbol\">Serializable</span> &#123;<br><br>    ...<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * Creates a WHERE clause for a query of the referenced entity in form of a  Predicate for the given</span><br><span class=\"hljs-comment\">     * Root and CriteriaQuery.</span><br><span class=\"hljs-comment\">     */</span><br>    @Nullable<br>    Predicate toPredicate(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder criteriaBuilder);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里我只做简要说明，以便于理解，仅供参考。</p>\n<ul>\n<li>root：<br>  一般指实体类本身，包装成 Root 对象, 可由query.from(Post.class)得到<code>Root&lt;Post&gt;</code>，Java EE 会提到。</li>\n<li>query：<br>  sql语句对象，一般在此方法内部不做调用，Java EE 会给一些用于理解的调用。</li>\n<li>criteriaBuilder：<br>  用于构建条件语句。</li>\n</ul>\n<blockquote>\n<p>个人建议是不要管我说的这些，真要去理解就看源码注释，或者看下面 Java EE 的代码，更能够理解。</p>\n</blockquote>\n<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><p>首先我们创建一个 Repository 接口，并继承<code>JpaSpecificationExecutor&lt;T&gt;</code>以获得复杂查询的能力。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PostRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">JpaSpecificationExecutor</span>&lt;Post&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们运用 java8 所带来的新特性，使用 lambda 构建一个匿名 Specification 的实现类，并实现 toPredicate 方法。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">repository.findAll(<br>    (Specification&lt;Post&gt;) (root, criteriaQuery, builder) -&gt; &#123; <br>        // <span class=\"hljs-keyword\">where</span> title <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%Test%&#x27;</span>;<br>        <span class=\"hljs-keyword\">return</span> builder.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.title), &quot;%Test%&quot;)<br>        // 如果是多个条件，例如 <span class=\"hljs-keyword\">where</span> title <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%Test%&#x27;</span> <span class=\"hljs-keyword\">and</span> content <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%Test%&#x27;</span> <span class=\"hljs-keyword\">and</span> id &lt; <span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-keyword\">return</span> builder.<span class=\"hljs-keyword\">and</span>(builder.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.title), &quot;%Test%&quot;), builder.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.content), &quot;%Test%&quot;), builder.le(root.<span class=\"hljs-keyword\">get</span>(Post_.id), <span class=\"hljs-number\">10</span>))<br>        // 而如果我们没有做 Typesafe，那么就会变成这样<br>        <span class=\"hljs-keyword\">return</span> builder.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(&quot;title&quot;), &quot;%Test%&quot;)<br>    &#125;<br>);<br></code></pre></td></tr></table></figure>\n<p>使用起来其实没什么困难，基本举一反三，其他的复杂查询我暂时没研究，主要是觉得可以避开用别的方法操作，或者提到程序中操作。</p>\n<h2 id=\"Java-EE\"><a href=\"#Java-EE\" class=\"headerlink\" title=\"Java EE\"></a>Java EE</h2><p>实际上，SpringDataJPA 是对 Java EE 原本的 JPA 抽象再次包装了一层，所以这个可以说是原汁原味了。</p>\n<h3 id=\"Getting-Stated\"><a href=\"#Getting-Stated\" class=\"headerlink\" title=\"Getting Stated\"></a>Getting Stated</h3><p>由于我主要使用 SpringDataJPA 所以摘抄了一段代码，<a href=\"https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java\">出处</a>。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">//需要对此进行注入<br>private final EntityManage entityManager;<br><br>String q;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">offset</span>, <span class=\"hljs-keyword\">limit</span>;<br><br>CriteriaBuilder cb = this.entityManager.getCriteriaBuilder();<br>// <span class=\"hljs-keyword\">create</span> query<br>CriteriaQuery&lt;Post&gt; query = cb.createQuery(Post.<span class=\"hljs-keyword\">class</span>);<br>// <span class=\"hljs-keyword\">set</span> the root <span class=\"hljs-keyword\">class</span><br>Root&lt;Post&gt; root = query.<span class=\"hljs-keyword\">from</span>(Post.<span class=\"hljs-keyword\">class</span>);<br><br>// <span class=\"hljs-keyword\">if</span> keyword <span class=\"hljs-keyword\">is</span> provided<br><span class=\"hljs-keyword\">if</span> (q != <span class=\"hljs-keyword\">null</span> &amp;&amp; !q.trim().isEmpty()) &#123;<br>    // 这里其实就是上面 toPredicate 返回的对象作为参数传入<span class=\"hljs-keyword\">where</span>方法当中，所以里面就和上面的实现没有什么太大区别。<br>    query.<span class=\"hljs-keyword\">where</span>(<br>            cb.<span class=\"hljs-keyword\">or</span>(<br>                    cb.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.title), &quot;%&quot; + q + &quot;%&quot;),<br>                    cb.<span class=\"hljs-keyword\">like</span>(root.<span class=\"hljs-keyword\">get</span>(Post_.content), &quot;%&quot; + q + &quot;%&quot;)<br>            )<br>    );<br>&#125;<br>//<span class=\"hljs-keyword\">perform</span> query<br><span class=\"hljs-keyword\">return</span> this.entityManager.createQuery(query)<br>        .setFirstResult(<span class=\"hljs-keyword\">offset</span>)<br>        .setMaxResults(<span class=\"hljs-keyword\">limit</span>)<br>        .getResultList();<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>EntityManager<br>  实体管理类，用于与持久化上下文进行互动，核心类。</li>\n</ul>\n<p>其他几个 Root、CriteriaQuery、CriteriaBuilder 作用同上，毕竟spring只是做了封装。<br>看完上面代码，大致就能够了解清楚这几个类分别是怎么使用的了，总体来说其实比上面spring的实现所接触到的东西更加全面一些，也能够理解这几个类互相是怎么作用的了。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java\">helidon-sample</a> @ <a href=\"https://github.com/hantsy\">hantsy</a></p>"},{"title":"学习JPA笔记——使用MetaModel实现Typesafe","date":"2020-10-05T23:25:51.000Z","comments":1,"index_img":"/gallery/learning-jpa-01.jpg","banner_img":"/gallery/learning-jpa-01.jpg","_content":"本篇主要说 Typesafe，下一篇讲一下 JPA 构建复杂查询。项目~~极简~~代码[在这](https://github.com/NatsuSai/spring-data-jpa-demo)\n<!--more-->\n> 封面：动画「ガーリー・エアフォース」#08的 EDCard，算是原作插画师[@遠坂あさぎ](https://twitter.com/asagi_0398)的贺图，每集一张。\n> 有趣的是因为最高机密的特性导致男主看到的样子和幼馴染一样，而此时他的幼馴染正生着气，所以标题叫不高兴的最高机密w\n\n最近看了[@hantsy](https://github.com/hantsy/helidon-sample)大大在V站的帖子（[这里](https://www.v2ex.com/t/688051#reply70)、[这里](https://www.v2ex.com/t/688051#reply70)），\n就开始心血来潮想要看看 JPA 怎么玩，另外就是大大所说的 Typesafe 要这么实现。\n\n> 注意：这里不会对JPA大多的基础知识进行说明，文章本意是做一次笔记，必要时请充分发挥自主能动性进行查找学习\n\n## Typesafe\n我的理解是不要那种无法编译时无法检验出错误或者 IDE 无法帮助我们检验错误的字符串，而这里比较突出的就是字段名。\n\n我司其实也是内部写了一套 [orm](https://github.com/tanqimin/MyFavsORM)，只是基本不在意 Typesafe，而更加注重方便直接编写复杂 sql 而已。\n\n而没有编译时的检测或者是 IDE 的检测，就难免出现 Typo，更加糟糕的是后期维护时的修改会造成一种我还有哪里用到了这个字段的尴尬状况，一旦遗漏就只能等运行时才可以检测出了。\n\n为了解决这一状况，我们可以用到 MetaModel 生成器，例如 Hibernate 就有相应的生成器`jpamodelgen`（这类 MetaModel 生成器是为了实现 JPA2.0 标准的，具体我没有细查）\n\n除了 Hibernate 以外，EclipseLink 也有这类生成器，各位可以自己去玩玩。我由于直接用 SpringDataJpa，而 spring 默认使用 Hibernate，所以就没有折腾别的了。\n\n### Getting Started\n下面是我整合了Lombok生成器的配置，仅供参考。也可以看看[这篇文章](https://docs.jboss.org/hibernate/stable/jpamodelgen/reference/en-US/html_single/)，有多种玩法。\n```xml\n<project>\n    ...\n    <dependencies>\n        ...\n        <dependency>\n          <groupId>org.hibernate</groupId>\n          <artifactId>hibernate-jpamodelgen</artifactId>\n          <version>5.4.21.Final</version>\n        </dependency>\n\n        <!-- 如果不是用SpringDataJpa的话，需要额外引入下面的依赖 -->\n        <dependency>\n          <groupId>jakarta.persistence</groupId>\n          <artifactId>jakarta.persistence-api</artifactId>\n          <version>2.2.3</version>\n        </dependency>\n    </dependencies>\n    ...\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>${lombok.version}</version>\n                        </path>\n                    </annotationProcessorPaths >\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.bsc.maven</groupId>\n                <artifactId>maven-processor-plugin</artifactId>\n                <version>4.3</version>\n                <executions>\n                    <execution>\n                        <id>process</id>\n                        <goals>\n                            <goal>process</goal>\n                        </goals>\n                        <phase>generate-sources</phase>\n                        <configuration>\n                            <processors>\n                                <processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>\n                            </processors>\n                        </configuration>\n                    </execution>\n                </executions>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.hibernate</groupId>\n                        <artifactId>hibernate-jpamodelgen</artifactId>\n                        <version>5.4.21.Final</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n添加完后，在实体类添加@Entity和@Id的注解使生成器生效，例如：\n```java\n@Entity\n@Data\npublic class Post implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    int id;\n    String title;\n    String content;\n    @Enumerated(EnumType.STRING)\n    Status status = Status.DRAFT;\n    LocalDateTime createdAt;\n    @Transient\n    String excludeColumn;\n\n    static enum Status{DRAFT, PUBLISHED}\n\n    public static Post of(String title, String content) {\n        Post post = new Post();\n        post.setCreatedAt(LocalDateTime.now());\n        post.setTitle(title);\n        post.setContent(content);\n\n        return post;\n    }\n}\n```\n添加完后对代码进行编译，生成器则会找到该注解的类生成这样的类：\n```java\n@Generated(value = \"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\")\n@StaticMetamodel(Post.class)\npublic abstract class Post_ {\n\n\tpublic static volatile SingularAttribute<Post, LocalDateTime> createdAt;\n\tpublic static volatile SingularAttribute<Post, Integer> id;\n\tpublic static volatile SingularAttribute<Post, String> title;\n\tpublic static volatile SingularAttribute<Post, String> content;\n\tpublic static volatile SingularAttribute<Post, Status> status;\n\n\tpublic static final String CREATED_AT = \"createdAt\";\n\tpublic static final String ID = \"id\";\n\tpublic static final String TITLE = \"title\";\n\tpublic static final String CONTENT = \"content\";\n\tpublic static final String STATUS = \"status\";\n\n}\n```\n而当我们运行程序时，SingularAttribute 类型的对象则会被自动赋值，之后在调用 JPA 的 API 时则可以作为参数传入，而不是传入字符串了。\n调用时看起来是这样子的：\n```\nrepository.findAll((Specification<Post>) (root, criteriaQuery, builder) -> builder.like(root.get(Post_.title), \"%Test%\"))\n```\n~~我说什么来着，不用字符串~~\n其实这里就不太需要追求这些，而字段这些是带关联性的，会在好多个地方出现，有必要对其进行检测。对于人类而言，检测总是会犯错，所以这些最好是交由机器来帮忙，也能够让我们更加关注业务。\n\n## Reference\n[helidon-sample](https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java) @ [hantsy](https://github.com/hantsy)\n[Hibernate JPA 2 Metamodel Generator](https://docs.jboss.org/hibernate/stable/jpamodelgen/reference/en-US/html_single/)\n","source":"_posts/learning-jpa-01.md","raw":"---\ntitle: 学习JPA笔记——使用MetaModel实现Typesafe\ndate: 2020-10-06 07:25:51\ncategories: \n    - 编程\ntags:\n    - Java\n    - ORM\n    - JPA\n    - Hibernate\ncomments: true\nindex_img: /gallery/learning-jpa-01.jpg\nbanner_img: /gallery/learning-jpa-01.jpg\n---\n本篇主要说 Typesafe，下一篇讲一下 JPA 构建复杂查询。项目~~极简~~代码[在这](https://github.com/NatsuSai/spring-data-jpa-demo)\n<!--more-->\n> 封面：动画「ガーリー・エアフォース」#08的 EDCard，算是原作插画师[@遠坂あさぎ](https://twitter.com/asagi_0398)的贺图，每集一张。\n> 有趣的是因为最高机密的特性导致男主看到的样子和幼馴染一样，而此时他的幼馴染正生着气，所以标题叫不高兴的最高机密w\n\n最近看了[@hantsy](https://github.com/hantsy/helidon-sample)大大在V站的帖子（[这里](https://www.v2ex.com/t/688051#reply70)、[这里](https://www.v2ex.com/t/688051#reply70)），\n就开始心血来潮想要看看 JPA 怎么玩，另外就是大大所说的 Typesafe 要这么实现。\n\n> 注意：这里不会对JPA大多的基础知识进行说明，文章本意是做一次笔记，必要时请充分发挥自主能动性进行查找学习\n\n## Typesafe\n我的理解是不要那种无法编译时无法检验出错误或者 IDE 无法帮助我们检验错误的字符串，而这里比较突出的就是字段名。\n\n我司其实也是内部写了一套 [orm](https://github.com/tanqimin/MyFavsORM)，只是基本不在意 Typesafe，而更加注重方便直接编写复杂 sql 而已。\n\n而没有编译时的检测或者是 IDE 的检测，就难免出现 Typo，更加糟糕的是后期维护时的修改会造成一种我还有哪里用到了这个字段的尴尬状况，一旦遗漏就只能等运行时才可以检测出了。\n\n为了解决这一状况，我们可以用到 MetaModel 生成器，例如 Hibernate 就有相应的生成器`jpamodelgen`（这类 MetaModel 生成器是为了实现 JPA2.0 标准的，具体我没有细查）\n\n除了 Hibernate 以外，EclipseLink 也有这类生成器，各位可以自己去玩玩。我由于直接用 SpringDataJpa，而 spring 默认使用 Hibernate，所以就没有折腾别的了。\n\n### Getting Started\n下面是我整合了Lombok生成器的配置，仅供参考。也可以看看[这篇文章](https://docs.jboss.org/hibernate/stable/jpamodelgen/reference/en-US/html_single/)，有多种玩法。\n```xml\n<project>\n    ...\n    <dependencies>\n        ...\n        <dependency>\n          <groupId>org.hibernate</groupId>\n          <artifactId>hibernate-jpamodelgen</artifactId>\n          <version>5.4.21.Final</version>\n        </dependency>\n\n        <!-- 如果不是用SpringDataJpa的话，需要额外引入下面的依赖 -->\n        <dependency>\n          <groupId>jakarta.persistence</groupId>\n          <artifactId>jakarta.persistence-api</artifactId>\n          <version>2.2.3</version>\n        </dependency>\n    </dependencies>\n    ...\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n            <plugin>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>${lombok.version}</version>\n                        </path>\n                    </annotationProcessorPaths >\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.bsc.maven</groupId>\n                <artifactId>maven-processor-plugin</artifactId>\n                <version>4.3</version>\n                <executions>\n                    <execution>\n                        <id>process</id>\n                        <goals>\n                            <goal>process</goal>\n                        </goals>\n                        <phase>generate-sources</phase>\n                        <configuration>\n                            <processors>\n                                <processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>\n                            </processors>\n                        </configuration>\n                    </execution>\n                </executions>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.hibernate</groupId>\n                        <artifactId>hibernate-jpamodelgen</artifactId>\n                        <version>5.4.21.Final</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n```\n添加完后，在实体类添加@Entity和@Id的注解使生成器生效，例如：\n```java\n@Entity\n@Data\npublic class Post implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    int id;\n    String title;\n    String content;\n    @Enumerated(EnumType.STRING)\n    Status status = Status.DRAFT;\n    LocalDateTime createdAt;\n    @Transient\n    String excludeColumn;\n\n    static enum Status{DRAFT, PUBLISHED}\n\n    public static Post of(String title, String content) {\n        Post post = new Post();\n        post.setCreatedAt(LocalDateTime.now());\n        post.setTitle(title);\n        post.setContent(content);\n\n        return post;\n    }\n}\n```\n添加完后对代码进行编译，生成器则会找到该注解的类生成这样的类：\n```java\n@Generated(value = \"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\")\n@StaticMetamodel(Post.class)\npublic abstract class Post_ {\n\n\tpublic static volatile SingularAttribute<Post, LocalDateTime> createdAt;\n\tpublic static volatile SingularAttribute<Post, Integer> id;\n\tpublic static volatile SingularAttribute<Post, String> title;\n\tpublic static volatile SingularAttribute<Post, String> content;\n\tpublic static volatile SingularAttribute<Post, Status> status;\n\n\tpublic static final String CREATED_AT = \"createdAt\";\n\tpublic static final String ID = \"id\";\n\tpublic static final String TITLE = \"title\";\n\tpublic static final String CONTENT = \"content\";\n\tpublic static final String STATUS = \"status\";\n\n}\n```\n而当我们运行程序时，SingularAttribute 类型的对象则会被自动赋值，之后在调用 JPA 的 API 时则可以作为参数传入，而不是传入字符串了。\n调用时看起来是这样子的：\n```\nrepository.findAll((Specification<Post>) (root, criteriaQuery, builder) -> builder.like(root.get(Post_.title), \"%Test%\"))\n```\n~~我说什么来着，不用字符串~~\n其实这里就不太需要追求这些，而字段这些是带关联性的，会在好多个地方出现，有必要对其进行检测。对于人类而言，检测总是会犯错，所以这些最好是交由机器来帮忙，也能够让我们更加关注业务。\n\n## Reference\n[helidon-sample](https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java) @ [hantsy](https://github.com/hantsy)\n[Hibernate JPA 2 Metamodel Generator](https://docs.jboss.org/hibernate/stable/jpamodelgen/reference/en-US/html_single/)\n","slug":"learning-jpa-01","published":1,"updated":"2021-08-25T02:47:24.846Z","layout":"post","photos":[],"_id":"clzh7x5wc000uq4qlh4gb15ui","content":"<p>本篇主要说 Typesafe，下一篇讲一下 JPA 构建复杂查询。项目<del>极简</del>代码<a href=\"https://github.com/NatsuSai/spring-data-jpa-demo\">在这</a></p>\n<span id=\"more\"></span>\n<blockquote>\n<p>封面：动画「ガーリー・エアフォース」#08的 EDCard，算是原作插画师<a href=\"https://twitter.com/asagi_0398\">@遠坂あさぎ</a>的贺图，每集一张。<br>有趣的是因为最高机密的特性导致男主看到的样子和幼馴染一样，而此时他的幼馴染正生着气，所以标题叫不高兴的最高机密w</p>\n</blockquote>\n<p>最近看了<a href=\"https://github.com/hantsy/helidon-sample\">@hantsy</a>大大在V站的帖子（<a href=\"https://www.v2ex.com/t/688051#reply70\">这里</a>、<a href=\"https://www.v2ex.com/t/688051#reply70\">这里</a>），<br>就开始心血来潮想要看看 JPA 怎么玩，另外就是大大所说的 Typesafe 要这么实现。</p>\n<blockquote>\n<p>注意：这里不会对JPA大多的基础知识进行说明，文章本意是做一次笔记，必要时请充分发挥自主能动性进行查找学习</p>\n</blockquote>\n<h2 id=\"Typesafe\"><a href=\"#Typesafe\" class=\"headerlink\" title=\"Typesafe\"></a>Typesafe</h2><p>我的理解是不要那种无法编译时无法检验出错误或者 IDE 无法帮助我们检验错误的字符串，而这里比较突出的就是字段名。</p>\n<p>我司其实也是内部写了一套 <a href=\"https://github.com/tanqimin/MyFavsORM\">orm</a>，只是基本不在意 Typesafe，而更加注重方便直接编写复杂 sql 而已。</p>\n<p>而没有编译时的检测或者是 IDE 的检测，就难免出现 Typo，更加糟糕的是后期维护时的修改会造成一种我还有哪里用到了这个字段的尴尬状况，一旦遗漏就只能等运行时才可以检测出了。</p>\n<p>为了解决这一状况，我们可以用到 MetaModel 生成器，例如 Hibernate 就有相应的生成器<code>jpamodelgen</code>（这类 MetaModel 生成器是为了实现 JPA2.0 标准的，具体我没有细查）</p>\n<p>除了 Hibernate 以外，EclipseLink 也有这类生成器，各位可以自己去玩玩。我由于直接用 SpringDataJpa，而 spring 默认使用 Hibernate，所以就没有折腾别的了。</p>\n<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><p>下面是我整合了Lombok生成器的配置，仅供参考。也可以看看<a href=\"https://docs.jboss.org/hibernate/stable/jpamodelgen/reference/en-US/html_single/\">这篇文章</a>，有多种玩法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span>&gt;</span><br>    ...<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        ...<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.hibernate<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hibernate-jpamodelgen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.4.21.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br>        <span class=\"hljs-comment\">&lt;!-- 如果不是用SpringDataJpa的话，需要额外引入下面的依赖 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>jakarta.persistence<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jakarta.persistence-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    ...<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">annotationProcessorPaths</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;lombok.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>                    &lt;/annotationProcessorPaths &gt;<br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.bsc.maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-processor-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>process<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>process<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>generate-sources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">processors</span>&gt;</span><br>                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">processor</span>&gt;</span>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">processor</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">processors</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.hibernate<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hibernate-jpamodelgen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.4.21.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>添加完后，在实体类添加@Entity和@Id的注解使生成器生效，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Entity</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Post</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br><br>    <span class=\"hljs-meta\">@Id</span><br>    <span class=\"hljs-meta\">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class=\"hljs-type\">int</span> id;<br>    String title;<br>    String content;<br>    <span class=\"hljs-meta\">@Enumerated(EnumType.STRING)</span><br>    <span class=\"hljs-type\">Status</span> <span class=\"hljs-variable\">status</span> <span class=\"hljs-operator\">=</span> Status.DRAFT;<br>    LocalDateTime createdAt;<br>    <span class=\"hljs-meta\">@Transient</span><br>    String excludeColumn;<br><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Status</span>&#123;DRAFT, PUBLISHED&#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Post <span class=\"hljs-title function_\">of</span><span class=\"hljs-params\">(String title, String content)</span> &#123;<br>        <span class=\"hljs-type\">Post</span> <span class=\"hljs-variable\">post</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Post</span>();<br>        post.setCreatedAt(LocalDateTime.now());<br>        post.setTitle(title);<br>        post.setContent(content);<br><br>        <span class=\"hljs-keyword\">return</span> post;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加完后对代码进行编译，生成器则会找到该注解的类生成这样的类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Generated(value = &quot;org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor&quot;)</span><br><span class=\"hljs-meta\">@StaticMetamodel(Post.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Post_</span> &#123;<br><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, LocalDateTime&gt; createdAt;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, Integer&gt; id;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, String&gt; title;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, String&gt; content;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, Status&gt; status;<br><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">CREATED_AT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;createdAt&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ID</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;id&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">TITLE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;title&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">CONTENT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;content&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">STATUS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;status&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>而当我们运行程序时，SingularAttribute 类型的对象则会被自动赋值，之后在调用 JPA 的 API 时则可以作为参数传入，而不是传入字符串了。<br>调用时看起来是这样子的：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">repository.findAll<span class=\"hljs-function\"><span class=\"hljs-params\">((Specification&lt;Post&gt;) (root, criteriaQuery, builder) -&gt; builder.like(root.get(Post_.title), <span class=\"hljs-string\">&quot;%Test%&quot;</span>))</span></span><br></code></pre></td></tr></table></figure>\n<p><del>我说什么来着，不用字符串</del><br>其实这里就不太需要追求这些，而字段这些是带关联性的，会在好多个地方出现，有必要对其进行检测。对于人类而言，检测总是会犯错，所以这些最好是交由机器来帮忙，也能够让我们更加关注业务。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java\">helidon-sample</a> @ <a href=\"https://github.com/hantsy\">hantsy</a><br><a href=\"https://docs.jboss.org/hibernate/stable/jpamodelgen/reference/en-US/html_single/\">Hibernate JPA 2 Metamodel Generator</a></p>\n","excerpt":"<p>本篇主要说 Typesafe，下一篇讲一下 JPA 构建复杂查询。项目<del>极简</del>代码<a href=\"https://github.com/NatsuSai/spring-data-jpa-demo\">在这</a></p>","more":"<blockquote>\n<p>封面：动画「ガーリー・エアフォース」#08的 EDCard，算是原作插画师<a href=\"https://twitter.com/asagi_0398\">@遠坂あさぎ</a>的贺图，每集一张。<br>有趣的是因为最高机密的特性导致男主看到的样子和幼馴染一样，而此时他的幼馴染正生着气，所以标题叫不高兴的最高机密w</p>\n</blockquote>\n<p>最近看了<a href=\"https://github.com/hantsy/helidon-sample\">@hantsy</a>大大在V站的帖子（<a href=\"https://www.v2ex.com/t/688051#reply70\">这里</a>、<a href=\"https://www.v2ex.com/t/688051#reply70\">这里</a>），<br>就开始心血来潮想要看看 JPA 怎么玩，另外就是大大所说的 Typesafe 要这么实现。</p>\n<blockquote>\n<p>注意：这里不会对JPA大多的基础知识进行说明，文章本意是做一次笔记，必要时请充分发挥自主能动性进行查找学习</p>\n</blockquote>\n<h2 id=\"Typesafe\"><a href=\"#Typesafe\" class=\"headerlink\" title=\"Typesafe\"></a>Typesafe</h2><p>我的理解是不要那种无法编译时无法检验出错误或者 IDE 无法帮助我们检验错误的字符串，而这里比较突出的就是字段名。</p>\n<p>我司其实也是内部写了一套 <a href=\"https://github.com/tanqimin/MyFavsORM\">orm</a>，只是基本不在意 Typesafe，而更加注重方便直接编写复杂 sql 而已。</p>\n<p>而没有编译时的检测或者是 IDE 的检测，就难免出现 Typo，更加糟糕的是后期维护时的修改会造成一种我还有哪里用到了这个字段的尴尬状况，一旦遗漏就只能等运行时才可以检测出了。</p>\n<p>为了解决这一状况，我们可以用到 MetaModel 生成器，例如 Hibernate 就有相应的生成器<code>jpamodelgen</code>（这类 MetaModel 生成器是为了实现 JPA2.0 标准的，具体我没有细查）</p>\n<p>除了 Hibernate 以外，EclipseLink 也有这类生成器，各位可以自己去玩玩。我由于直接用 SpringDataJpa，而 spring 默认使用 Hibernate，所以就没有折腾别的了。</p>\n<h3 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h3><p>下面是我整合了Lombok生成器的配置，仅供参考。也可以看看<a href=\"https://docs.jboss.org/hibernate/stable/jpamodelgen/reference/en-US/html_single/\">这篇文章</a>，有多种玩法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span>&gt;</span><br>    ...<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        ...<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.hibernate<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hibernate-jpamodelgen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.4.21.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br>        <span class=\"hljs-comment\">&lt;!-- 如果不是用SpringDataJpa的话，需要额外引入下面的依赖 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>jakarta.persistence<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jakarta.persistence-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    ...<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">annotationProcessorPaths</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;lombok.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span><br>                    &lt;/annotationProcessorPaths &gt;<br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.bsc.maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>maven-processor-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">executions</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">execution</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>process<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goals</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">goal</span>&gt;</span>process<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goal</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">goals</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">phase</span>&gt;</span>generate-sources<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">phase</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">processors</span>&gt;</span><br>                                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">processor</span>&gt;</span>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">processor</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">processors</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">execution</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">executions</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.hibernate<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hibernate-jpamodelgen<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.4.21.Final<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>添加完后，在实体类添加@Entity和@Id的注解使生成器生效，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Entity</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Post</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br><br>    <span class=\"hljs-meta\">@Id</span><br>    <span class=\"hljs-meta\">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class=\"hljs-type\">int</span> id;<br>    String title;<br>    String content;<br>    <span class=\"hljs-meta\">@Enumerated(EnumType.STRING)</span><br>    <span class=\"hljs-type\">Status</span> <span class=\"hljs-variable\">status</span> <span class=\"hljs-operator\">=</span> Status.DRAFT;<br>    LocalDateTime createdAt;<br>    <span class=\"hljs-meta\">@Transient</span><br>    String excludeColumn;<br><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Status</span>&#123;DRAFT, PUBLISHED&#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Post <span class=\"hljs-title function_\">of</span><span class=\"hljs-params\">(String title, String content)</span> &#123;<br>        <span class=\"hljs-type\">Post</span> <span class=\"hljs-variable\">post</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Post</span>();<br>        post.setCreatedAt(LocalDateTime.now());<br>        post.setTitle(title);<br>        post.setContent(content);<br><br>        <span class=\"hljs-keyword\">return</span> post;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加完后对代码进行编译，生成器则会找到该注解的类生成这样的类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Generated(value = &quot;org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor&quot;)</span><br><span class=\"hljs-meta\">@StaticMetamodel(Post.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Post_</span> &#123;<br><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, LocalDateTime&gt; createdAt;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, Integer&gt; id;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, String&gt; title;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, String&gt; content;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">volatile</span> SingularAttribute&lt;Post, Status&gt; status;<br><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">CREATED_AT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;createdAt&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ID</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;id&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">TITLE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;title&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">CONTENT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;content&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">STATUS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;status&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>而当我们运行程序时，SingularAttribute 类型的对象则会被自动赋值，之后在调用 JPA 的 API 时则可以作为参数传入，而不是传入字符串了。<br>调用时看起来是这样子的：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">repository.findAll<span class=\"hljs-function\"><span class=\"hljs-params\">((Specification&lt;Post&gt;) (root, criteriaQuery, builder) -&gt; builder.like(root.get(Post_.title), <span class=\"hljs-string\">&quot;%Test%&quot;</span>))</span></span><br></code></pre></td></tr></table></figure>\n<p><del>我说什么来着，不用字符串</del><br>其实这里就不太需要追求这些，而字段这些是带关联性的，会在好多个地方出现，有必要对其进行检测。对于人类而言，检测总是会犯错，所以这些最好是交由机器来帮忙，也能够让我们更加关注业务。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://github.com/hantsy/helidon-sample/blob/master/mp-jpa/src/main/java/com/example/PostRepository.java\">helidon-sample</a> @ <a href=\"https://github.com/hantsy\">hantsy</a><br><a href=\"https://docs.jboss.org/hibernate/stable/jpamodelgen/reference/en-US/html_single/\">Hibernate JPA 2 Metamodel Generator</a></p>"},{"title":"Over the wall","date":"2020-12-06T17:48:13.000Z","index_img":"/gallery/Lain.JPG","banner_img":"/gallery/Lain.JPG","comments":0,"_content":"I will record here some information or opinions that I believe.   \nEverything is selected based on my subjective judgment.\n<!--more-->\n> 封面 我的头像出处，《Lian》当中的女主铃音，头像以及本封面都是碟子附赠的图片。片子非常意识流，那种感觉就像第一次看 eva 一样，有点跟不上节奏，或者说觉得非常混沌。\n---\n[Link](https://www.v2ex.com/t/689630?p=1#r_9241365)\n> 首先，把移民和工作分开：很多人移民了还是要辛苦工作  \n> 其次，把移民和 “改变命运” 这件事分开：很多人移民了并没有太大的改命  \n> 然后，把移民和与众不同这件事分开：很多比你条件差的人也成功了  \n> 然后，把移民和鹤立鸡群这件事分开：即使你移民成功了别人也未必羡慕  \n> 然后，把移民和生活中任何一件事联系起来：它就像任何一次部门间的工作调动一样平常，组织捞人 捞到你了，组织说让你去海外你就去了，就完事了（和你的个人素质并无关系：比你的英文水平好很多的人，其实也没移民；比你 IT 能力再高的人，其实也没移民；怎么就论到你移民了呢？是的，就是轮到你了。）\n> \n> 并不高不可攀，甚至就像喝水\n> \n> 然后，你会发现 V2EX 其实并不是一个特别适合讨论移民这件事的 BBS，尤其是在增强移民信心和让移民可行性落地的方面：盖因它无法像讨论一件普普通通的事情一样讨论移民，它没这心胸。\n\n[Link](https://www.v2ex.com/t/731552?p=2#r_9874141)\n> 不想反驳一些人的观点，毕竟每个人都有表达自己观点的权利。\n> \n> 但是，作为一个个体，你需要明确：\n> \n> 1 、你的一辈子很短，你必须优先考虑眼前的幸福，而不是未来潜在的幸福。比如，我承认中国在改善、在发展，但是在可见的未来几十年，许多问题依然不会得到解决（ e.g.建立独立的司法体系、健全对弱势群体的保护）。这是一个价值观选择题：你选择去伟大地建设这个国家，还是优先保护自己和家人？很遗憾，我比较自私，我也不是伟人，我选择短期内更能保护我个人利益（ e.g.有健全的劳动法、有工会、可以自由访问互联网并且自由交流思想）的地方。\n> \n> 2 、国家是一个政治概念，是一个“协议”、“合同”，而不是一种与生俱来的强加于个体的道德义务。有兴趣的可以参考这里的讨论： https://www.zhihu.com/question/48440859 。所以，不要被这种政治概念和集体思想绑架，否则你就是韭菜——或者你是站在有资源的那一边，可以利用这个概念去绑架别人、割别人韭菜。\n> \n> 3 、移民与否，取决于你在哪里更有优势、能活得更好。我认识的大部分回国的同学，都是在国内非富即贵的。我想了想，似乎非常合理：因为他们回去可以轻而易举地活得很好甚至随意割别人韭菜。如果你也是有本事割别人韭菜的，那就留在国内，毕竟国内机会比较多。但是如果你不属于这种，那么就想想你最在乎什么（ e.g.钱？健康？生活丰富度？稳定性？冒险刺激？相对公平的允许你靠自身努力上升的发展平台？）、如果去国外你是不是可以活得更开心（ e.g.哪些地方可以提供你在乎的这些东西）？\n> \n> 没有一个国家是完美的，日韩、欧洲、美国、新加坡都有各自的问题（日韩-经济并不是很好、并不是未来的主流市场、发展上限较低；欧洲-经济也不是特别好，除了德国英国稍微好点；美国-在太平洋两岸两位书记的联手协作下，民粹主义盛行；新加坡-主要产业为金融服务业，没有太多 tech 行业的机会）。如果你想追求刺激、追求暴富，那么可能中国更适合你。\n> \n> 但是国内也有国内的问题——e.g.摘取 11 例器官判 2 年 4 个月，写小黄书判 10 年半； 996 是常态；弱势群体随时有可能被“集体”绑架和以“维护集体利益”的名义牺牲。坦白说，中国虽然近年经济发展迅速，但是在对国民个体的保护上与西方国家还差着一整个“文艺复兴”（西方所有价值观的基础——“以人为本、破除神权”）。如果你觉得自己是一个弱势群体，那么可能中国对你来说就是 hard 模式。\n> \n> 最后，再次非常诚恳地建议很多和我一样的“弱势群体”，不要被别人割了韭菜，还帮着人家吆喝。保护好自己和家人、健康快乐地过好自己短暂的一生，这才是最重要的、这也是作为一个人的基本天性和权利—— [身为韭菜，不要自己给自己画饼] 。\n\n[Link](https://www.v2ex.com/t/731552?p=2#r_9874150) \n> 另外关于移民途径，似乎现在还是挺多的——人口减少是许多发达国家面临的巨大挑战，所以只要你年轻还是有很多机会的。全球发达国家中似乎只有美国是移民非常难的。\n> \n> 1 、加拿大——读书、拿工作签、枫叶卡；甚至如果不去加拿大读书和工作也可以直接申请枫叶卡，只要你打分足够——年纪轻加分、高学历加分、工作经验加分（自行搜索加拿大移民 Express Entry 打分系统）；  \n> 2 、新加坡——只要能找到工作就能申请到工作签和之后申请绿卡，没有名额限制。位于新加坡的 tech 公司虽然不多，但还是有几家，之前在 v 站也看到过相关的招人贴，请自行搜索；  \n> 3 、欧洲——只要能找到工作，就能申请到工作签并且之后申请绿卡，无名额限制。但是直接找欧洲工作比较难找，因为欧洲人自己找工作本身就比较难了（尤其是英国，暂且还是把英国算在欧洲吧 lol ）。加入国际公司再申请内部 relocation 的思路比较有实操意义，前提是你能说服老板为什么要 relocate 。要么就还是读书、工作签、申请绿卡，也不是很难。  \n> 4 、美国——除非能直接找到工作并且申请到 H1B，或者加入在华美国公司一年后以 L1 签证调来美国；要么就是读书、找工作、申请 H1B 、申请绿卡；要么就是投资移民、结婚移民等途径了。  \n> 5 、日韩——不清楚，按理说也不会很难。  \n> \n> 途径还是一直有的，就看你愿不愿意冒险和花成本了。经济上，我之前也见过许多国际学生贷款来读书的——可能国内觉得不可思议，但是美国挺常见的，如果你读 MBA 或者 JD 或者 STEM 这种未来赚钱能力强的学位，无需美国人担保即可贷款，请自行搜索 Prodigy Finance 。学校申请上，你如果是为了找工作，未必一定要申请顶尖名校，找工作够用就行。\n> \n> 所以，加油！","source":"_posts/over-the-wall.md","raw":"---\ntitle: Over the wall\ndate: 2020-12-07 01:48:13\nindex_img: /gallery/Lain.JPG\nbanner_img: /gallery/Lain.JPG\ncomments: false\n---\nI will record here some information or opinions that I believe.   \nEverything is selected based on my subjective judgment.\n<!--more-->\n> 封面 我的头像出处，《Lian》当中的女主铃音，头像以及本封面都是碟子附赠的图片。片子非常意识流，那种感觉就像第一次看 eva 一样，有点跟不上节奏，或者说觉得非常混沌。\n---\n[Link](https://www.v2ex.com/t/689630?p=1#r_9241365)\n> 首先，把移民和工作分开：很多人移民了还是要辛苦工作  \n> 其次，把移民和 “改变命运” 这件事分开：很多人移民了并没有太大的改命  \n> 然后，把移民和与众不同这件事分开：很多比你条件差的人也成功了  \n> 然后，把移民和鹤立鸡群这件事分开：即使你移民成功了别人也未必羡慕  \n> 然后，把移民和生活中任何一件事联系起来：它就像任何一次部门间的工作调动一样平常，组织捞人 捞到你了，组织说让你去海外你就去了，就完事了（和你的个人素质并无关系：比你的英文水平好很多的人，其实也没移民；比你 IT 能力再高的人，其实也没移民；怎么就论到你移民了呢？是的，就是轮到你了。）\n> \n> 并不高不可攀，甚至就像喝水\n> \n> 然后，你会发现 V2EX 其实并不是一个特别适合讨论移民这件事的 BBS，尤其是在增强移民信心和让移民可行性落地的方面：盖因它无法像讨论一件普普通通的事情一样讨论移民，它没这心胸。\n\n[Link](https://www.v2ex.com/t/731552?p=2#r_9874141)\n> 不想反驳一些人的观点，毕竟每个人都有表达自己观点的权利。\n> \n> 但是，作为一个个体，你需要明确：\n> \n> 1 、你的一辈子很短，你必须优先考虑眼前的幸福，而不是未来潜在的幸福。比如，我承认中国在改善、在发展，但是在可见的未来几十年，许多问题依然不会得到解决（ e.g.建立独立的司法体系、健全对弱势群体的保护）。这是一个价值观选择题：你选择去伟大地建设这个国家，还是优先保护自己和家人？很遗憾，我比较自私，我也不是伟人，我选择短期内更能保护我个人利益（ e.g.有健全的劳动法、有工会、可以自由访问互联网并且自由交流思想）的地方。\n> \n> 2 、国家是一个政治概念，是一个“协议”、“合同”，而不是一种与生俱来的强加于个体的道德义务。有兴趣的可以参考这里的讨论： https://www.zhihu.com/question/48440859 。所以，不要被这种政治概念和集体思想绑架，否则你就是韭菜——或者你是站在有资源的那一边，可以利用这个概念去绑架别人、割别人韭菜。\n> \n> 3 、移民与否，取决于你在哪里更有优势、能活得更好。我认识的大部分回国的同学，都是在国内非富即贵的。我想了想，似乎非常合理：因为他们回去可以轻而易举地活得很好甚至随意割别人韭菜。如果你也是有本事割别人韭菜的，那就留在国内，毕竟国内机会比较多。但是如果你不属于这种，那么就想想你最在乎什么（ e.g.钱？健康？生活丰富度？稳定性？冒险刺激？相对公平的允许你靠自身努力上升的发展平台？）、如果去国外你是不是可以活得更开心（ e.g.哪些地方可以提供你在乎的这些东西）？\n> \n> 没有一个国家是完美的，日韩、欧洲、美国、新加坡都有各自的问题（日韩-经济并不是很好、并不是未来的主流市场、发展上限较低；欧洲-经济也不是特别好，除了德国英国稍微好点；美国-在太平洋两岸两位书记的联手协作下，民粹主义盛行；新加坡-主要产业为金融服务业，没有太多 tech 行业的机会）。如果你想追求刺激、追求暴富，那么可能中国更适合你。\n> \n> 但是国内也有国内的问题——e.g.摘取 11 例器官判 2 年 4 个月，写小黄书判 10 年半； 996 是常态；弱势群体随时有可能被“集体”绑架和以“维护集体利益”的名义牺牲。坦白说，中国虽然近年经济发展迅速，但是在对国民个体的保护上与西方国家还差着一整个“文艺复兴”（西方所有价值观的基础——“以人为本、破除神权”）。如果你觉得自己是一个弱势群体，那么可能中国对你来说就是 hard 模式。\n> \n> 最后，再次非常诚恳地建议很多和我一样的“弱势群体”，不要被别人割了韭菜，还帮着人家吆喝。保护好自己和家人、健康快乐地过好自己短暂的一生，这才是最重要的、这也是作为一个人的基本天性和权利—— [身为韭菜，不要自己给自己画饼] 。\n\n[Link](https://www.v2ex.com/t/731552?p=2#r_9874150) \n> 另外关于移民途径，似乎现在还是挺多的——人口减少是许多发达国家面临的巨大挑战，所以只要你年轻还是有很多机会的。全球发达国家中似乎只有美国是移民非常难的。\n> \n> 1 、加拿大——读书、拿工作签、枫叶卡；甚至如果不去加拿大读书和工作也可以直接申请枫叶卡，只要你打分足够——年纪轻加分、高学历加分、工作经验加分（自行搜索加拿大移民 Express Entry 打分系统）；  \n> 2 、新加坡——只要能找到工作就能申请到工作签和之后申请绿卡，没有名额限制。位于新加坡的 tech 公司虽然不多，但还是有几家，之前在 v 站也看到过相关的招人贴，请自行搜索；  \n> 3 、欧洲——只要能找到工作，就能申请到工作签并且之后申请绿卡，无名额限制。但是直接找欧洲工作比较难找，因为欧洲人自己找工作本身就比较难了（尤其是英国，暂且还是把英国算在欧洲吧 lol ）。加入国际公司再申请内部 relocation 的思路比较有实操意义，前提是你能说服老板为什么要 relocate 。要么就还是读书、工作签、申请绿卡，也不是很难。  \n> 4 、美国——除非能直接找到工作并且申请到 H1B，或者加入在华美国公司一年后以 L1 签证调来美国；要么就是读书、找工作、申请 H1B 、申请绿卡；要么就是投资移民、结婚移民等途径了。  \n> 5 、日韩——不清楚，按理说也不会很难。  \n> \n> 途径还是一直有的，就看你愿不愿意冒险和花成本了。经济上，我之前也见过许多国际学生贷款来读书的——可能国内觉得不可思议，但是美国挺常见的，如果你读 MBA 或者 JD 或者 STEM 这种未来赚钱能力强的学位，无需美国人担保即可贷款，请自行搜索 Prodigy Finance 。学校申请上，你如果是为了找工作，未必一定要申请顶尖名校，找工作够用就行。\n> \n> 所以，加油！","slug":"over-the-wall","published":1,"updated":"2021-03-24T09:34:58.791Z","layout":"post","photos":[],"_id":"clzh7x5wc000yq4ql7iiw971b","content":"<p>I will record here some information or opinions that I believe.<br>Everything is selected based on my subjective judgment.</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>封面 我的头像出处，《Lian》当中的女主铃音，头像以及本封面都是碟子附赠的图片。片子非常意识流，那种感觉就像第一次看 eva 一样，有点跟不上节奏，或者说觉得非常混沌。</p>\n</blockquote>\n<hr>\n<p><a href=\"https://www.v2ex.com/t/689630?p=1#r_9241365\">Link</a></p>\n<blockquote>\n<p>首先，把移民和工作分开：很多人移民了还是要辛苦工作<br>其次，把移民和 “改变命运” 这件事分开：很多人移民了并没有太大的改命<br>然后，把移民和与众不同这件事分开：很多比你条件差的人也成功了<br>然后，把移民和鹤立鸡群这件事分开：即使你移民成功了别人也未必羡慕<br>然后，把移民和生活中任何一件事联系起来：它就像任何一次部门间的工作调动一样平常，组织捞人 捞到你了，组织说让你去海外你就去了，就完事了（和你的个人素质并无关系：比你的英文水平好很多的人，其实也没移民；比你 IT 能力再高的人，其实也没移民；怎么就论到你移民了呢？是的，就是轮到你了。）</p>\n<p>并不高不可攀，甚至就像喝水</p>\n<p>然后，你会发现 V2EX 其实并不是一个特别适合讨论移民这件事的 BBS，尤其是在增强移民信心和让移民可行性落地的方面：盖因它无法像讨论一件普普通通的事情一样讨论移民，它没这心胸。</p>\n</blockquote>\n<p><a href=\"https://www.v2ex.com/t/731552?p=2#r_9874141\">Link</a></p>\n<blockquote>\n<p>不想反驳一些人的观点，毕竟每个人都有表达自己观点的权利。</p>\n<p>但是，作为一个个体，你需要明确：</p>\n<p>1 、你的一辈子很短，你必须优先考虑眼前的幸福，而不是未来潜在的幸福。比如，我承认中国在改善、在发展，但是在可见的未来几十年，许多问题依然不会得到解决（ e.g.建立独立的司法体系、健全对弱势群体的保护）。这是一个价值观选择题：你选择去伟大地建设这个国家，还是优先保护自己和家人？很遗憾，我比较自私，我也不是伟人，我选择短期内更能保护我个人利益（ e.g.有健全的劳动法、有工会、可以自由访问互联网并且自由交流思想）的地方。</p>\n<p>2 、国家是一个政治概念，是一个“协议”、“合同”，而不是一种与生俱来的强加于个体的道德义务。有兴趣的可以参考这里的讨论： <a href=\"https://www.zhihu.com/question/48440859\">https://www.zhihu.com/question/48440859</a> 。所以，不要被这种政治概念和集体思想绑架，否则你就是韭菜——或者你是站在有资源的那一边，可以利用这个概念去绑架别人、割别人韭菜。</p>\n<p>3 、移民与否，取决于你在哪里更有优势、能活得更好。我认识的大部分回国的同学，都是在国内非富即贵的。我想了想，似乎非常合理：因为他们回去可以轻而易举地活得很好甚至随意割别人韭菜。如果你也是有本事割别人韭菜的，那就留在国内，毕竟国内机会比较多。但是如果你不属于这种，那么就想想你最在乎什么（ e.g.钱？健康？生活丰富度？稳定性？冒险刺激？相对公平的允许你靠自身努力上升的发展平台？）、如果去国外你是不是可以活得更开心（ e.g.哪些地方可以提供你在乎的这些东西）？</p>\n<p>没有一个国家是完美的，日韩、欧洲、美国、新加坡都有各自的问题（日韩-经济并不是很好、并不是未来的主流市场、发展上限较低；欧洲-经济也不是特别好，除了德国英国稍微好点；美国-在太平洋两岸两位书记的联手协作下，民粹主义盛行；新加坡-主要产业为金融服务业，没有太多 tech 行业的机会）。如果你想追求刺激、追求暴富，那么可能中国更适合你。</p>\n<p>但是国内也有国内的问题——e.g.摘取 11 例器官判 2 年 4 个月，写小黄书判 10 年半； 996 是常态；弱势群体随时有可能被“集体”绑架和以“维护集体利益”的名义牺牲。坦白说，中国虽然近年经济发展迅速，但是在对国民个体的保护上与西方国家还差着一整个“文艺复兴”（西方所有价值观的基础——“以人为本、破除神权”）。如果你觉得自己是一个弱势群体，那么可能中国对你来说就是 hard 模式。</p>\n<p>最后，再次非常诚恳地建议很多和我一样的“弱势群体”，不要被别人割了韭菜，还帮着人家吆喝。保护好自己和家人、健康快乐地过好自己短暂的一生，这才是最重要的、这也是作为一个人的基本天性和权利—— [身为韭菜，不要自己给自己画饼] 。</p>\n</blockquote>\n<p><a href=\"https://www.v2ex.com/t/731552?p=2#r_9874150\">Link</a> </p>\n<blockquote>\n<p>另外关于移民途径，似乎现在还是挺多的——人口减少是许多发达国家面临的巨大挑战，所以只要你年轻还是有很多机会的。全球发达国家中似乎只有美国是移民非常难的。</p>\n<p>1 、加拿大——读书、拿工作签、枫叶卡；甚至如果不去加拿大读书和工作也可以直接申请枫叶卡，只要你打分足够——年纪轻加分、高学历加分、工作经验加分（自行搜索加拿大移民 Express Entry 打分系统）；<br>2 、新加坡——只要能找到工作就能申请到工作签和之后申请绿卡，没有名额限制。位于新加坡的 tech 公司虽然不多，但还是有几家，之前在 v 站也看到过相关的招人贴，请自行搜索；<br>3 、欧洲——只要能找到工作，就能申请到工作签并且之后申请绿卡，无名额限制。但是直接找欧洲工作比较难找，因为欧洲人自己找工作本身就比较难了（尤其是英国，暂且还是把英国算在欧洲吧 lol ）。加入国际公司再申请内部 relocation 的思路比较有实操意义，前提是你能说服老板为什么要 relocate 。要么就还是读书、工作签、申请绿卡，也不是很难。<br>4 、美国——除非能直接找到工作并且申请到 H1B，或者加入在华美国公司一年后以 L1 签证调来美国；要么就是读书、找工作、申请 H1B 、申请绿卡；要么就是投资移民、结婚移民等途径了。<br>5 、日韩——不清楚，按理说也不会很难。  </p>\n<p>途径还是一直有的，就看你愿不愿意冒险和花成本了。经济上，我之前也见过许多国际学生贷款来读书的——可能国内觉得不可思议，但是美国挺常见的，如果你读 MBA 或者 JD 或者 STEM 这种未来赚钱能力强的学位，无需美国人担保即可贷款，请自行搜索 Prodigy Finance 。学校申请上，你如果是为了找工作，未必一定要申请顶尖名校，找工作够用就行。</p>\n<p>所以，加油！</p>\n</blockquote>\n","excerpt":"<p>I will record here some information or opinions that I believe.<br>Everything is selected based on my subjective judgment.</p>","more":"<blockquote>\n<p>封面 我的头像出处，《Lian》当中的女主铃音，头像以及本封面都是碟子附赠的图片。片子非常意识流，那种感觉就像第一次看 eva 一样，有点跟不上节奏，或者说觉得非常混沌。</p>\n</blockquote>\n<hr>\n<p><a href=\"https://www.v2ex.com/t/689630?p=1#r_9241365\">Link</a></p>\n<blockquote>\n<p>首先，把移民和工作分开：很多人移民了还是要辛苦工作<br>其次，把移民和 “改变命运” 这件事分开：很多人移民了并没有太大的改命<br>然后，把移民和与众不同这件事分开：很多比你条件差的人也成功了<br>然后，把移民和鹤立鸡群这件事分开：即使你移民成功了别人也未必羡慕<br>然后，把移民和生活中任何一件事联系起来：它就像任何一次部门间的工作调动一样平常，组织捞人 捞到你了，组织说让你去海外你就去了，就完事了（和你的个人素质并无关系：比你的英文水平好很多的人，其实也没移民；比你 IT 能力再高的人，其实也没移民；怎么就论到你移民了呢？是的，就是轮到你了。）</p>\n<p>并不高不可攀，甚至就像喝水</p>\n<p>然后，你会发现 V2EX 其实并不是一个特别适合讨论移民这件事的 BBS，尤其是在增强移民信心和让移民可行性落地的方面：盖因它无法像讨论一件普普通通的事情一样讨论移民，它没这心胸。</p>\n</blockquote>\n<p><a href=\"https://www.v2ex.com/t/731552?p=2#r_9874141\">Link</a></p>\n<blockquote>\n<p>不想反驳一些人的观点，毕竟每个人都有表达自己观点的权利。</p>\n<p>但是，作为一个个体，你需要明确：</p>\n<p>1 、你的一辈子很短，你必须优先考虑眼前的幸福，而不是未来潜在的幸福。比如，我承认中国在改善、在发展，但是在可见的未来几十年，许多问题依然不会得到解决（ e.g.建立独立的司法体系、健全对弱势群体的保护）。这是一个价值观选择题：你选择去伟大地建设这个国家，还是优先保护自己和家人？很遗憾，我比较自私，我也不是伟人，我选择短期内更能保护我个人利益（ e.g.有健全的劳动法、有工会、可以自由访问互联网并且自由交流思想）的地方。</p>\n<p>2 、国家是一个政治概念，是一个“协议”、“合同”，而不是一种与生俱来的强加于个体的道德义务。有兴趣的可以参考这里的讨论： <a href=\"https://www.zhihu.com/question/48440859\">https://www.zhihu.com/question/48440859</a> 。所以，不要被这种政治概念和集体思想绑架，否则你就是韭菜——或者你是站在有资源的那一边，可以利用这个概念去绑架别人、割别人韭菜。</p>\n<p>3 、移民与否，取决于你在哪里更有优势、能活得更好。我认识的大部分回国的同学，都是在国内非富即贵的。我想了想，似乎非常合理：因为他们回去可以轻而易举地活得很好甚至随意割别人韭菜。如果你也是有本事割别人韭菜的，那就留在国内，毕竟国内机会比较多。但是如果你不属于这种，那么就想想你最在乎什么（ e.g.钱？健康？生活丰富度？稳定性？冒险刺激？相对公平的允许你靠自身努力上升的发展平台？）、如果去国外你是不是可以活得更开心（ e.g.哪些地方可以提供你在乎的这些东西）？</p>\n<p>没有一个国家是完美的，日韩、欧洲、美国、新加坡都有各自的问题（日韩-经济并不是很好、并不是未来的主流市场、发展上限较低；欧洲-经济也不是特别好，除了德国英国稍微好点；美国-在太平洋两岸两位书记的联手协作下，民粹主义盛行；新加坡-主要产业为金融服务业，没有太多 tech 行业的机会）。如果你想追求刺激、追求暴富，那么可能中国更适合你。</p>\n<p>但是国内也有国内的问题——e.g.摘取 11 例器官判 2 年 4 个月，写小黄书判 10 年半； 996 是常态；弱势群体随时有可能被“集体”绑架和以“维护集体利益”的名义牺牲。坦白说，中国虽然近年经济发展迅速，但是在对国民个体的保护上与西方国家还差着一整个“文艺复兴”（西方所有价值观的基础——“以人为本、破除神权”）。如果你觉得自己是一个弱势群体，那么可能中国对你来说就是 hard 模式。</p>\n<p>最后，再次非常诚恳地建议很多和我一样的“弱势群体”，不要被别人割了韭菜，还帮着人家吆喝。保护好自己和家人、健康快乐地过好自己短暂的一生，这才是最重要的、这也是作为一个人的基本天性和权利—— [身为韭菜，不要自己给自己画饼] 。</p>\n</blockquote>\n<p><a href=\"https://www.v2ex.com/t/731552?p=2#r_9874150\">Link</a> </p>\n<blockquote>\n<p>另外关于移民途径，似乎现在还是挺多的——人口减少是许多发达国家面临的巨大挑战，所以只要你年轻还是有很多机会的。全球发达国家中似乎只有美国是移民非常难的。</p>\n<p>1 、加拿大——读书、拿工作签、枫叶卡；甚至如果不去加拿大读书和工作也可以直接申请枫叶卡，只要你打分足够——年纪轻加分、高学历加分、工作经验加分（自行搜索加拿大移民 Express Entry 打分系统）；<br>2 、新加坡——只要能找到工作就能申请到工作签和之后申请绿卡，没有名额限制。位于新加坡的 tech 公司虽然不多，但还是有几家，之前在 v 站也看到过相关的招人贴，请自行搜索；<br>3 、欧洲——只要能找到工作，就能申请到工作签并且之后申请绿卡，无名额限制。但是直接找欧洲工作比较难找，因为欧洲人自己找工作本身就比较难了（尤其是英国，暂且还是把英国算在欧洲吧 lol ）。加入国际公司再申请内部 relocation 的思路比较有实操意义，前提是你能说服老板为什么要 relocate 。要么就还是读书、工作签、申请绿卡，也不是很难。<br>4 、美国——除非能直接找到工作并且申请到 H1B，或者加入在华美国公司一年后以 L1 签证调来美国；要么就是读书、找工作、申请 H1B 、申请绿卡；要么就是投资移民、结婚移民等途径了。<br>5 、日韩——不清楚，按理说也不会很难。  </p>\n<p>途径还是一直有的，就看你愿不愿意冒险和花成本了。经济上，我之前也见过许多国际学生贷款来读书的——可能国内觉得不可思议，但是美国挺常见的，如果你读 MBA 或者 JD 或者 STEM 这种未来赚钱能力强的学位，无需美国人担保即可贷款，请自行搜索 Prodigy Finance 。学校申请上，你如果是为了找工作，未必一定要申请顶尖名校，找工作够用就行。</p>\n<p>所以，加油！</p>\n</blockquote>"},{"title":"Redis笔记01","date":"2021-03-24T01:18:07.000Z","hide":false,"comments":1,"index_img":"/gallery/machi.png","banner_img":"/gallery/machi.png","_content":"使用Redis时有时候会碰上一些并发的问题，这里来说一下分布式锁以及加锁超时等问题。\n<!--more-->\n> 封面  \n> 一天在某神社（？）看到的。非常向往这种中世纪风格，可能是因为《狼与香辛料》或者大多那种\n> 剑与魔法的世界，都在这样的时代吧，让我觉得特别浪漫。\n### 0x00\n一般情况下，会对那些变化不大但是访问量比较大的请求做缓存处理，但缓存会在某个时刻失效，\n此时就会有大量的请求涌向数据库从而容易引发雪崩效果。\n### 0x01\n为了避免雪崩，我们可以在更新缓存的代码块（即访问数据库）中加入分布式锁，只能够让一个线程去做缓存更新:\n```\nif (redis.setIfAbsent(lock, 1)) { \n    // 更新缓存逻辑\n    redis.del(lock);\n}\n```\n但是上面如果更新逻辑出现卡死现象就会造成死锁，所以我们还需要给锁设置超时时间，\n但是设置超时时间一般的工具例如spring的RedisTemplate是没有把检查存在并设置值和设置超时时间\n作为一个请求发送的，则无法保证是原子操作，这样也会发生在设置超时时间的时候没有成功导致死锁。  \n\n由于redis新版本支持了setNX和EX复合指令的原子操作（即判断存在和设置超时时间），\n所以我们可以去扩展RedisTemplate或者当前使用的工具类；另一种方法则是用lua脚本，执行lua脚本也是一次原子操作。\n> redis在4.0之前整体都是单线程的，4.0后开始加入多线程，但也仅是部分操作，\n> 所以就算非复合指令也可以通过一个请求发送多个指令的方式来达成原子操作的目的。\n```\nif (redis.setAndExpireIfAbsent(lock, 1, 10000)) { \n    // 更新缓存逻辑\n    redis.del(lock);\n}\n```\n> 注意   \n> redis 2.6.12 之前，set返回永远为ok，之后则设置成功时返回ok，\n> 加入条件参数不成立则返回空\n### 0x02\n但我们可能还会发现另一个问题，更新逻辑太久了超过了超时时间，此时锁已经被解除了，\n这就会执行导致途中另一个线程获取到了锁，导致后面删除的时候是删除的另一个线程加的锁。  \n\n所以我们需要引入一个随机id，作为当前线程加锁的标识，若后面发现不是相同id则不做删除。\n```\nlong random = SnowFlakeGenerator.getInstant().nextId();\nif (redis.setAndExpireIfAbsent(lock, random, 10000)) { \n    // 更新缓存逻辑\n    if (redis.get(lock) == random) {\n        redis.del(lock);\n    }\n}\n```\nOk，到了这里你可能也发现了，这个删除是不是也要做原子操作比较好点(  \n没错...  \n若是不做原子操作，那可能就会虽然拿到锁的值能够匹配上，但是下一个瞬间就因为超时而被别的其他线程获取到锁\n从而又引发了上面的问题，删错了别的线程的锁。\n### 0x03\n类似的由于超时导致的问题还有一些情况就是计数器\n```\nsynchronized (LOCK) { //只是为了排除多线程情况，这里只想讨论超时问题，实际情况还要具体分析\n    if(redis.exists(userId)) {\n        redis.incr();\n        if (redis.get(userId) > maxAllowedTimes) {\n            return false;\n        }\n        return true;\n    } else {\n        redis.set(userId, 1);\n        redis.setExpire(60000);\n        return ture;\n    }\n}\n```\n上面是一段限制用户一分钟内可访问次数的redis计数器。  \n这里面如果判断到存在后的下一个瞬间恰好超时，此时incr方法在redis的行为就是先创建并设置值为0，然后加1，\n而没有设置过期时间。导致后面永远被限制访问。  \n```\nsynchronized (LOCK) {\n \n    if(redis.exists(userId)) {\n        long count = (long) redis.incr(userId);\n        \n        if(redis.ttl(userId) == -1) {\n            redis.setExpire(60000);\n        }\n        if (count > maxAllowedTimes) {\n            return false;\n        }\n        return true;\n    } else {\n        redis.setEx(userId, 60000, 1);//设置1并设置超时时间60000\n        return ture;\n    }\n}\n```\n> ttl  \n> -2 表示key不存在  \n> -1 表示key存在但是没有过期时间  \n\n另外一种解决办法就是取当前时间(或者是减去某个时间后)的秒数，然后再去除以60(时间周期)，\n这样就能够获的一个周期数(第几个周期)，将其拼接在key上，则能够避免删错或者是没有设置超时时间的问题了。\n```\nsynchronized (LOCK) {\n    long times = time.times()//假设这是获取当前时间秒数的工具类\n    // COUNTER_INTERVAL 时间周期\n    String key = \"ACCESS_COUNT:\" + times/COUNTER_INTERVAL + \":\" + userId \n    if(redis.exists(key)) {\n        long count = (long) redis.incr(key);\n        if (count > maxAllowedTimes) {\n            return false;\n        }\n        return true;\n    } else {\n        redis.setEx(key, 60000, 1);//设置1并设置超时时间60000\n        return ture;\n    }\n}\n```\n\n  \n  ","source":"_posts/redis-note-01.md","raw":"---\ntitle: Redis笔记01\ndate: 2021-03-24 09:18:07\ncategories:\n    - 编程\nhide: false\ncomments: true\nindex_img: /gallery/machi.png\nbanner_img: /gallery/machi.png\n---\n使用Redis时有时候会碰上一些并发的问题，这里来说一下分布式锁以及加锁超时等问题。\n<!--more-->\n> 封面  \n> 一天在某神社（？）看到的。非常向往这种中世纪风格，可能是因为《狼与香辛料》或者大多那种\n> 剑与魔法的世界，都在这样的时代吧，让我觉得特别浪漫。\n### 0x00\n一般情况下，会对那些变化不大但是访问量比较大的请求做缓存处理，但缓存会在某个时刻失效，\n此时就会有大量的请求涌向数据库从而容易引发雪崩效果。\n### 0x01\n为了避免雪崩，我们可以在更新缓存的代码块（即访问数据库）中加入分布式锁，只能够让一个线程去做缓存更新:\n```\nif (redis.setIfAbsent(lock, 1)) { \n    // 更新缓存逻辑\n    redis.del(lock);\n}\n```\n但是上面如果更新逻辑出现卡死现象就会造成死锁，所以我们还需要给锁设置超时时间，\n但是设置超时时间一般的工具例如spring的RedisTemplate是没有把检查存在并设置值和设置超时时间\n作为一个请求发送的，则无法保证是原子操作，这样也会发生在设置超时时间的时候没有成功导致死锁。  \n\n由于redis新版本支持了setNX和EX复合指令的原子操作（即判断存在和设置超时时间），\n所以我们可以去扩展RedisTemplate或者当前使用的工具类；另一种方法则是用lua脚本，执行lua脚本也是一次原子操作。\n> redis在4.0之前整体都是单线程的，4.0后开始加入多线程，但也仅是部分操作，\n> 所以就算非复合指令也可以通过一个请求发送多个指令的方式来达成原子操作的目的。\n```\nif (redis.setAndExpireIfAbsent(lock, 1, 10000)) { \n    // 更新缓存逻辑\n    redis.del(lock);\n}\n```\n> 注意   \n> redis 2.6.12 之前，set返回永远为ok，之后则设置成功时返回ok，\n> 加入条件参数不成立则返回空\n### 0x02\n但我们可能还会发现另一个问题，更新逻辑太久了超过了超时时间，此时锁已经被解除了，\n这就会执行导致途中另一个线程获取到了锁，导致后面删除的时候是删除的另一个线程加的锁。  \n\n所以我们需要引入一个随机id，作为当前线程加锁的标识，若后面发现不是相同id则不做删除。\n```\nlong random = SnowFlakeGenerator.getInstant().nextId();\nif (redis.setAndExpireIfAbsent(lock, random, 10000)) { \n    // 更新缓存逻辑\n    if (redis.get(lock) == random) {\n        redis.del(lock);\n    }\n}\n```\nOk，到了这里你可能也发现了，这个删除是不是也要做原子操作比较好点(  \n没错...  \n若是不做原子操作，那可能就会虽然拿到锁的值能够匹配上，但是下一个瞬间就因为超时而被别的其他线程获取到锁\n从而又引发了上面的问题，删错了别的线程的锁。\n### 0x03\n类似的由于超时导致的问题还有一些情况就是计数器\n```\nsynchronized (LOCK) { //只是为了排除多线程情况，这里只想讨论超时问题，实际情况还要具体分析\n    if(redis.exists(userId)) {\n        redis.incr();\n        if (redis.get(userId) > maxAllowedTimes) {\n            return false;\n        }\n        return true;\n    } else {\n        redis.set(userId, 1);\n        redis.setExpire(60000);\n        return ture;\n    }\n}\n```\n上面是一段限制用户一分钟内可访问次数的redis计数器。  \n这里面如果判断到存在后的下一个瞬间恰好超时，此时incr方法在redis的行为就是先创建并设置值为0，然后加1，\n而没有设置过期时间。导致后面永远被限制访问。  \n```\nsynchronized (LOCK) {\n \n    if(redis.exists(userId)) {\n        long count = (long) redis.incr(userId);\n        \n        if(redis.ttl(userId) == -1) {\n            redis.setExpire(60000);\n        }\n        if (count > maxAllowedTimes) {\n            return false;\n        }\n        return true;\n    } else {\n        redis.setEx(userId, 60000, 1);//设置1并设置超时时间60000\n        return ture;\n    }\n}\n```\n> ttl  \n> -2 表示key不存在  \n> -1 表示key存在但是没有过期时间  \n\n另外一种解决办法就是取当前时间(或者是减去某个时间后)的秒数，然后再去除以60(时间周期)，\n这样就能够获的一个周期数(第几个周期)，将其拼接在key上，则能够避免删错或者是没有设置超时时间的问题了。\n```\nsynchronized (LOCK) {\n    long times = time.times()//假设这是获取当前时间秒数的工具类\n    // COUNTER_INTERVAL 时间周期\n    String key = \"ACCESS_COUNT:\" + times/COUNTER_INTERVAL + \":\" + userId \n    if(redis.exists(key)) {\n        long count = (long) redis.incr(key);\n        if (count > maxAllowedTimes) {\n            return false;\n        }\n        return true;\n    } else {\n        redis.setEx(key, 60000, 1);//设置1并设置超时时间60000\n        return ture;\n    }\n}\n```\n\n  \n  ","slug":"redis-note-01","published":1,"updated":"2021-08-25T02:47:24.847Z","layout":"post","photos":[],"_id":"clzh7x5wd0012q4ql5sfr8r31","content":"<p>使用Redis时有时候会碰上一些并发的问题，这里来说一下分布式锁以及加锁超时等问题。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>封面<br>一天在某神社（？）看到的。非常向往这种中世纪风格，可能是因为《狼与香辛料》或者大多那种<br>剑与魔法的世界，都在这样的时代吧，让我觉得特别浪漫。</p>\n</blockquote>\n<h3 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h3><p>一般情况下，会对那些变化不大但是访问量比较大的请求做缓存处理，但缓存会在某个时刻失效，<br>此时就会有大量的请求涌向数据库从而容易引发雪崩效果。</p>\n<h3 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h3><p>为了避免雪崩，我们可以在更新缓存的代码块（即访问数据库）中加入分布式锁，只能够让一个线程去做缓存更新:</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cos\"><span class=\"hljs-keyword\">if</span> (redis.setIfAbsent(<span class=\"hljs-keyword\">lock</span>, <span class=\"hljs-number\">1</span>)) &#123; <br>    <span class=\"hljs-comment\">// 更新缓存逻辑</span><br>    redis.del(<span class=\"hljs-keyword\">lock</span>)<span class=\"hljs-comment\">;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>但是上面如果更新逻辑出现卡死现象就会造成死锁，所以我们还需要给锁设置超时时间，<br>但是设置超时时间一般的工具例如spring的RedisTemplate是没有把检查存在并设置值和设置超时时间<br>作为一个请求发送的，则无法保证是原子操作，这样也会发生在设置超时时间的时候没有成功导致死锁。  </p>\n<p>由于redis新版本支持了setNX和EX复合指令的原子操作（即判断存在和设置超时时间），<br>所以我们可以去扩展RedisTemplate或者当前使用的工具类；另一种方法则是用lua脚本，执行lua脚本也是一次原子操作。</p>\n<blockquote>\n<p>redis在4.0之前整体都是单线程的，4.0后开始加入多线程，但也仅是部分操作，<br>所以就算非复合指令也可以通过一个请求发送多个指令的方式来达成原子操作的目的。</p>\n</blockquote>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cos\"><span class=\"hljs-keyword\">if</span> (redis.setAndExpireIfAbsent(<span class=\"hljs-keyword\">lock</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10000</span>)) &#123; <br>    <span class=\"hljs-comment\">// 更新缓存逻辑</span><br>    redis.del(<span class=\"hljs-keyword\">lock</span>)<span class=\"hljs-comment\">;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意<br>redis 2.6.12 之前，set返回永远为ok，之后则设置成功时返回ok，<br>加入条件参数不成立则返回空</p>\n</blockquote>\n<h3 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>但我们可能还会发现另一个问题，更新逻辑太久了超过了超时时间，此时锁已经被解除了，<br>这就会执行导致途中另一个线程获取到了锁，导致后面删除的时候是删除的另一个线程加的锁。  </p>\n<p>所以我们需要引入一个随机id，作为当前线程加锁的标识，若后面发现不是相同id则不做删除。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-built_in\">long</span> random = SnowFlakeGenerator.getInstant().nextId();<br><span class=\"hljs-keyword\">if</span> (redis.setAndExpireIfAbsent(<span class=\"hljs-keyword\">lock</span>, random, <span class=\"hljs-number\">10000</span>)) &#123; <br>    <span class=\"hljs-comment\">// 更新缓存逻辑</span><br>    <span class=\"hljs-keyword\">if</span> (redis.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-keyword\">lock</span>) == random) &#123;<br>        redis.del(<span class=\"hljs-keyword\">lock</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Ok，到了这里你可能也发现了，这个删除是不是也要做原子操作比较好点(<br>没错…<br>若是不做原子操作，那可能就会虽然拿到锁的值能够匹配上，但是下一个瞬间就因为超时而被别的其他线程获取到锁<br>从而又引发了上面的问题，删错了别的线程的锁。</p>\n<h3 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h3><p>类似的由于超时导致的问题还有一些情况就是计数器</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">synchronized (LOCK) &#123; <span class=\"hljs-comment\">//只是为了排除多线程情况，这里只想讨论超时问题，实际情况还要具体分析</span><br>    <span class=\"hljs-keyword\">if</span>(redis.exists(userId)) &#123;<br>        redis.incr();<br>        <span class=\"hljs-keyword\">if</span> (redis.<span class=\"hljs-keyword\">get</span>(userId) &gt; maxAllowedTimes) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        redis.<span class=\"hljs-keyword\">set</span>(userId, <span class=\"hljs-number\">1</span>);<br>        redis.setExpire(<span class=\"hljs-number\">60000</span>);<br>        <span class=\"hljs-keyword\">return</span> ture;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上面是一段限制用户一分钟内可访问次数的redis计数器。<br>这里面如果判断到存在后的下一个瞬间恰好超时，此时incr方法在redis的行为就是先创建并设置值为0，然后加1，<br>而没有设置过期时间。导致后面永远被限制访问。  </p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">synchronized (LOCK) &#123;<br> <br>    <span class=\"hljs-keyword\">if</span>(redis.<span class=\"hljs-keyword\">exists</span>(userId)) &#123;<br>        <span class=\"hljs-built_in\">long</span> <span class=\"hljs-keyword\">count</span> = (<span class=\"hljs-built_in\">long</span>) redis.incr(userId);<br>        <br>        <span class=\"hljs-keyword\">if</span>(redis.ttl(userId) == <span class=\"hljs-number\">-1</span>) &#123;<br>            redis.setExpire(<span class=\"hljs-number\">60000</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">count</span> &gt; maxAllowedTimes) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        redis.setEx(userId, <span class=\"hljs-number\">60000</span>, <span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//设置1并设置超时时间60000</span><br>        <span class=\"hljs-keyword\">return</span> ture;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>ttl<br>-2 表示key不存在<br>-1 表示key存在但是没有过期时间  </p>\n</blockquote>\n<p>另外一种解决办法就是取当前时间(或者是减去某个时间后)的秒数，然后再去除以60(时间周期)，<br>这样就能够获的一个周期数(第几个周期)，将其拼接在key上，则能够避免删错或者是没有设置超时时间的问题了。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-keyword\">synchronized</span> (LOCK) &#123;<br>    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">times</span> = time.<span class=\"hljs-keyword\">times</span>()<span class=\"hljs-comment\">//假设这是获取当前时间秒数的工具类</span><br>    <span class=\"hljs-comment\">// COUNTER_INTERVAL 时间周期</span><br>    String key = <span class=\"hljs-string\">&quot;ACCESS_COUNT:&quot;</span> + <span class=\"hljs-keyword\">times</span>/COUNTER_INTERVAL + <span class=\"hljs-string\">&quot;:&quot;</span> + userId <br>    <span class=\"hljs-keyword\">if</span>(redis.exists(key)) &#123;<br>        <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">count</span> = (<span class=\"hljs-keyword\">long</span>) redis.incr(key);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">count</span> &gt; maxAllowedTimes) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        redis.setEx(key, <span class=\"hljs-number\">60000</span>, <span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//设置1并设置超时时间60000</span><br>        <span class=\"hljs-keyword\">return</span> ture;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n","excerpt":"<p>使用Redis时有时候会碰上一些并发的问题，这里来说一下分布式锁以及加锁超时等问题。</p>","more":"<blockquote>\n<p>封面<br>一天在某神社（？）看到的。非常向往这种中世纪风格，可能是因为《狼与香辛料》或者大多那种<br>剑与魔法的世界，都在这样的时代吧，让我觉得特别浪漫。</p>\n</blockquote>\n<h3 id=\"0x00\"><a href=\"#0x00\" class=\"headerlink\" title=\"0x00\"></a>0x00</h3><p>一般情况下，会对那些变化不大但是访问量比较大的请求做缓存处理，但缓存会在某个时刻失效，<br>此时就会有大量的请求涌向数据库从而容易引发雪崩效果。</p>\n<h3 id=\"0x01\"><a href=\"#0x01\" class=\"headerlink\" title=\"0x01\"></a>0x01</h3><p>为了避免雪崩，我们可以在更新缓存的代码块（即访问数据库）中加入分布式锁，只能够让一个线程去做缓存更新:</p>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cos\"><span class=\"hljs-keyword\">if</span> (redis.setIfAbsent(<span class=\"hljs-keyword\">lock</span>, <span class=\"hljs-number\">1</span>)) &#123; <br>    <span class=\"hljs-comment\">// 更新缓存逻辑</span><br>    redis.del(<span class=\"hljs-keyword\">lock</span>)<span class=\"hljs-comment\">;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>但是上面如果更新逻辑出现卡死现象就会造成死锁，所以我们还需要给锁设置超时时间，<br>但是设置超时时间一般的工具例如spring的RedisTemplate是没有把检查存在并设置值和设置超时时间<br>作为一个请求发送的，则无法保证是原子操作，这样也会发生在设置超时时间的时候没有成功导致死锁。  </p>\n<p>由于redis新版本支持了setNX和EX复合指令的原子操作（即判断存在和设置超时时间），<br>所以我们可以去扩展RedisTemplate或者当前使用的工具类；另一种方法则是用lua脚本，执行lua脚本也是一次原子操作。</p>\n<blockquote>\n<p>redis在4.0之前整体都是单线程的，4.0后开始加入多线程，但也仅是部分操作，<br>所以就算非复合指令也可以通过一个请求发送多个指令的方式来达成原子操作的目的。</p>\n</blockquote>\n<figure class=\"highlight cos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cos\"><span class=\"hljs-keyword\">if</span> (redis.setAndExpireIfAbsent(<span class=\"hljs-keyword\">lock</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10000</span>)) &#123; <br>    <span class=\"hljs-comment\">// 更新缓存逻辑</span><br>    redis.del(<span class=\"hljs-keyword\">lock</span>)<span class=\"hljs-comment\">;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>注意<br>redis 2.6.12 之前，set返回永远为ok，之后则设置成功时返回ok，<br>加入条件参数不成立则返回空</p>\n</blockquote>\n<h3 id=\"0x02\"><a href=\"#0x02\" class=\"headerlink\" title=\"0x02\"></a>0x02</h3><p>但我们可能还会发现另一个问题，更新逻辑太久了超过了超时时间，此时锁已经被解除了，<br>这就会执行导致途中另一个线程获取到了锁，导致后面删除的时候是删除的另一个线程加的锁。  </p>\n<p>所以我们需要引入一个随机id，作为当前线程加锁的标识，若后面发现不是相同id则不做删除。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs csharp\"><span class=\"hljs-built_in\">long</span> random = SnowFlakeGenerator.getInstant().nextId();<br><span class=\"hljs-keyword\">if</span> (redis.setAndExpireIfAbsent(<span class=\"hljs-keyword\">lock</span>, random, <span class=\"hljs-number\">10000</span>)) &#123; <br>    <span class=\"hljs-comment\">// 更新缓存逻辑</span><br>    <span class=\"hljs-keyword\">if</span> (redis.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-keyword\">lock</span>) == random) &#123;<br>        redis.del(<span class=\"hljs-keyword\">lock</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Ok，到了这里你可能也发现了，这个删除是不是也要做原子操作比较好点(<br>没错…<br>若是不做原子操作，那可能就会虽然拿到锁的值能够匹配上，但是下一个瞬间就因为超时而被别的其他线程获取到锁<br>从而又引发了上面的问题，删错了别的线程的锁。</p>\n<h3 id=\"0x03\"><a href=\"#0x03\" class=\"headerlink\" title=\"0x03\"></a>0x03</h3><p>类似的由于超时导致的问题还有一些情况就是计数器</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\">synchronized (LOCK) &#123; <span class=\"hljs-comment\">//只是为了排除多线程情况，这里只想讨论超时问题，实际情况还要具体分析</span><br>    <span class=\"hljs-keyword\">if</span>(redis.exists(userId)) &#123;<br>        redis.incr();<br>        <span class=\"hljs-keyword\">if</span> (redis.<span class=\"hljs-keyword\">get</span>(userId) &gt; maxAllowedTimes) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        redis.<span class=\"hljs-keyword\">set</span>(userId, <span class=\"hljs-number\">1</span>);<br>        redis.setExpire(<span class=\"hljs-number\">60000</span>);<br>        <span class=\"hljs-keyword\">return</span> ture;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>上面是一段限制用户一分钟内可访问次数的redis计数器。<br>这里面如果判断到存在后的下一个瞬间恰好超时，此时incr方法在redis的行为就是先创建并设置值为0，然后加1，<br>而没有设置过期时间。导致后面永远被限制访问。  </p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">synchronized (LOCK) &#123;<br> <br>    <span class=\"hljs-keyword\">if</span>(redis.<span class=\"hljs-keyword\">exists</span>(userId)) &#123;<br>        <span class=\"hljs-built_in\">long</span> <span class=\"hljs-keyword\">count</span> = (<span class=\"hljs-built_in\">long</span>) redis.incr(userId);<br>        <br>        <span class=\"hljs-keyword\">if</span>(redis.ttl(userId) == <span class=\"hljs-number\">-1</span>) &#123;<br>            redis.setExpire(<span class=\"hljs-number\">60000</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">count</span> &gt; maxAllowedTimes) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        redis.setEx(userId, <span class=\"hljs-number\">60000</span>, <span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//设置1并设置超时时间60000</span><br>        <span class=\"hljs-keyword\">return</span> ture;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>ttl<br>-2 表示key不存在<br>-1 表示key存在但是没有过期时间  </p>\n</blockquote>\n<p>另外一种解决办法就是取当前时间(或者是减去某个时间后)的秒数，然后再去除以60(时间周期)，<br>这样就能够获的一个周期数(第几个周期)，将其拼接在key上，则能够避免删错或者是没有设置超时时间的问题了。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-keyword\">synchronized</span> (LOCK) &#123;<br>    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">times</span> = time.<span class=\"hljs-keyword\">times</span>()<span class=\"hljs-comment\">//假设这是获取当前时间秒数的工具类</span><br>    <span class=\"hljs-comment\">// COUNTER_INTERVAL 时间周期</span><br>    String key = <span class=\"hljs-string\">&quot;ACCESS_COUNT:&quot;</span> + <span class=\"hljs-keyword\">times</span>/COUNTER_INTERVAL + <span class=\"hljs-string\">&quot;:&quot;</span> + userId <br>    <span class=\"hljs-keyword\">if</span>(redis.exists(key)) &#123;<br>        <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">count</span> = (<span class=\"hljs-keyword\">long</span>) redis.incr(key);<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">count</span> &gt; maxAllowedTimes) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        redis.setEx(key, <span class=\"hljs-number\">60000</span>, <span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//设置1并设置超时时间60000</span><br>        <span class=\"hljs-keyword\">return</span> ture;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"Spring JPA 笔记 01","date":"2024-08-03T15:22:00.000Z","comments":1,"index_img":"https://pixiv.re/86588827-2.jpg","banner_img":"https://pixiv.re/86588827-2.jpg","_content":"记录一下最近工作用jpa的一些心得，或者说就是坑（笑）\n<!--more-->\n> Banner Illustration: [荻pote](https://www.pixiv.net/users/2131660)  \n> 非常通透的画面感，以及大多都是初/高中生。图里面一般都带有一定的叙事。但其实很多细节感觉还是不太好的，例如本图的衣服皱褶。但是个人风格非常明显，我还是很喜欢的。  \n> https://www.pixiv.net/artworks/86588827\n---\n## 关联查询\n众所周知，JPA Fetch Type 有 `Eager` 和 `Lazy`，而 `Eager` 只能有一个，那么其他就要在读取的时候（例如 `getter`）才会查库。这在某些量比较大的关联的表是不友好的，甚至有时候并不想查出来，这也困扰着我现在做的项目。\n\n经过一番搜索，我看到大家都推荐用 `Entity Graph` 来解决这个问题，可是新的问题出现了，官方的 `Entity Graph` 是不支持动态传入的，所以我又找到了 [spring-data-jpa-entity-graph](https://github.com/Cosium/spring-data-jpa-entity-graph) 这个项目，允许运行时传入 `Entity Graph`，所以这个问题也暂时告一段落了。\n\n但是好景不长，由于项目本身是接手的以前的团队，另外实体类的关联规划也都早就写好了，不太可能改，而原想团队写这些实体类的时候几乎就是滥用的程度，想要查什么或者看起来就是能够关联上的就直接写进去，这让我们在开发报表类的需求时极其头疼，因为我们发现 `JPA`/`Hibernate` 就算你不去动那些懒加载的关联项，也会因为某种原因被触发，而且就我们项目来说几乎是 `Repository` 方法调用拿到结果赋值给一个对象的时候就发生了，再往里面跟踪我就实在是不太能够理解代码了，而且看起来几乎没有办法阻止。\n\n所以我们就开始考虑直接用 `Entity Graph` 对那些懒加载（假如他会，因为不是所有懒加载都会去查询）的关联项都直接查询出来，毕竟比起懒加载一条一条查，一条 `sql` 查出来通常是更快的。  \n可是新的问题又出现了，因为其关联的对象巨大的，层层加码，导致一条 `sql` 关联的表实在是太多了（而且可能是重复关联）。  \n\n几经周折，我们发现对于一些巨大的表来说，拆分查询，也就是查出来后把所有的 `id` 收集到后再去查库，会有更好的性能表现。但对于更加复杂的（我们报表开发几乎是基于存储过程再改写成 `java` 的）sql 就只能够用 native query（也就是直接写 sql）了。\n> PS: 用 id 查询的时候有一个坑，就是巨大的 id 量也会导致其查询非常缓慢，所以有必要切分成几次查询，每次查2k左右\n\n## 对象映射/空元素\n空元素出现实际上代表着该条目是有数据的，但是在 `JPA`/`Hibernate` 在进行对象映射的时候，由于该 `id` 为null，亦或者是这是一个组合 `id`，其中有一个字段是null的时候，就会发生。\n\n虽然常用数据库可以写入条件限制这个情况的发生，但不幸的是我们现在用的数据库 `Sybase` 其实是没有主键的说法的，所以我们只是用 `index` 来做限制以达到类似主键的限制的目的。但是其不对该字段为空做限制，而且原先业务数据库所存在的数据就是这样，要么对数据库里的数据进行清洗，要么就是在代码层面兼容。\n> PS: 这里面仍然有一个问题，实际上我们数据库是空白串，char固定长度类型，但是仍然在get值时返回给到null，这块还没有确定是不是单纯数据库驱动的问题。\n\n由于这些数据都是已经在用的了，做修改是非常大的风险， 而且也不单纯只是我们项目在用，除非客户本身已经考虑数据清洗/迁移了，所以数据清洗是不做考虑的。\n\n所以我门最终是以修改 `JPA`/`Hibernate` 的数据映射达成的，就是对特定字段添加 mapper 注解调用自定义映射逻辑，把他改成空串。\n\n重点在nullSafeGet\n```java\npublic class NullToEmptyCharType implements UserType {\n\n\n    @Override\n    public int[] sqlTypes() {\n        return new int[]{Types.VARCHAR};\n    }\n\n    @Override\n    public Class<?> returnedClass() {\n        return String.class;\n    }\n\n    @Override\n    public boolean equals(Object x, Object y) throws HibernateException {\n        if (x == null && y == null) {\n            return true;\n        } else if (x != null && y != null) {\n            return x == y || x.equals(y);\n        } else {\n            return false;\n        }\n    }\n\n    @Override\n    public int hashCode(Object x) throws HibernateException {\n        return Objects.hash(x);\n    }\n\n    @Override\n    public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner) throws HibernateException, SQLException {\n        String value = rs.getString(names[0]);\n        // 就是这一步拿出的value就算数据库是空白串，这里的值也是null\n        if (value == null) {\n            return CommonUtil.EMPTY_STRING;\n        }\n        return value;\n    }\n\n    @Override\n    public void nullSafeSet(PreparedStatement st, Object value, int index, SharedSessionContractImplementor session) throws HibernateException, SQLException {\n        if (value == null) {\n            st.setNull(index, Types.VARCHAR);\n        } else {\n            String phone = value.toString();\n            st.setString(index, phone);\n        }\n    }\n\n    @Override\n    public Object deepCopy(Object value) throws HibernateException {\n        return value;\n    }\n\n    /**\n     * Whether the type is variable\n     */\n    @Override\n    public boolean isMutable() {\n        return false;\n    }\n\n    /**\n     * This method is called when the type is written to the second-level cache\n     */\n    @Override\n    public Serializable disassemble(Object value) throws HibernateException {\n        return (Serializable) value;\n    }\n\n    /**\n     * This method is called when data is fetched from the level 2 cache\n     */\n    @Override\n    public Object assemble(Serializable cached, Object owner) throws HibernateException {\n        return cached;\n    }\n\n    @Override\n    public Object replace(Object original, Object target, Object owner) throws HibernateException {\n        return original;\n    }\n}\n```\n\n## Native Query with Stream\n由于上面说到过我们项目会写 `Dynamic SQL`，也就是会调用 `nativeQuery` 方法做查询，就碰上了奇怪的问题，这个我暂时没有搞明白是怎么回事。  \n简单说就是最后调用 `getResultStream` 获取结果的话，会导致异常的发生，说这个 `Stream` 已经执行过 `terminal` 操作，也就是执行了那些会触发 `Stream` 执行的方法。\n\nFix 也很简单，单纯就是不要用 `Stream` 接收他这个结果集，只用 List 操作。或者是用一个新的 List 接收再去做操作。\n\n\n\n","source":"_posts/spring-jpa-notes-01.md","raw":"---\ntitle: Spring JPA 笔记 01\ndate: 2024-8-3 23:22:00\ncategories:\n    - 编程\ntags:\n    - JPA\ncomments: true\nindex_img: https://pixiv.re/86588827-2.jpg\nbanner_img: https://pixiv.re/86588827-2.jpg\n\n---\n记录一下最近工作用jpa的一些心得，或者说就是坑（笑）\n<!--more-->\n> Banner Illustration: [荻pote](https://www.pixiv.net/users/2131660)  \n> 非常通透的画面感，以及大多都是初/高中生。图里面一般都带有一定的叙事。但其实很多细节感觉还是不太好的，例如本图的衣服皱褶。但是个人风格非常明显，我还是很喜欢的。  \n> https://www.pixiv.net/artworks/86588827\n---\n## 关联查询\n众所周知，JPA Fetch Type 有 `Eager` 和 `Lazy`，而 `Eager` 只能有一个，那么其他就要在读取的时候（例如 `getter`）才会查库。这在某些量比较大的关联的表是不友好的，甚至有时候并不想查出来，这也困扰着我现在做的项目。\n\n经过一番搜索，我看到大家都推荐用 `Entity Graph` 来解决这个问题，可是新的问题出现了，官方的 `Entity Graph` 是不支持动态传入的，所以我又找到了 [spring-data-jpa-entity-graph](https://github.com/Cosium/spring-data-jpa-entity-graph) 这个项目，允许运行时传入 `Entity Graph`，所以这个问题也暂时告一段落了。\n\n但是好景不长，由于项目本身是接手的以前的团队，另外实体类的关联规划也都早就写好了，不太可能改，而原想团队写这些实体类的时候几乎就是滥用的程度，想要查什么或者看起来就是能够关联上的就直接写进去，这让我们在开发报表类的需求时极其头疼，因为我们发现 `JPA`/`Hibernate` 就算你不去动那些懒加载的关联项，也会因为某种原因被触发，而且就我们项目来说几乎是 `Repository` 方法调用拿到结果赋值给一个对象的时候就发生了，再往里面跟踪我就实在是不太能够理解代码了，而且看起来几乎没有办法阻止。\n\n所以我们就开始考虑直接用 `Entity Graph` 对那些懒加载（假如他会，因为不是所有懒加载都会去查询）的关联项都直接查询出来，毕竟比起懒加载一条一条查，一条 `sql` 查出来通常是更快的。  \n可是新的问题又出现了，因为其关联的对象巨大的，层层加码，导致一条 `sql` 关联的表实在是太多了（而且可能是重复关联）。  \n\n几经周折，我们发现对于一些巨大的表来说，拆分查询，也就是查出来后把所有的 `id` 收集到后再去查库，会有更好的性能表现。但对于更加复杂的（我们报表开发几乎是基于存储过程再改写成 `java` 的）sql 就只能够用 native query（也就是直接写 sql）了。\n> PS: 用 id 查询的时候有一个坑，就是巨大的 id 量也会导致其查询非常缓慢，所以有必要切分成几次查询，每次查2k左右\n\n## 对象映射/空元素\n空元素出现实际上代表着该条目是有数据的，但是在 `JPA`/`Hibernate` 在进行对象映射的时候，由于该 `id` 为null，亦或者是这是一个组合 `id`，其中有一个字段是null的时候，就会发生。\n\n虽然常用数据库可以写入条件限制这个情况的发生，但不幸的是我们现在用的数据库 `Sybase` 其实是没有主键的说法的，所以我们只是用 `index` 来做限制以达到类似主键的限制的目的。但是其不对该字段为空做限制，而且原先业务数据库所存在的数据就是这样，要么对数据库里的数据进行清洗，要么就是在代码层面兼容。\n> PS: 这里面仍然有一个问题，实际上我们数据库是空白串，char固定长度类型，但是仍然在get值时返回给到null，这块还没有确定是不是单纯数据库驱动的问题。\n\n由于这些数据都是已经在用的了，做修改是非常大的风险， 而且也不单纯只是我们项目在用，除非客户本身已经考虑数据清洗/迁移了，所以数据清洗是不做考虑的。\n\n所以我门最终是以修改 `JPA`/`Hibernate` 的数据映射达成的，就是对特定字段添加 mapper 注解调用自定义映射逻辑，把他改成空串。\n\n重点在nullSafeGet\n```java\npublic class NullToEmptyCharType implements UserType {\n\n\n    @Override\n    public int[] sqlTypes() {\n        return new int[]{Types.VARCHAR};\n    }\n\n    @Override\n    public Class<?> returnedClass() {\n        return String.class;\n    }\n\n    @Override\n    public boolean equals(Object x, Object y) throws HibernateException {\n        if (x == null && y == null) {\n            return true;\n        } else if (x != null && y != null) {\n            return x == y || x.equals(y);\n        } else {\n            return false;\n        }\n    }\n\n    @Override\n    public int hashCode(Object x) throws HibernateException {\n        return Objects.hash(x);\n    }\n\n    @Override\n    public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner) throws HibernateException, SQLException {\n        String value = rs.getString(names[0]);\n        // 就是这一步拿出的value就算数据库是空白串，这里的值也是null\n        if (value == null) {\n            return CommonUtil.EMPTY_STRING;\n        }\n        return value;\n    }\n\n    @Override\n    public void nullSafeSet(PreparedStatement st, Object value, int index, SharedSessionContractImplementor session) throws HibernateException, SQLException {\n        if (value == null) {\n            st.setNull(index, Types.VARCHAR);\n        } else {\n            String phone = value.toString();\n            st.setString(index, phone);\n        }\n    }\n\n    @Override\n    public Object deepCopy(Object value) throws HibernateException {\n        return value;\n    }\n\n    /**\n     * Whether the type is variable\n     */\n    @Override\n    public boolean isMutable() {\n        return false;\n    }\n\n    /**\n     * This method is called when the type is written to the second-level cache\n     */\n    @Override\n    public Serializable disassemble(Object value) throws HibernateException {\n        return (Serializable) value;\n    }\n\n    /**\n     * This method is called when data is fetched from the level 2 cache\n     */\n    @Override\n    public Object assemble(Serializable cached, Object owner) throws HibernateException {\n        return cached;\n    }\n\n    @Override\n    public Object replace(Object original, Object target, Object owner) throws HibernateException {\n        return original;\n    }\n}\n```\n\n## Native Query with Stream\n由于上面说到过我们项目会写 `Dynamic SQL`，也就是会调用 `nativeQuery` 方法做查询，就碰上了奇怪的问题，这个我暂时没有搞明白是怎么回事。  \n简单说就是最后调用 `getResultStream` 获取结果的话，会导致异常的发生，说这个 `Stream` 已经执行过 `terminal` 操作，也就是执行了那些会触发 `Stream` 执行的方法。\n\nFix 也很简单，单纯就是不要用 `Stream` 接收他这个结果集，只用 List 操作。或者是用一个新的 List 接收再去做操作。\n\n\n\n","slug":"spring-jpa-notes-01","published":1,"updated":"2024-08-05T14:01:59.484Z","layout":"post","photos":[],"_id":"clzh7x5wl0035q4qld2ig7gb5","content":"<p>记录一下最近工作用jpa的一些心得，或者说就是坑（笑）</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>Banner Illustration: <a href=\"https://www.pixiv.net/users/2131660\">荻pote</a><br>非常通透的画面感，以及大多都是初/高中生。图里面一般都带有一定的叙事。但其实很多细节感觉还是不太好的，例如本图的衣服皱褶。但是个人风格非常明显，我还是很喜欢的。<br><a href=\"https://www.pixiv.net/artworks/86588827\">https://www.pixiv.net/artworks/86588827</a></p>\n</blockquote>\n<hr>\n<h2 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h2><p>众所周知，JPA Fetch Type 有 <code>Eager</code> 和 <code>Lazy</code>，而 <code>Eager</code> 只能有一个，那么其他就要在读取的时候（例如 <code>getter</code>）才会查库。这在某些量比较大的关联的表是不友好的，甚至有时候并不想查出来，这也困扰着我现在做的项目。</p>\n<p>经过一番搜索，我看到大家都推荐用 <code>Entity Graph</code> 来解决这个问题，可是新的问题出现了，官方的 <code>Entity Graph</code> 是不支持动态传入的，所以我又找到了 <a href=\"https://github.com/Cosium/spring-data-jpa-entity-graph\">spring-data-jpa-entity-graph</a> 这个项目，允许运行时传入 <code>Entity Graph</code>，所以这个问题也暂时告一段落了。</p>\n<p>但是好景不长，由于项目本身是接手的以前的团队，另外实体类的关联规划也都早就写好了，不太可能改，而原想团队写这些实体类的时候几乎就是滥用的程度，想要查什么或者看起来就是能够关联上的就直接写进去，这让我们在开发报表类的需求时极其头疼，因为我们发现 <code>JPA</code>/<code>Hibernate</code> 就算你不去动那些懒加载的关联项，也会因为某种原因被触发，而且就我们项目来说几乎是 <code>Repository</code> 方法调用拿到结果赋值给一个对象的时候就发生了，再往里面跟踪我就实在是不太能够理解代码了，而且看起来几乎没有办法阻止。</p>\n<p>所以我们就开始考虑直接用 <code>Entity Graph</code> 对那些懒加载（假如他会，因为不是所有懒加载都会去查询）的关联项都直接查询出来，毕竟比起懒加载一条一条查，一条 <code>sql</code> 查出来通常是更快的。<br>可是新的问题又出现了，因为其关联的对象巨大的，层层加码，导致一条 <code>sql</code> 关联的表实在是太多了（而且可能是重复关联）。  </p>\n<p>几经周折，我们发现对于一些巨大的表来说，拆分查询，也就是查出来后把所有的 <code>id</code> 收集到后再去查库，会有更好的性能表现。但对于更加复杂的（我们报表开发几乎是基于存储过程再改写成 <code>java</code> 的）sql 就只能够用 native query（也就是直接写 sql）了。</p>\n<blockquote>\n<p>PS: 用 id 查询的时候有一个坑，就是巨大的 id 量也会导致其查询非常缓慢，所以有必要切分成几次查询，每次查2k左右</p>\n</blockquote>\n<h2 id=\"对象映射-空元素\"><a href=\"#对象映射-空元素\" class=\"headerlink\" title=\"对象映射/空元素\"></a>对象映射/空元素</h2><p>空元素出现实际上代表着该条目是有数据的，但是在 <code>JPA</code>/<code>Hibernate</code> 在进行对象映射的时候，由于该 <code>id</code> 为null，亦或者是这是一个组合 <code>id</code>，其中有一个字段是null的时候，就会发生。</p>\n<p>虽然常用数据库可以写入条件限制这个情况的发生，但不幸的是我们现在用的数据库 <code>Sybase</code> 其实是没有主键的说法的，所以我们只是用 <code>index</code> 来做限制以达到类似主键的限制的目的。但是其不对该字段为空做限制，而且原先业务数据库所存在的数据就是这样，要么对数据库里的数据进行清洗，要么就是在代码层面兼容。</p>\n<blockquote>\n<p>PS: 这里面仍然有一个问题，实际上我们数据库是空白串，char固定长度类型，但是仍然在get值时返回给到null，这块还没有确定是不是单纯数据库驱动的问题。</p>\n</blockquote>\n<p>由于这些数据都是已经在用的了，做修改是非常大的风险， 而且也不单纯只是我们项目在用，除非客户本身已经考虑数据清洗/迁移了，所以数据清洗是不做考虑的。</p>\n<p>所以我门最终是以修改 <code>JPA</code>/<code>Hibernate</code> 的数据映射达成的，就是对特定字段添加 mapper 注解调用自定义映射逻辑，把他改成空串。</p>\n<p>重点在nullSafeGet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NullToEmptyCharType</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserType</span> &#123;<br><br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[] sqlTypes() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;Types.VARCHAR&#125;;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Class&lt;?&gt; returnedClass() &#123;<br>        <span class=\"hljs-keyword\">return</span> String.class;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object x, Object y)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span> &amp;&amp; y == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x != <span class=\"hljs-literal\">null</span> &amp;&amp; y != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> x == y || x.equals(y);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">(Object x)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> Objects.hash(x);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">nullSafeGet</span><span class=\"hljs-params\">(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)</span> <span class=\"hljs-keyword\">throws</span> HibernateException, SQLException &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> rs.getString(names[<span class=\"hljs-number\">0</span>]);<br>        <span class=\"hljs-comment\">// 就是这一步拿出的value就算数据库是空白串，这里的值也是null</span><br>        <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> CommonUtil.EMPTY_STRING;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> value;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">nullSafeSet</span><span class=\"hljs-params\">(PreparedStatement st, Object value, <span class=\"hljs-type\">int</span> index, SharedSessionContractImplementor session)</span> <span class=\"hljs-keyword\">throws</span> HibernateException, SQLException &#123;<br>        <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-literal\">null</span>) &#123;<br>            st.setNull(index, Types.VARCHAR);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">phone</span> <span class=\"hljs-operator\">=</span> value.toString();<br>            st.setString(index, phone);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">deepCopy</span><span class=\"hljs-params\">(Object value)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> value;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * Whether the type is variable</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isMutable</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * This method is called when the type is written to the second-level cache</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Serializable <span class=\"hljs-title function_\">disassemble</span><span class=\"hljs-params\">(Object value)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> (Serializable) value;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * This method is called when data is fetched from the level 2 cache</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">assemble</span><span class=\"hljs-params\">(Serializable cached, Object owner)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> cached;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">replace</span><span class=\"hljs-params\">(Object original, Object target, Object owner)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> original;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Native-Query-with-Stream\"><a href=\"#Native-Query-with-Stream\" class=\"headerlink\" title=\"Native Query with Stream\"></a>Native Query with Stream</h2><p>由于上面说到过我们项目会写 <code>Dynamic SQL</code>，也就是会调用 <code>nativeQuery</code> 方法做查询，就碰上了奇怪的问题，这个我暂时没有搞明白是怎么回事。<br>简单说就是最后调用 <code>getResultStream</code> 获取结果的话，会导致异常的发生，说这个 <code>Stream</code> 已经执行过 <code>terminal</code> 操作，也就是执行了那些会触发 <code>Stream</code> 执行的方法。</p>\n<p>Fix 也很简单，单纯就是不要用 <code>Stream</code> 接收他这个结果集，只用 List 操作。或者是用一个新的 List 接收再去做操作。</p>\n","excerpt":"<p>记录一下最近工作用jpa的一些心得，或者说就是坑（笑）</p>","more":"<blockquote>\n<p>Banner Illustration: <a href=\"https://www.pixiv.net/users/2131660\">荻pote</a><br>非常通透的画面感，以及大多都是初/高中生。图里面一般都带有一定的叙事。但其实很多细节感觉还是不太好的，例如本图的衣服皱褶。但是个人风格非常明显，我还是很喜欢的。<br><a href=\"https://www.pixiv.net/artworks/86588827\">https://www.pixiv.net/artworks/86588827</a></p>\n</blockquote>\n<hr>\n<h2 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h2><p>众所周知，JPA Fetch Type 有 <code>Eager</code> 和 <code>Lazy</code>，而 <code>Eager</code> 只能有一个，那么其他就要在读取的时候（例如 <code>getter</code>）才会查库。这在某些量比较大的关联的表是不友好的，甚至有时候并不想查出来，这也困扰着我现在做的项目。</p>\n<p>经过一番搜索，我看到大家都推荐用 <code>Entity Graph</code> 来解决这个问题，可是新的问题出现了，官方的 <code>Entity Graph</code> 是不支持动态传入的，所以我又找到了 <a href=\"https://github.com/Cosium/spring-data-jpa-entity-graph\">spring-data-jpa-entity-graph</a> 这个项目，允许运行时传入 <code>Entity Graph</code>，所以这个问题也暂时告一段落了。</p>\n<p>但是好景不长，由于项目本身是接手的以前的团队，另外实体类的关联规划也都早就写好了，不太可能改，而原想团队写这些实体类的时候几乎就是滥用的程度，想要查什么或者看起来就是能够关联上的就直接写进去，这让我们在开发报表类的需求时极其头疼，因为我们发现 <code>JPA</code>/<code>Hibernate</code> 就算你不去动那些懒加载的关联项，也会因为某种原因被触发，而且就我们项目来说几乎是 <code>Repository</code> 方法调用拿到结果赋值给一个对象的时候就发生了，再往里面跟踪我就实在是不太能够理解代码了，而且看起来几乎没有办法阻止。</p>\n<p>所以我们就开始考虑直接用 <code>Entity Graph</code> 对那些懒加载（假如他会，因为不是所有懒加载都会去查询）的关联项都直接查询出来，毕竟比起懒加载一条一条查，一条 <code>sql</code> 查出来通常是更快的。<br>可是新的问题又出现了，因为其关联的对象巨大的，层层加码，导致一条 <code>sql</code> 关联的表实在是太多了（而且可能是重复关联）。  </p>\n<p>几经周折，我们发现对于一些巨大的表来说，拆分查询，也就是查出来后把所有的 <code>id</code> 收集到后再去查库，会有更好的性能表现。但对于更加复杂的（我们报表开发几乎是基于存储过程再改写成 <code>java</code> 的）sql 就只能够用 native query（也就是直接写 sql）了。</p>\n<blockquote>\n<p>PS: 用 id 查询的时候有一个坑，就是巨大的 id 量也会导致其查询非常缓慢，所以有必要切分成几次查询，每次查2k左右</p>\n</blockquote>\n<h2 id=\"对象映射-空元素\"><a href=\"#对象映射-空元素\" class=\"headerlink\" title=\"对象映射/空元素\"></a>对象映射/空元素</h2><p>空元素出现实际上代表着该条目是有数据的，但是在 <code>JPA</code>/<code>Hibernate</code> 在进行对象映射的时候，由于该 <code>id</code> 为null，亦或者是这是一个组合 <code>id</code>，其中有一个字段是null的时候，就会发生。</p>\n<p>虽然常用数据库可以写入条件限制这个情况的发生，但不幸的是我们现在用的数据库 <code>Sybase</code> 其实是没有主键的说法的，所以我们只是用 <code>index</code> 来做限制以达到类似主键的限制的目的。但是其不对该字段为空做限制，而且原先业务数据库所存在的数据就是这样，要么对数据库里的数据进行清洗，要么就是在代码层面兼容。</p>\n<blockquote>\n<p>PS: 这里面仍然有一个问题，实际上我们数据库是空白串，char固定长度类型，但是仍然在get值时返回给到null，这块还没有确定是不是单纯数据库驱动的问题。</p>\n</blockquote>\n<p>由于这些数据都是已经在用的了，做修改是非常大的风险， 而且也不单纯只是我们项目在用，除非客户本身已经考虑数据清洗/迁移了，所以数据清洗是不做考虑的。</p>\n<p>所以我门最终是以修改 <code>JPA</code>/<code>Hibernate</code> 的数据映射达成的，就是对特定字段添加 mapper 注解调用自定义映射逻辑，把他改成空串。</p>\n<p>重点在nullSafeGet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NullToEmptyCharType</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserType</span> &#123;<br><br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[] sqlTypes() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;Types.VARCHAR&#125;;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Class&lt;?&gt; returnedClass() &#123;<br>        <span class=\"hljs-keyword\">return</span> String.class;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object x, Object y)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-literal\">null</span> &amp;&amp; y == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x != <span class=\"hljs-literal\">null</span> &amp;&amp; y != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> x == y || x.equals(y);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">(Object x)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> Objects.hash(x);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">nullSafeGet</span><span class=\"hljs-params\">(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)</span> <span class=\"hljs-keyword\">throws</span> HibernateException, SQLException &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> rs.getString(names[<span class=\"hljs-number\">0</span>]);<br>        <span class=\"hljs-comment\">// 就是这一步拿出的value就算数据库是空白串，这里的值也是null</span><br>        <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> CommonUtil.EMPTY_STRING;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> value;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">nullSafeSet</span><span class=\"hljs-params\">(PreparedStatement st, Object value, <span class=\"hljs-type\">int</span> index, SharedSessionContractImplementor session)</span> <span class=\"hljs-keyword\">throws</span> HibernateException, SQLException &#123;<br>        <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-literal\">null</span>) &#123;<br>            st.setNull(index, Types.VARCHAR);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">phone</span> <span class=\"hljs-operator\">=</span> value.toString();<br>            st.setString(index, phone);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">deepCopy</span><span class=\"hljs-params\">(Object value)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> value;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * Whether the type is variable</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isMutable</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * This method is called when the type is written to the second-level cache</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Serializable <span class=\"hljs-title function_\">disassemble</span><span class=\"hljs-params\">(Object value)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> (Serializable) value;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * This method is called when data is fetched from the level 2 cache</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">assemble</span><span class=\"hljs-params\">(Serializable cached, Object owner)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> cached;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">replace</span><span class=\"hljs-params\">(Object original, Object target, Object owner)</span> <span class=\"hljs-keyword\">throws</span> HibernateException &#123;<br>        <span class=\"hljs-keyword\">return</span> original;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Native-Query-with-Stream\"><a href=\"#Native-Query-with-Stream\" class=\"headerlink\" title=\"Native Query with Stream\"></a>Native Query with Stream</h2><p>由于上面说到过我们项目会写 <code>Dynamic SQL</code>，也就是会调用 <code>nativeQuery</code> 方法做查询，就碰上了奇怪的问题，这个我暂时没有搞明白是怎么回事。<br>简单说就是最后调用 <code>getResultStream</code> 获取结果的话，会导致异常的发生，说这个 <code>Stream</code> 已经执行过 <code>terminal</code> 操作，也就是执行了那些会触发 <code>Stream</code> 执行的方法。</p>\n<p>Fix 也很简单，单纯就是不要用 <code>Stream</code> 接收他这个结果集，只用 List 操作。或者是用一个新的 List 接收再去做操作。</p>"},{"title":"とある三秋 缒の摘抄","date":"2017-05-19T16:00:00.000Z","comments":1,"thumbnail":"/gallery/1549865117004_x68h12oa.png","_content":"记录一下比较打动我的一些段落\n<!--more-->\n## 后记\n{% blockquote 三秋 缒, いたいのいたいの、とんでゆけ %}  \n&emsp;&emsp;这世上到处都有地洞，至少世界看在我眼里就是这样。有的洞小，有的洞大；有的洞浅，有的洞深；有的洞很明显，有的洞不明显；有的洞尚有人掉进去，有的洞已经有许多人掉进去。真的是五花八门。一旦想着这一个个地洞，就会让我满心不安，一步都不想动了。\n&emsp;&emsp;孩提时代，我喜欢那种会让我忘记地洞存在的故事。看来不只是我，大家都喜欢看那种书中世界的所有地洞都已经加盖的故事，也不知道是不是该叫“杀菌过的故事”。当然主角不会只遇到好事，经历的各种痛苦与难受的体验也不会比别人少，但最终来说，这一切都将成为他成长的动力，让读者可以沉浸在“人就是要接受一切勇敢活下去”这种可靠的感觉中。我说的就是这种故事。\n&emsp;&emsp;我想我们一定是不希望连在虚构的世界都要经历悲伤\n&emsp;&emsp;可是有一天，我发现自己不知不觉地身在阴暗的地洞中。那是一种没有任何前兆、没有天理可言的失足。由于那是个非常小且不起眼的地洞，很难指望会有别人帮助。所幸这个地洞并不是深到爬不出来，我花了很长时间，靠自己的力量终于脱身。\n&emsp;&emsp;来到地上后，我沐浴在久违的温暖阳光与清澈的徐风中，因而产生这样的想法。无论多么小心，都没有人知道何时会掉进地洞。这个世界就是这样的地方。下次我说不定会掉进一个更深的洞，深得让我再也回不到地面上。到时候，我该怎么办呢？\n&emsp;&emsp;从此之后，我就再也无法怀着以往那样单纯的心情，去看待那些“把地洞加了盖的故事”。相对地，我开始喜欢描写“在地洞里过的好像很幸福的人”的故事。因为我想听的是在阴暗、深邃、狭窄又寒冷的地洞里，不用逞强也能露出微笑的人身上所发生的故事。也许对现在的我来说，再也没有什么比这个更能安慰我了。\n{% endblockquote %}\n","source":"_posts/とある三秋 缒的一些摘抄.md","raw":"---\ntitle: とある三秋 缒の摘抄\ndate: 2017/5/20\ntags: \n    - 三秋 缒\n    - 摘抄\n    - 小说\n\ncomments: true\nthumbnail: /gallery/1549865117004_x68h12oa.png\n---\n记录一下比较打动我的一些段落\n<!--more-->\n## 后记\n{% blockquote 三秋 缒, いたいのいたいの、とんでゆけ %}  \n&emsp;&emsp;这世上到处都有地洞，至少世界看在我眼里就是这样。有的洞小，有的洞大；有的洞浅，有的洞深；有的洞很明显，有的洞不明显；有的洞尚有人掉进去，有的洞已经有许多人掉进去。真的是五花八门。一旦想着这一个个地洞，就会让我满心不安，一步都不想动了。\n&emsp;&emsp;孩提时代，我喜欢那种会让我忘记地洞存在的故事。看来不只是我，大家都喜欢看那种书中世界的所有地洞都已经加盖的故事，也不知道是不是该叫“杀菌过的故事”。当然主角不会只遇到好事，经历的各种痛苦与难受的体验也不会比别人少，但最终来说，这一切都将成为他成长的动力，让读者可以沉浸在“人就是要接受一切勇敢活下去”这种可靠的感觉中。我说的就是这种故事。\n&emsp;&emsp;我想我们一定是不希望连在虚构的世界都要经历悲伤\n&emsp;&emsp;可是有一天，我发现自己不知不觉地身在阴暗的地洞中。那是一种没有任何前兆、没有天理可言的失足。由于那是个非常小且不起眼的地洞，很难指望会有别人帮助。所幸这个地洞并不是深到爬不出来，我花了很长时间，靠自己的力量终于脱身。\n&emsp;&emsp;来到地上后，我沐浴在久违的温暖阳光与清澈的徐风中，因而产生这样的想法。无论多么小心，都没有人知道何时会掉进地洞。这个世界就是这样的地方。下次我说不定会掉进一个更深的洞，深得让我再也回不到地面上。到时候，我该怎么办呢？\n&emsp;&emsp;从此之后，我就再也无法怀着以往那样单纯的心情，去看待那些“把地洞加了盖的故事”。相对地，我开始喜欢描写“在地洞里过的好像很幸福的人”的故事。因为我想听的是在阴暗、深邃、狭窄又寒冷的地洞里，不用逞强也能露出微笑的人身上所发生的故事。也许对现在的我来说，再也没有什么比这个更能安慰我了。\n{% endblockquote %}\n","slug":"とある三秋 缒的一些摘抄","published":1,"updated":"2022-02-20T12:23:16.173Z","layout":"post","photos":[],"_id":"clzh7x5wl0036q4qlcfim7lsp","content":"<p>记录一下比较打动我的一些段落</p>\n<span id=\"more\"></span>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><blockquote><p>&emsp;&emsp;这世上到处都有地洞，至少世界看在我眼里就是这样。有的洞小，有的洞大；有的洞浅，有的洞深；有的洞很明显，有的洞不明显；有的洞尚有人掉进去，有的洞已经有许多人掉进去。真的是五花八门。一旦想着这一个个地洞，就会让我满心不安，一步都不想动了。<br>&emsp;&emsp;孩提时代，我喜欢那种会让我忘记地洞存在的故事。看来不只是我，大家都喜欢看那种书中世界的所有地洞都已经加盖的故事，也不知道是不是该叫“杀菌过的故事”。当然主角不会只遇到好事，经历的各种痛苦与难受的体验也不会比别人少，但最终来说，这一切都将成为他成长的动力，让读者可以沉浸在“人就是要接受一切勇敢活下去”这种可靠的感觉中。我说的就是这种故事。<br>&emsp;&emsp;我想我们一定是不希望连在虚构的世界都要经历悲伤<br>&emsp;&emsp;可是有一天，我发现自己不知不觉地身在阴暗的地洞中。那是一种没有任何前兆、没有天理可言的失足。由于那是个非常小且不起眼的地洞，很难指望会有别人帮助。所幸这个地洞并不是深到爬不出来，我花了很长时间，靠自己的力量终于脱身。<br>&emsp;&emsp;来到地上后，我沐浴在久违的温暖阳光与清澈的徐风中，因而产生这样的想法。无论多么小心，都没有人知道何时会掉进地洞。这个世界就是这样的地方。下次我说不定会掉进一个更深的洞，深得让我再也回不到地面上。到时候，我该怎么办呢？<br>&emsp;&emsp;从此之后，我就再也无法怀着以往那样单纯的心情，去看待那些“把地洞加了盖的故事”。相对地，我开始喜欢描写“在地洞里过的好像很幸福的人”的故事。因为我想听的是在阴暗、深邃、狭窄又寒冷的地洞里，不用逞强也能露出微笑的人身上所发生的故事。也许对现在的我来说，再也没有什么比这个更能安慰我了。</p>\n<footer><strong>三秋 缒</strong><cite>いたいのいたいの、とんでゆけ</cite></footer></blockquote>\n","excerpt":"<p>记录一下比较打动我的一些段落</p>","more":"<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><blockquote><p>&emsp;&emsp;这世上到处都有地洞，至少世界看在我眼里就是这样。有的洞小，有的洞大；有的洞浅，有的洞深；有的洞很明显，有的洞不明显；有的洞尚有人掉进去，有的洞已经有许多人掉进去。真的是五花八门。一旦想着这一个个地洞，就会让我满心不安，一步都不想动了。<br>&emsp;&emsp;孩提时代，我喜欢那种会让我忘记地洞存在的故事。看来不只是我，大家都喜欢看那种书中世界的所有地洞都已经加盖的故事，也不知道是不是该叫“杀菌过的故事”。当然主角不会只遇到好事，经历的各种痛苦与难受的体验也不会比别人少，但最终来说，这一切都将成为他成长的动力，让读者可以沉浸在“人就是要接受一切勇敢活下去”这种可靠的感觉中。我说的就是这种故事。<br>&emsp;&emsp;我想我们一定是不希望连在虚构的世界都要经历悲伤<br>&emsp;&emsp;可是有一天，我发现自己不知不觉地身在阴暗的地洞中。那是一种没有任何前兆、没有天理可言的失足。由于那是个非常小且不起眼的地洞，很难指望会有别人帮助。所幸这个地洞并不是深到爬不出来，我花了很长时间，靠自己的力量终于脱身。<br>&emsp;&emsp;来到地上后，我沐浴在久违的温暖阳光与清澈的徐风中，因而产生这样的想法。无论多么小心，都没有人知道何时会掉进地洞。这个世界就是这样的地方。下次我说不定会掉进一个更深的洞，深得让我再也回不到地面上。到时候，我该怎么办呢？<br>&emsp;&emsp;从此之后，我就再也无法怀着以往那样单纯的心情，去看待那些“把地洞加了盖的故事”。相对地，我开始喜欢描写“在地洞里过的好像很幸福的人”的故事。因为我想听的是在阴暗、深邃、狭窄又寒冷的地洞里，不用逞强也能露出微笑的人身上所发生的故事。也许对现在的我来说，再也没有什么比这个更能安慰我了。</p>\n<footer><strong>三秋 缒</strong><cite>いたいのいたいの、とんでゆけ</cite></footer></blockquote>"},{"title":"ウマ娘手帳","date":"2021-03-10T01:18:07.000Z","_content":"记录一下玩马娘的心得(~~已弃坑~~)\n<!--more-->\n### 属性\n在培训中，初期一般方针就是刷好感度，找人多的刷，属性一般也是水桶比较稳，直到出道战可能就会稍微改变一下。\n- スタミナ(耐力)  \n  首先属性里面耐力应该是比较关键的，如果耐力不足以跑完则会根据根性降低速度， 典型的就像`ダイワスカレと(大和红骥)`，\n  快到中期有一个2400m的中距离比赛，看攻略网站是要达到230才会比较安定，如果达不到基本就在最后被甩开了(btw，攻略提到有马的2500m要上到350才比较安定)\n  下面是一些估计值但跟上面看到的攻略不太一样\n  ```\n  短距离   1200            200+\n  マイル   1400-1800       250 ~ 300\n  中距离   2000-2400       300 ~ 400\n  长距离   2500-3200-3600  400 ~ 500+\n  ```\n\n### 固定技能升级\n- 2月初是6W粉丝\n- 4月初是7W粉丝+理事长好感3格\n- 12月底是12W粉丝\n  \n  \n  ","source":"_posts/uma-musume-note.md","raw":"---\ntitle: ウマ娘手帳\ndate: 2021-03-10 09:18:07\ncategories:\n- Game\ntags:\n- ウマ娘\n---\n记录一下玩马娘的心得(~~已弃坑~~)\n<!--more-->\n### 属性\n在培训中，初期一般方针就是刷好感度，找人多的刷，属性一般也是水桶比较稳，直到出道战可能就会稍微改变一下。\n- スタミナ(耐力)  \n  首先属性里面耐力应该是比较关键的，如果耐力不足以跑完则会根据根性降低速度， 典型的就像`ダイワスカレと(大和红骥)`，\n  快到中期有一个2400m的中距离比赛，看攻略网站是要达到230才会比较安定，如果达不到基本就在最后被甩开了(btw，攻略提到有马的2500m要上到350才比较安定)\n  下面是一些估计值但跟上面看到的攻略不太一样\n  ```\n  短距离   1200            200+\n  マイル   1400-1800       250 ~ 300\n  中距离   2000-2400       300 ~ 400\n  长距离   2500-3200-3600  400 ~ 500+\n  ```\n\n### 固定技能升级\n- 2月初是6W粉丝\n- 4月初是7W粉丝+理事长好感3格\n- 12月底是12W粉丝\n  \n  \n  ","slug":"uma-musume-note","published":1,"updated":"2021-08-25T02:49:18.678Z","comments":1,"layout":"post","photos":[],"_id":"clzh7x5wm0038q4ql06ri70c8","content":"<p>记录一下玩马娘的心得(<del>已弃坑</del>)</p>\n<span id=\"more\"></span>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>在培训中，初期一般方针就是刷好感度，找人多的刷，属性一般也是水桶比较稳，直到出道战可能就会稍微改变一下。</p>\n<ul>\n<li>スタミナ(耐力)<br>首先属性里面耐力应该是比较关键的，如果耐力不足以跑完则会根据根性降低速度， 典型的就像<code>ダイワスカレと(大和红骥)</code>，<br>快到中期有一个2400m的中距离比赛，看攻略网站是要达到230才会比较安定，如果达不到基本就在最后被甩开了(btw，攻略提到有马的2500m要上到350才比较安定)<br>下面是一些估计值但跟上面看到的攻略不太一样<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs subunit\">短距离   1200            200+<br>マイル   1400<span class=\"hljs-string\">-1800</span>       250 ~ 300<br>中距离   2000<span class=\"hljs-string\">-2400</span>       300 ~ 400<br>长距离   2500<span class=\"hljs-string\">-3200</span><span class=\"hljs-string\">-3600</span>  400 ~ 500+<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"固定技能升级\"><a href=\"#固定技能升级\" class=\"headerlink\" title=\"固定技能升级\"></a>固定技能升级</h3><ul>\n<li>2月初是6W粉丝</li>\n<li>4月初是7W粉丝+理事长好感3格</li>\n<li>12月底是12W粉丝</li>\n</ul>\n","excerpt":"<p>记录一下玩马娘的心得(<del>已弃坑</del>)</p>","more":"<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>在培训中，初期一般方针就是刷好感度，找人多的刷，属性一般也是水桶比较稳，直到出道战可能就会稍微改变一下。</p>\n<ul>\n<li>スタミナ(耐力)<br>首先属性里面耐力应该是比较关键的，如果耐力不足以跑完则会根据根性降低速度， 典型的就像<code>ダイワスカレと(大和红骥)</code>，<br>快到中期有一个2400m的中距离比赛，看攻略网站是要达到230才会比较安定，如果达不到基本就在最后被甩开了(btw，攻略提到有马的2500m要上到350才比较安定)<br>下面是一些估计值但跟上面看到的攻略不太一样<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs subunit\">短距离   1200            200+<br>マイル   1400<span class=\"hljs-string\">-1800</span>       250 ~ 300<br>中距离   2000<span class=\"hljs-string\">-2400</span>       300 ~ 400<br>长距离   2500<span class=\"hljs-string\">-3200</span><span class=\"hljs-string\">-3600</span>  400 ~ 500+<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"固定技能升级\"><a href=\"#固定技能升级\" class=\"headerlink\" title=\"固定技能升级\"></a>固定技能升级</h3><ul>\n<li>2月初是6W粉丝</li>\n<li>4月初是7W粉丝+理事长好感3格</li>\n<li>12月底是12W粉丝</li>\n</ul>"},{"title":"将项目部署在docker中","date":"2019-03-14T03:39:00.000Z","comments":1,"thumbnail":"/gallery/machi.png","_content":"docker中有两个概念，容器与镜像。 \n\n镜像我们可以简单的理解为是装机用的光盘，而容器就是我们用光盘所装的一个系统。实际上我们就是由镜像生成一个容器，一个镜像可以生成多个容器（只要容器互不相冲突）。\n\n而镜像的生成就是由配置文件来决定（配置文件参数可由后期运行指令等等操作更改），具体如何配置不详细说明。\n<!--more-->\n> Banner: {% link カントク - COLORS http://www.pixiv.net/member_illust.php?mode=medium&illust_id=47646872 カントク - COLORS %}\n\n配置文件例子  \nDockerfile\n``` dockerfile\n#后端java项目\n\n#基础镜像\nFROM 192.168.1.2:5000/library/centos-jdk:1.7.79\n#作者\nMAINTAINER kurenai kurenai@moe.com\n#执行命令，主要用来安装相关的软件\n#RUN \n#添加文件\nADD target/supervise-svc-0.0.1-SNAPSHOT.jar /usr/local\nRUN chmod u+x /usr/local/supervise-svc-0.0.1-SNAPSHOT.jar\n#挂载目录到容器\n#VOLUME [\"/data\"]\n#环境变量设置\n#ENV \n#开放端口\nEXPOSE 1234\n#启动时执行的命令\nCMD [\"/bin/bash\"]\n#启动时执行的命令\nENTRYPOINT [\"java\",\"-jar\",\"-Xms2048m\", \"-Xmx2048m\", \"-XX:PermSize=256M\", \"-XX:MaxPermSize=256M\",\"/usr/local/supervise-svc-0.0.1-SNAPSHOT.jar\"]\n```\n\n``` dockerfile\n#前端react项目\n\n#基础镜像\nFROM xxx.xxx.com:5000/library/ui-nginx:latest\n\n#维护人信息\nMAINTAINER kurenai kurenai@moe.com\n\n#工作目录\nWORKDIR /usr/local/nginx\n\nADD ui.tar.gz /usr/local/nginx/html/\n\nADD nginx.conf /usr/local/nginx/conf/\n\n#暴露端口\nEXPOSE 80\n\n#连接时执行的命令\nCMD [\"/bin/bash\"]\n\n#启动时执行的命令\n#ENTRYPOINT nginx -g \"daemon off;\"\nENTRYPOINT /opt/run.sh\n```\n- 基础命令\n\n``` bash\ndocker ps       #查看doker中正在运行的容器列表\ndocker images   #查看docker中的镜像列表\ndocker build    #将当前目录下的文件打包为镜像\ndocker rm       #移除容器\ndocker rmi      #移除镜像\ndocker pull     #拉取镜像\ndocker logs -f  #查看日志\ndocker restart  #重启容器\ndocker stop     #停止容器运行\n```\n\n## docker-compose\n能够比较集中的管理镜像和容器的部署问题，不必用像原生docker那样一个一个项目进行打包镜像生成容器，只需要把n个项目的配置写在配置文件中即可进行批量打包，拉取镜像，生成容器\n\n配置文件例子\ndocker-compose.yml\n\n``` yaml\nversion: '2.2'\nservices:\n  #项目名称，用docker-compose做管理时，每个项目用这里配置的名称进行单独管理\n  base:\n    #镜像名，拉取镜像时也是用这个名字作为地址\n    image: 192.168.1.2:5000/test/base-svc:0.0.1-SNAPSHOT \n    #打包路径，即docker build的路径\n    build: /opt/dockerfile/base-svc\n    restart: always\n    #环境变量\n    environment:\n      defaultZone: http://192.168.1.3:1200/eureka/\n    #开放端口\n    ports: \n      - \"1430:1430\"\n    #网络连接模式\n    network_mode: \"bridge\"\n\n  supervise:\n    image: 192.168.1.2:5000/test/supervise-svc:0.0.1-SNAPSHOT\n    build: /opt/dockerfile/supervise-svc\n    restart: always\n    environment:\n      defaultZone: http://192.168.1.3:1200/eureka/\n    ports: \n      - \"1570:1570\"\n    network_mode: \"bridge\"\n```\n- 常用命令\n\n``` bash\ndocker-copmpose build       #打包镜像，后面不加项目名则打包所有配置了build的项目，可接多个项目名，用空格隔开\ndocker-compose up -d        #后台运行项目，寻找本地镜像生成容器（若镜像更新则重启用新镜像生成容器），或者docker-compose.yml文件改变了也会进行更新容器，同样不接项目名为所有项目，也可以接多个项目名\ndocker-compose logs -f      #查看日志，同上可接项目名\ndocker-compose pull         #拉取镜像，同上可接项目名\ndocker-compose restart      #重启容器，同上\ndocker-compose stop         #停止运行容器，同上\n```\n\n## 实际生产环境部署项目\n\n`/opt/dockerfile`文件夹下是每个项目的目录，每个目录下是一个Dockerfile配置文件+打包的项目文件（java为.jar, react为tar.gz, 视项目和配置文件而定）\n\n`/opt/cloud`目录下是分的几个类，把几个项目归为一起，项目下是docker-compose.yml配置文件\n\n以后端java项目`meeting-svc`为例 \n1. 打包项目为jar包，\n2. 将jar包放在`/opt/dockerfile/meeting-svc`目录下\n3. 进入到`/opt/cloud/service`\n4. 运行指令`docker-compose build meeting`(配置文件中配置的项目名为`meeting`)打包镜像\n5. 运行`docker-compose up -d meeting`更新容器并运行\n6. 用`docker-compose logs -f meeting`进行查看日志\n---\nps： 后端打包为tar -zcvf xxx.tar.gz -C dist/ .      #dist为编译文件目录","source":"_posts/将项目部署在docker中.md","raw":"---\ntitle: 将项目部署在docker中\ndate: 2019/3/14 11:39\ncategories: \n    - docker\ntags: \n    - docker\n    - ops\ncomments: true\nthumbnail: /gallery/machi.png\n---\ndocker中有两个概念，容器与镜像。 \n\n镜像我们可以简单的理解为是装机用的光盘，而容器就是我们用光盘所装的一个系统。实际上我们就是由镜像生成一个容器，一个镜像可以生成多个容器（只要容器互不相冲突）。\n\n而镜像的生成就是由配置文件来决定（配置文件参数可由后期运行指令等等操作更改），具体如何配置不详细说明。\n<!--more-->\n> Banner: {% link カントク - COLORS http://www.pixiv.net/member_illust.php?mode=medium&illust_id=47646872 カントク - COLORS %}\n\n配置文件例子  \nDockerfile\n``` dockerfile\n#后端java项目\n\n#基础镜像\nFROM 192.168.1.2:5000/library/centos-jdk:1.7.79\n#作者\nMAINTAINER kurenai kurenai@moe.com\n#执行命令，主要用来安装相关的软件\n#RUN \n#添加文件\nADD target/supervise-svc-0.0.1-SNAPSHOT.jar /usr/local\nRUN chmod u+x /usr/local/supervise-svc-0.0.1-SNAPSHOT.jar\n#挂载目录到容器\n#VOLUME [\"/data\"]\n#环境变量设置\n#ENV \n#开放端口\nEXPOSE 1234\n#启动时执行的命令\nCMD [\"/bin/bash\"]\n#启动时执行的命令\nENTRYPOINT [\"java\",\"-jar\",\"-Xms2048m\", \"-Xmx2048m\", \"-XX:PermSize=256M\", \"-XX:MaxPermSize=256M\",\"/usr/local/supervise-svc-0.0.1-SNAPSHOT.jar\"]\n```\n\n``` dockerfile\n#前端react项目\n\n#基础镜像\nFROM xxx.xxx.com:5000/library/ui-nginx:latest\n\n#维护人信息\nMAINTAINER kurenai kurenai@moe.com\n\n#工作目录\nWORKDIR /usr/local/nginx\n\nADD ui.tar.gz /usr/local/nginx/html/\n\nADD nginx.conf /usr/local/nginx/conf/\n\n#暴露端口\nEXPOSE 80\n\n#连接时执行的命令\nCMD [\"/bin/bash\"]\n\n#启动时执行的命令\n#ENTRYPOINT nginx -g \"daemon off;\"\nENTRYPOINT /opt/run.sh\n```\n- 基础命令\n\n``` bash\ndocker ps       #查看doker中正在运行的容器列表\ndocker images   #查看docker中的镜像列表\ndocker build    #将当前目录下的文件打包为镜像\ndocker rm       #移除容器\ndocker rmi      #移除镜像\ndocker pull     #拉取镜像\ndocker logs -f  #查看日志\ndocker restart  #重启容器\ndocker stop     #停止容器运行\n```\n\n## docker-compose\n能够比较集中的管理镜像和容器的部署问题，不必用像原生docker那样一个一个项目进行打包镜像生成容器，只需要把n个项目的配置写在配置文件中即可进行批量打包，拉取镜像，生成容器\n\n配置文件例子\ndocker-compose.yml\n\n``` yaml\nversion: '2.2'\nservices:\n  #项目名称，用docker-compose做管理时，每个项目用这里配置的名称进行单独管理\n  base:\n    #镜像名，拉取镜像时也是用这个名字作为地址\n    image: 192.168.1.2:5000/test/base-svc:0.0.1-SNAPSHOT \n    #打包路径，即docker build的路径\n    build: /opt/dockerfile/base-svc\n    restart: always\n    #环境变量\n    environment:\n      defaultZone: http://192.168.1.3:1200/eureka/\n    #开放端口\n    ports: \n      - \"1430:1430\"\n    #网络连接模式\n    network_mode: \"bridge\"\n\n  supervise:\n    image: 192.168.1.2:5000/test/supervise-svc:0.0.1-SNAPSHOT\n    build: /opt/dockerfile/supervise-svc\n    restart: always\n    environment:\n      defaultZone: http://192.168.1.3:1200/eureka/\n    ports: \n      - \"1570:1570\"\n    network_mode: \"bridge\"\n```\n- 常用命令\n\n``` bash\ndocker-copmpose build       #打包镜像，后面不加项目名则打包所有配置了build的项目，可接多个项目名，用空格隔开\ndocker-compose up -d        #后台运行项目，寻找本地镜像生成容器（若镜像更新则重启用新镜像生成容器），或者docker-compose.yml文件改变了也会进行更新容器，同样不接项目名为所有项目，也可以接多个项目名\ndocker-compose logs -f      #查看日志，同上可接项目名\ndocker-compose pull         #拉取镜像，同上可接项目名\ndocker-compose restart      #重启容器，同上\ndocker-compose stop         #停止运行容器，同上\n```\n\n## 实际生产环境部署项目\n\n`/opt/dockerfile`文件夹下是每个项目的目录，每个目录下是一个Dockerfile配置文件+打包的项目文件（java为.jar, react为tar.gz, 视项目和配置文件而定）\n\n`/opt/cloud`目录下是分的几个类，把几个项目归为一起，项目下是docker-compose.yml配置文件\n\n以后端java项目`meeting-svc`为例 \n1. 打包项目为jar包，\n2. 将jar包放在`/opt/dockerfile/meeting-svc`目录下\n3. 进入到`/opt/cloud/service`\n4. 运行指令`docker-compose build meeting`(配置文件中配置的项目名为`meeting`)打包镜像\n5. 运行`docker-compose up -d meeting`更新容器并运行\n6. 用`docker-compose logs -f meeting`进行查看日志\n---\nps： 后端打包为tar -zcvf xxx.tar.gz -C dist/ .      #dist为编译文件目录","slug":"将项目部署在docker中","published":1,"updated":"2023-01-06T17:02:25.662Z","layout":"post","photos":[],"_id":"clzh7x5wm003aq4qlhkrkfuws","content":"<p>docker中有两个概念，容器与镜像。 </p>\n<p>镜像我们可以简单的理解为是装机用的光盘，而容器就是我们用光盘所装的一个系统。实际上我们就是由镜像生成一个容器，一个镜像可以生成多个容器（只要容器互不相冲突）。</p>\n<p>而镜像的生成就是由配置文件来决定（配置文件参数可由后期运行指令等等操作更改），具体如何配置不详细说明。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>Banner: <a href=\"http://www.pixiv.net/member_illust.php?mode=medium&illust_id=47646872\" title=\"カントク - COLORS\" target>カントク - COLORS</a></p>\n</blockquote>\n<p>配置文件例子<br>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\">#后端java项目</span><br><br><span class=\"hljs-comment\">#基础镜像</span><br><span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.2</span>:<span class=\"hljs-number\">5000</span>/library/centos-jdk:<span class=\"hljs-number\">1.7</span>.<span class=\"hljs-number\">79</span><br><span class=\"hljs-comment\">#作者</span><br><span class=\"hljs-keyword\">MAINTAINER</span> kurenai kurenai@moe.com<br><span class=\"hljs-comment\">#执行命令，主要用来安装相关的软件</span><br><span class=\"hljs-comment\">#RUN </span><br><span class=\"hljs-comment\">#添加文件</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> target/supervise-svc-0.0.1-SNAPSHOT.jar /usr/local</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> u+x /usr/local/supervise-svc-0.0.1-SNAPSHOT.jar</span><br><span class=\"hljs-comment\">#挂载目录到容器</span><br><span class=\"hljs-comment\">#VOLUME [&quot;/data&quot;]</span><br><span class=\"hljs-comment\">#环境变量设置</span><br><span class=\"hljs-comment\">#ENV </span><br><span class=\"hljs-comment\">#开放端口</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">1234</span><br><span class=\"hljs-comment\">#启动时执行的命令</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/bin/bash&quot;</span>]</span><br><span class=\"hljs-comment\">#启动时执行的命令</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;java&quot;</span>,<span class=\"hljs-string\">&quot;-jar&quot;</span>,<span class=\"hljs-string\">&quot;-Xms2048m&quot;</span>, <span class=\"hljs-string\">&quot;-Xmx2048m&quot;</span>, <span class=\"hljs-string\">&quot;-XX:PermSize=256M&quot;</span>, <span class=\"hljs-string\">&quot;-XX:MaxPermSize=256M&quot;</span>,<span class=\"hljs-string\">&quot;/usr/local/supervise-svc-0.0.1-SNAPSHOT.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\">#前端react项目</span><br><br><span class=\"hljs-comment\">#基础镜像</span><br><span class=\"hljs-keyword\">FROM</span> xxx.xxx.com:<span class=\"hljs-number\">5000</span>/library/ui-nginx:latest<br><br><span class=\"hljs-comment\">#维护人信息</span><br><span class=\"hljs-keyword\">MAINTAINER</span> kurenai kurenai@moe.com<br><br><span class=\"hljs-comment\">#工作目录</span><br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /usr/local/nginx</span><br><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> ui.tar.gz /usr/local/nginx/html/</span><br><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> nginx.conf /usr/local/nginx/conf/</span><br><br><span class=\"hljs-comment\">#暴露端口</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">80</span><br><br><span class=\"hljs-comment\">#连接时执行的命令</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/bin/bash&quot;</span>]</span><br><br><span class=\"hljs-comment\">#启动时执行的命令</span><br><span class=\"hljs-comment\">#ENTRYPOINT nginx -g &quot;daemon off;&quot;</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> /opt/run.sh</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>基础命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker ps       <span class=\"hljs-comment\">#查看doker中正在运行的容器列表</span><br>docker images   <span class=\"hljs-comment\">#查看docker中的镜像列表</span><br>docker build    <span class=\"hljs-comment\">#将当前目录下的文件打包为镜像</span><br>docker <span class=\"hljs-built_in\">rm</span>       <span class=\"hljs-comment\">#移除容器</span><br>docker rmi      <span class=\"hljs-comment\">#移除镜像</span><br>docker pull     <span class=\"hljs-comment\">#拉取镜像</span><br>docker logs -f  <span class=\"hljs-comment\">#查看日志</span><br>docker restart  <span class=\"hljs-comment\">#重启容器</span><br>docker stop     <span class=\"hljs-comment\">#停止容器运行</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h2><p>能够比较集中的管理镜像和容器的部署问题，不必用像原生docker那样一个一个项目进行打包镜像生成容器，只需要把n个项目的配置写在配置文件中即可进行批量打包，拉取镜像，生成容器</p>\n<p>配置文件例子<br>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;2.2&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-comment\">#项目名称，用docker-compose做管理时，每个项目用这里配置的名称进行单独管理</span><br>  <span class=\"hljs-attr\">base:</span><br>    <span class=\"hljs-comment\">#镜像名，拉取镜像时也是用这个名字作为地址</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.2</span><span class=\"hljs-string\">:5000/test/base-svc:0.0.1-SNAPSHOT</span> <br>    <span class=\"hljs-comment\">#打包路径，即docker build的路径</span><br>    <span class=\"hljs-attr\">build:</span> <span class=\"hljs-string\">/opt/dockerfile/base-svc</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-comment\">#环境变量</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://192.168.1.3:1200/eureka/</span><br>    <span class=\"hljs-comment\">#开放端口</span><br>    <span class=\"hljs-attr\">ports:</span> <br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;1430:1430&quot;</span><br>    <span class=\"hljs-comment\">#网络连接模式</span><br>    <span class=\"hljs-attr\">network_mode:</span> <span class=\"hljs-string\">&quot;bridge&quot;</span><br><br>  <span class=\"hljs-attr\">supervise:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.2</span><span class=\"hljs-string\">:5000/test/supervise-svc:0.0.1-SNAPSHOT</span><br>    <span class=\"hljs-attr\">build:</span> <span class=\"hljs-string\">/opt/dockerfile/supervise-svc</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://192.168.1.3:1200/eureka/</span><br>    <span class=\"hljs-attr\">ports:</span> <br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;1570:1570&quot;</span><br>    <span class=\"hljs-attr\">network_mode:</span> <span class=\"hljs-string\">&quot;bridge&quot;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>常用命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-copmpose build       <span class=\"hljs-comment\">#打包镜像，后面不加项目名则打包所有配置了build的项目，可接多个项目名，用空格隔开</span><br>docker-compose up -d        <span class=\"hljs-comment\">#后台运行项目，寻找本地镜像生成容器（若镜像更新则重启用新镜像生成容器），或者docker-compose.yml文件改变了也会进行更新容器，同样不接项目名为所有项目，也可以接多个项目名</span><br>docker-compose logs -f      <span class=\"hljs-comment\">#查看日志，同上可接项目名</span><br>docker-compose pull         <span class=\"hljs-comment\">#拉取镜像，同上可接项目名</span><br>docker-compose restart      <span class=\"hljs-comment\">#重启容器，同上</span><br>docker-compose stop         <span class=\"hljs-comment\">#停止运行容器，同上</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实际生产环境部署项目\"><a href=\"#实际生产环境部署项目\" class=\"headerlink\" title=\"实际生产环境部署项目\"></a>实际生产环境部署项目</h2><p><code>/opt/dockerfile</code>文件夹下是每个项目的目录，每个目录下是一个Dockerfile配置文件+打包的项目文件（java为.jar, react为tar.gz, 视项目和配置文件而定）</p>\n<p><code>/opt/cloud</code>目录下是分的几个类，把几个项目归为一起，项目下是docker-compose.yml配置文件</p>\n<p>以后端java项目<code>meeting-svc</code>为例 </p>\n<ol>\n<li>打包项目为jar包，</li>\n<li>将jar包放在<code>/opt/dockerfile/meeting-svc</code>目录下</li>\n<li>进入到<code>/opt/cloud/service</code></li>\n<li>运行指令<code>docker-compose build meeting</code>(配置文件中配置的项目名为<code>meeting</code>)打包镜像</li>\n<li>运行<code>docker-compose up -d meeting</code>更新容器并运行</li>\n<li>用<code>docker-compose logs -f meeting</code>进行查看日志</li>\n</ol>\n<hr>\n<p>ps： 后端打包为tar -zcvf xxx.tar.gz -C dist/ .      #dist为编译文件目录</p>\n","excerpt":"<p>docker中有两个概念，容器与镜像。 </p>\n<p>镜像我们可以简单的理解为是装机用的光盘，而容器就是我们用光盘所装的一个系统。实际上我们就是由镜像生成一个容器，一个镜像可以生成多个容器（只要容器互不相冲突）。</p>\n<p>而镜像的生成就是由配置文件来决定（配置文件参数可由后期运行指令等等操作更改），具体如何配置不详细说明。</p>","more":"<blockquote>\n<p>Banner: <a href=\"http://www.pixiv.net/member_illust.php?mode=medium&illust_id=47646872\" title=\"カントク - COLORS\" target>カントク - COLORS</a></p>\n</blockquote>\n<p>配置文件例子<br>Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\">#后端java项目</span><br><br><span class=\"hljs-comment\">#基础镜像</span><br><span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-number\">192.168</span>.<span class=\"hljs-number\">1.2</span>:<span class=\"hljs-number\">5000</span>/library/centos-jdk:<span class=\"hljs-number\">1.7</span>.<span class=\"hljs-number\">79</span><br><span class=\"hljs-comment\">#作者</span><br><span class=\"hljs-keyword\">MAINTAINER</span> kurenai kurenai@moe.com<br><span class=\"hljs-comment\">#执行命令，主要用来安装相关的软件</span><br><span class=\"hljs-comment\">#RUN </span><br><span class=\"hljs-comment\">#添加文件</span><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> target/supervise-svc-0.0.1-SNAPSHOT.jar /usr/local</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> u+x /usr/local/supervise-svc-0.0.1-SNAPSHOT.jar</span><br><span class=\"hljs-comment\">#挂载目录到容器</span><br><span class=\"hljs-comment\">#VOLUME [&quot;/data&quot;]</span><br><span class=\"hljs-comment\">#环境变量设置</span><br><span class=\"hljs-comment\">#ENV </span><br><span class=\"hljs-comment\">#开放端口</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">1234</span><br><span class=\"hljs-comment\">#启动时执行的命令</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/bin/bash&quot;</span>]</span><br><span class=\"hljs-comment\">#启动时执行的命令</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;java&quot;</span>,<span class=\"hljs-string\">&quot;-jar&quot;</span>,<span class=\"hljs-string\">&quot;-Xms2048m&quot;</span>, <span class=\"hljs-string\">&quot;-Xmx2048m&quot;</span>, <span class=\"hljs-string\">&quot;-XX:PermSize=256M&quot;</span>, <span class=\"hljs-string\">&quot;-XX:MaxPermSize=256M&quot;</span>,<span class=\"hljs-string\">&quot;/usr/local/supervise-svc-0.0.1-SNAPSHOT.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\">#前端react项目</span><br><br><span class=\"hljs-comment\">#基础镜像</span><br><span class=\"hljs-keyword\">FROM</span> xxx.xxx.com:<span class=\"hljs-number\">5000</span>/library/ui-nginx:latest<br><br><span class=\"hljs-comment\">#维护人信息</span><br><span class=\"hljs-keyword\">MAINTAINER</span> kurenai kurenai@moe.com<br><br><span class=\"hljs-comment\">#工作目录</span><br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /usr/local/nginx</span><br><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> ui.tar.gz /usr/local/nginx/html/</span><br><br><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> nginx.conf /usr/local/nginx/conf/</span><br><br><span class=\"hljs-comment\">#暴露端口</span><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">80</span><br><br><span class=\"hljs-comment\">#连接时执行的命令</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/bin/bash&quot;</span>]</span><br><br><span class=\"hljs-comment\">#启动时执行的命令</span><br><span class=\"hljs-comment\">#ENTRYPOINT nginx -g &quot;daemon off;&quot;</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> /opt/run.sh</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>基础命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker ps       <span class=\"hljs-comment\">#查看doker中正在运行的容器列表</span><br>docker images   <span class=\"hljs-comment\">#查看docker中的镜像列表</span><br>docker build    <span class=\"hljs-comment\">#将当前目录下的文件打包为镜像</span><br>docker <span class=\"hljs-built_in\">rm</span>       <span class=\"hljs-comment\">#移除容器</span><br>docker rmi      <span class=\"hljs-comment\">#移除镜像</span><br>docker pull     <span class=\"hljs-comment\">#拉取镜像</span><br>docker logs -f  <span class=\"hljs-comment\">#查看日志</span><br>docker restart  <span class=\"hljs-comment\">#重启容器</span><br>docker stop     <span class=\"hljs-comment\">#停止容器运行</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h2><p>能够比较集中的管理镜像和容器的部署问题，不必用像原生docker那样一个一个项目进行打包镜像生成容器，只需要把n个项目的配置写在配置文件中即可进行批量打包，拉取镜像，生成容器</p>\n<p>配置文件例子<br>docker-compose.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;2.2&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-comment\">#项目名称，用docker-compose做管理时，每个项目用这里配置的名称进行单独管理</span><br>  <span class=\"hljs-attr\">base:</span><br>    <span class=\"hljs-comment\">#镜像名，拉取镜像时也是用这个名字作为地址</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.2</span><span class=\"hljs-string\">:5000/test/base-svc:0.0.1-SNAPSHOT</span> <br>    <span class=\"hljs-comment\">#打包路径，即docker build的路径</span><br>    <span class=\"hljs-attr\">build:</span> <span class=\"hljs-string\">/opt/dockerfile/base-svc</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-comment\">#环境变量</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://192.168.1.3:1200/eureka/</span><br>    <span class=\"hljs-comment\">#开放端口</span><br>    <span class=\"hljs-attr\">ports:</span> <br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;1430:1430&quot;</span><br>    <span class=\"hljs-comment\">#网络连接模式</span><br>    <span class=\"hljs-attr\">network_mode:</span> <span class=\"hljs-string\">&quot;bridge&quot;</span><br><br>  <span class=\"hljs-attr\">supervise:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.2</span><span class=\"hljs-string\">:5000/test/supervise-svc:0.0.1-SNAPSHOT</span><br>    <span class=\"hljs-attr\">build:</span> <span class=\"hljs-string\">/opt/dockerfile/supervise-svc</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">defaultZone:</span> <span class=\"hljs-string\">http://192.168.1.3:1200/eureka/</span><br>    <span class=\"hljs-attr\">ports:</span> <br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;1570:1570&quot;</span><br>    <span class=\"hljs-attr\">network_mode:</span> <span class=\"hljs-string\">&quot;bridge&quot;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>常用命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">docker-copmpose build       <span class=\"hljs-comment\">#打包镜像，后面不加项目名则打包所有配置了build的项目，可接多个项目名，用空格隔开</span><br>docker-compose up -d        <span class=\"hljs-comment\">#后台运行项目，寻找本地镜像生成容器（若镜像更新则重启用新镜像生成容器），或者docker-compose.yml文件改变了也会进行更新容器，同样不接项目名为所有项目，也可以接多个项目名</span><br>docker-compose logs -f      <span class=\"hljs-comment\">#查看日志，同上可接项目名</span><br>docker-compose pull         <span class=\"hljs-comment\">#拉取镜像，同上可接项目名</span><br>docker-compose restart      <span class=\"hljs-comment\">#重启容器，同上</span><br>docker-compose stop         <span class=\"hljs-comment\">#停止运行容器，同上</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"实际生产环境部署项目\"><a href=\"#实际生产环境部署项目\" class=\"headerlink\" title=\"实际生产环境部署项目\"></a>实际生产环境部署项目</h2><p><code>/opt/dockerfile</code>文件夹下是每个项目的目录，每个目录下是一个Dockerfile配置文件+打包的项目文件（java为.jar, react为tar.gz, 视项目和配置文件而定）</p>\n<p><code>/opt/cloud</code>目录下是分的几个类，把几个项目归为一起，项目下是docker-compose.yml配置文件</p>\n<p>以后端java项目<code>meeting-svc</code>为例 </p>\n<ol>\n<li>打包项目为jar包，</li>\n<li>将jar包放在<code>/opt/dockerfile/meeting-svc</code>目录下</li>\n<li>进入到<code>/opt/cloud/service</code></li>\n<li>运行指令<code>docker-compose build meeting</code>(配置文件中配置的项目名为<code>meeting</code>)打包镜像</li>\n<li>运行<code>docker-compose up -d meeting</code>更新容器并运行</li>\n<li>用<code>docker-compose logs -f meeting</code>进行查看日志</li>\n</ol>\n<hr>\n<p>ps： 后端打包为tar -zcvf xxx.tar.gz -C dist/ .      #dist为编译文件目录</p>"}],"PostAsset":[{"_id":"source/_posts/DDD/CQRS.jpg","slug":"CQRS.jpg","post":"clzh7x5vz0001q4ql3muehf58","modified":0,"renderable":0},{"_id":"source/_posts/DDD/p28.png","slug":"p28.png","post":"clzh7x5vz0001q4ql3muehf58","modified":0,"renderable":0},{"_id":"source/_posts/DDD/p29.png","slug":"p29.png","post":"clzh7x5vz0001q4ql3muehf58","modified":0,"renderable":0},{"_id":"source/_posts/DDD/v2-35249fb2693f44bbe4bf48ea6755c55c_hd.jpg","slug":"v2-35249fb2693f44bbe4bf48ea6755c55c_hd.jpg","post":"clzh7x5vz0001q4ql3muehf58","modified":0,"renderable":0},{"_id":"source/_posts/DDD/v2-7c6a1b0c101d8f0cf5e89716bfb4d6a1_hd.jpg","slug":"v2-7c6a1b0c101d8f0cf5e89716bfb4d6a1_hd.jpg","post":"clzh7x5vz0001q4ql3muehf58","modified":0,"renderable":0},{"_id":"source/_posts/Demo/COLORS_47646872_p0.jpg","slug":"COLORS_47646872_p0.jpg","post":"clzh7x5w20003q4ql9hg72sz3","modified":0,"renderable":0},{"_id":"source/_posts/juc-dcl-singleton/volatile.png","slug":"volatile.png","post":"clzh7x5w9000jq4ql45e246ml","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clzh7x5vz0001q4ql3muehf58","category_id":"clzh7x5w30004q4qle7533pqk","_id":"clzh7x5w8000fq4qlfj04gxhq"},{"post_id":"clzh7x5w20003q4ql9hg72sz3","category_id":"clzh7x5w6000bq4ql0lnth9ra","_id":"clzh7x5wa000lq4qlh2ba6ap0"},{"post_id":"clzh7x5w40007q4qlg0sufybo","category_id":"clzh7x5w30004q4qle7533pqk","_id":"clzh7x5wb000pq4qlhh9xhckw"},{"post_id":"clzh7x5w50009q4qldvcs8gna","category_id":"clzh7x5wa000kq4ql1mlchuah","_id":"clzh7x5wc000vq4ql7q9i75is"},{"post_id":"clzh7x5wb000oq4ql7n3ygb0k","category_id":"clzh7x5wa000kq4ql1mlchuah","_id":"clzh7x5wd0010q4ql169n04lz"},{"post_id":"clzh7x5wb000sq4ql1906c6t7","category_id":"clzh7x5wa000kq4ql1mlchuah","_id":"clzh7x5wd0013q4qlcd5hekmr"},{"post_id":"clzh7x5w6000aq4qld1z05t3t","category_id":"clzh7x5wb000qq4qlggsl4nqp","_id":"clzh7x5we0017q4ql0tmdh38x"},{"post_id":"clzh7x5wc000uq4qlh4gb15ui","category_id":"clzh7x5wa000kq4ql1mlchuah","_id":"clzh7x5we0018q4qlhb8y6fui"},{"post_id":"clzh7x5wd0012q4ql5sfr8r31","category_id":"clzh7x5wa000kq4ql1mlchuah","_id":"clzh7x5we001aq4qleleb4wvd"},{"post_id":"clzh7x5w7000dq4ql3gdhext2","category_id":"clzh7x5w30004q4qle7533pqk","_id":"clzh7x5we001dq4ql8vu02vpl"},{"post_id":"clzh7x5w7000dq4ql3gdhext2","category_id":"clzh7x5wc000xq4ql3275766l","_id":"clzh7x5we001gq4qla1l36tmg"},{"post_id":"clzh7x5w9000iq4ql11tlf9jd","category_id":"clzh7x5wa000kq4ql1mlchuah","_id":"clzh7x5wf001jq4ql8xx6b3ze"},{"post_id":"clzh7x5w9000jq4ql45e246ml","category_id":"clzh7x5we0019q4qlf31z5rfz","_id":"clzh7x5wf001kq4ql2n1h4qap"},{"post_id":"clzh7x5wa000nq4qlga2t3vqg","category_id":"clzh7x5we001eq4ql1ox3a5rs","_id":"clzh7x5wf001mq4qlfemih1op"},{"post_id":"clzh7x5wl0035q4qld2ig7gb5","category_id":"clzh7x5wa000kq4ql1mlchuah","_id":"clzh7x5wn003bq4ql9rkd3glc"},{"post_id":"clzh7x5wm0038q4ql06ri70c8","category_id":"clzh7x5wn003cq4qlgrf7eqzq","_id":"clzh7x5wn003gq4ql4lg8220y"},{"post_id":"clzh7x5wm003aq4qlhkrkfuws","category_id":"clzh7x5wn003eq4qlggs3ftj0","_id":"clzh7x5wn003iq4qlaxso6ubt"}],"PostTag":[{"post_id":"clzh7x5vz0001q4ql3muehf58","tag_id":"clzh7x5w40005q4qlar4icbk1","_id":"clzh7x5wc000tq4ql9e6sg6ci"},{"post_id":"clzh7x5vz0001q4ql3muehf58","tag_id":"clzh7x5w6000cq4ql6b01fkux","_id":"clzh7x5wc000wq4ql43zte56e"},{"post_id":"clzh7x5vz0001q4ql3muehf58","tag_id":"clzh7x5w8000hq4qlged859b1","_id":"clzh7x5wd0011q4ql65hq4ydd"},{"post_id":"clzh7x5vz0001q4ql3muehf58","tag_id":"clzh7x5wa000mq4ql3vdi37i1","_id":"clzh7x5wd0014q4ql84ibbudn"},{"post_id":"clzh7x5w20003q4ql9hg72sz3","tag_id":"clzh7x5wb000rq4ql1dfc70i9","_id":"clzh7x5we001cq4ql580pd5wh"},{"post_id":"clzh7x5w20003q4ql9hg72sz3","tag_id":"clzh7x5wd000zq4ql6spmdm95","_id":"clzh7x5we001fq4qlcj4p6ju4"},{"post_id":"clzh7x5w20003q4ql9hg72sz3","tag_id":"clzh7x5we0016q4ql6kshe1fo","_id":"clzh7x5wf001iq4ql8ygccwae"},{"post_id":"clzh7x5w40007q4qlg0sufybo","tag_id":"clzh7x5wa000mq4ql3vdi37i1","_id":"clzh7x5wf001oq4ql92lz9phr"},{"post_id":"clzh7x5w40007q4qlg0sufybo","tag_id":"clzh7x5wf001hq4qlhhwufsff","_id":"clzh7x5wf001pq4qlb23ncoay"},{"post_id":"clzh7x5w40007q4qlg0sufybo","tag_id":"clzh7x5wf001lq4ql3479c7v7","_id":"clzh7x5wf001rq4ql6dpw2snw"},{"post_id":"clzh7x5w50009q4qldvcs8gna","tag_id":"clzh7x5wf001nq4ql8f0t3vff","_id":"clzh7x5wg001tq4qlg5vs8amg"},{"post_id":"clzh7x5w50009q4qldvcs8gna","tag_id":"clzh7x5wf001qq4qlavdc0ps9","_id":"clzh7x5wg001uq4qlc1l1azi4"},{"post_id":"clzh7x5w6000aq4qld1z05t3t","tag_id":"clzh7x5wf001sq4qlduoiaeoi","_id":"clzh7x5wg001wq4ql9wze6yki"},{"post_id":"clzh7x5w7000dq4ql3gdhext2","tag_id":"clzh7x5wa000mq4ql3vdi37i1","_id":"clzh7x5wg0021q4qlbubse4r3"},{"post_id":"clzh7x5w7000dq4ql3gdhext2","tag_id":"clzh7x5wg001xq4qldul1ciq1","_id":"clzh7x5wg0022q4qla13u916v"},{"post_id":"clzh7x5w7000dq4ql3gdhext2","tag_id":"clzh7x5wg001yq4qldvrea1ql","_id":"clzh7x5wh0024q4qldkehbw1e"},{"post_id":"clzh7x5w7000dq4ql3gdhext2","tag_id":"clzh7x5wg001zq4qlbelsgdz1","_id":"clzh7x5wh0025q4ql4swn2y2x"},{"post_id":"clzh7x5w7000eq4qleusvg48m","tag_id":"clzh7x5wg0020q4ql4jicff2f","_id":"clzh7x5wh0027q4ql869a6zkl"},{"post_id":"clzh7x5w9000iq4ql11tlf9jd","tag_id":"clzh7x5wg0023q4ql7bil2imt","_id":"clzh7x5wh002aq4qlhw9yckk5"},{"post_id":"clzh7x5w9000iq4ql11tlf9jd","tag_id":"clzh7x5wh0026q4qlgbxqcjjh","_id":"clzh7x5wh002bq4ql7da9hr30"},{"post_id":"clzh7x5w9000iq4ql11tlf9jd","tag_id":"clzh7x5wh0028q4ql329ahx22","_id":"clzh7x5wh002dq4ql2vnz47wz"},{"post_id":"clzh7x5w9000jq4ql45e246ml","tag_id":"clzh7x5wa000mq4ql3vdi37i1","_id":"clzh7x5wh002fq4qlfb0deypn"},{"post_id":"clzh7x5w9000jq4ql45e246ml","tag_id":"clzh7x5wh002cq4ql0ebhgsea","_id":"clzh7x5wi002gq4qldqrb1ne5"},{"post_id":"clzh7x5wa000nq4qlga2t3vqg","tag_id":"clzh7x5wf001hq4qlhhwufsff","_id":"clzh7x5wi002jq4ql9osl08fa"},{"post_id":"clzh7x5wa000nq4qlga2t3vqg","tag_id":"clzh7x5wi002hq4ql71mr6aag","_id":"clzh7x5wi002kq4qlfoud5upq"},{"post_id":"clzh7x5wb000oq4ql7n3ygb0k","tag_id":"clzh7x5wa000mq4ql3vdi37i1","_id":"clzh7x5wi002oq4ql7mdj2jgw"},{"post_id":"clzh7x5wb000oq4ql7n3ygb0k","tag_id":"clzh7x5wg001xq4qldul1ciq1","_id":"clzh7x5wi002pq4ql24pf8w4m"},{"post_id":"clzh7x5wb000oq4ql7n3ygb0k","tag_id":"clzh7x5wg001yq4qldvrea1ql","_id":"clzh7x5wj002rq4ql5ds22wej"},{"post_id":"clzh7x5wb000oq4ql7n3ygb0k","tag_id":"clzh7x5wg001zq4qlbelsgdz1","_id":"clzh7x5wj002sq4ql02jwhmig"},{"post_id":"clzh7x5wb000sq4ql1906c6t7","tag_id":"clzh7x5wa000mq4ql3vdi37i1","_id":"clzh7x5wj002vq4qldsw119yy"},{"post_id":"clzh7x5wb000sq4ql1906c6t7","tag_id":"clzh7x5wi002nq4ql24nghecr","_id":"clzh7x5wj002wq4ql4rztgs7q"},{"post_id":"clzh7x5wb000sq4ql1906c6t7","tag_id":"clzh7x5wi002qq4qla1k6fh3m","_id":"clzh7x5wj002yq4qlc7j666a0"},{"post_id":"clzh7x5wb000sq4ql1906c6t7","tag_id":"clzh7x5wj002tq4ql915m80z6","_id":"clzh7x5wj002zq4ql79rl6us2"},{"post_id":"clzh7x5wc000uq4qlh4gb15ui","tag_id":"clzh7x5wa000mq4ql3vdi37i1","_id":"clzh7x5wk0031q4ql69kleuyr"},{"post_id":"clzh7x5wc000uq4qlh4gb15ui","tag_id":"clzh7x5wi002nq4ql24nghecr","_id":"clzh7x5wk0032q4qlcdtu9dms"},{"post_id":"clzh7x5wc000uq4qlh4gb15ui","tag_id":"clzh7x5wi002qq4qla1k6fh3m","_id":"clzh7x5wk0033q4qlebhq6xc6"},{"post_id":"clzh7x5wc000uq4qlh4gb15ui","tag_id":"clzh7x5wj002tq4ql915m80z6","_id":"clzh7x5wk0034q4ql8k63bgwi"},{"post_id":"clzh7x5wl0035q4qld2ig7gb5","tag_id":"clzh7x5wi002qq4qla1k6fh3m","_id":"clzh7x5wm0037q4qla7hug70q"},{"post_id":"clzh7x5wl0036q4qlcfim7lsp","tag_id":"clzh7x5wm0039q4qlbgqvcfzc","_id":"clzh7x5wn003jq4qlgn4x5pzg"},{"post_id":"clzh7x5wl0036q4qlcfim7lsp","tag_id":"clzh7x5wn003dq4ql9nnz3q2b","_id":"clzh7x5wo003kq4ql7jmufzcw"},{"post_id":"clzh7x5wl0036q4qlcfim7lsp","tag_id":"clzh7x5wn003fq4qler5b46j3","_id":"clzh7x5wo003mq4qlerqecqrt"},{"post_id":"clzh7x5wm0038q4ql06ri70c8","tag_id":"clzh7x5wn003hq4qletaz1nrf","_id":"clzh7x5wo003nq4ql13ksb6jf"},{"post_id":"clzh7x5wm003aq4qlhkrkfuws","tag_id":"clzh7x5wo003lq4qlg2klc8nh","_id":"clzh7x5wo003pq4ql6lwnddz8"},{"post_id":"clzh7x5wm003aq4qlhkrkfuws","tag_id":"clzh7x5wo003oq4ql7nyx180e","_id":"clzh7x5wo003qq4ql3zt3eg7h"}],"Tag":[{"name":"DDD","_id":"clzh7x5w40005q4qlar4icbk1"},{"name":"CQRS","_id":"clzh7x5w6000cq4ql6b01fkux"},{"name":"Event Sourcing","_id":"clzh7x5w8000hq4qlged859b1"},{"name":"Java","_id":"clzh7x5wa000mq4ql3vdi37i1"},{"name":"监督","_id":"clzh7x5wb000rq4ql1dfc70i9"},{"name":"格子裙","_id":"clzh7x5wd000zq4ql6spmdm95"},{"name":"放学五年目","_id":"clzh7x5we0016q4ql6kshe1fo"},{"name":"Kotlin","_id":"clzh7x5wf001hq4qlhhwufsff"},{"name":"Gradle","_id":"clzh7x5wf001lq4ql3479c7v7"},{"name":"Nginx","_id":"clzh7x5wf001nq4ql8f0t3vff"},{"name":"转载","_id":"clzh7x5wf001qq4qlavdc0ps9"},{"name":"GraalVM","_id":"clzh7x5wf001sq4qlduoiaeoi"},{"name":"Reactor","_id":"clzh7x5wg001xq4qldul1ciq1"},{"name":"Webflux","_id":"clzh7x5wg001yq4qldvrea1ql"},{"name":"Spring","_id":"clzh7x5wg001zq4qlbelsgdz1"},{"name":"tags","_id":"clzh7x5wg0020q4ql4jicff2f"},{"name":"MQ","_id":"clzh7x5wg0023q4ql7bil2imt"},{"name":"Micro Service","_id":"clzh7x5wh0026q4qlgbxqcjjh"},{"name":"Redis","_id":"clzh7x5wh0028q4ql329ahx22"},{"name":"J.U.C","_id":"clzh7x5wh002cq4ql0ebhgsea"},{"name":"协程","_id":"clzh7x5wi002hq4ql71mr6aag"},{"name":"ORM","_id":"clzh7x5wi002nq4ql24nghecr"},{"name":"JPA","_id":"clzh7x5wi002qq4qla1k6fh3m"},{"name":"Hibernate","_id":"clzh7x5wj002tq4ql915m80z6"},{"name":"三秋 缒","_id":"clzh7x5wm0039q4qlbgqvcfzc"},{"name":"摘抄","_id":"clzh7x5wn003dq4ql9nnz3q2b"},{"name":"小说","_id":"clzh7x5wn003fq4qler5b46j3"},{"name":"ウマ娘","_id":"clzh7x5wn003hq4qletaz1nrf"},{"name":"docker","_id":"clzh7x5wo003lq4qlg2klc8nh"},{"name":"ops","_id":"clzh7x5wo003oq4ql7nyx180e"}]}}